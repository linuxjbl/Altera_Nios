// nios2e_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module nios2e_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                  //                                clk_0_clk.clk
		input  wire        nios2_qsys_0_reset_reset_bridge_in_reset_reset, // nios2_qsys_0_reset_reset_bridge_in_reset.reset
		input  wire [18:0] nios2_qsys_0_data_master_address,               //                 nios2_qsys_0_data_master.address
		output wire        nios2_qsys_0_data_master_waitrequest,           //                                         .waitrequest
		input  wire [3:0]  nios2_qsys_0_data_master_byteenable,            //                                         .byteenable
		input  wire        nios2_qsys_0_data_master_read,                  //                                         .read
		output wire [31:0] nios2_qsys_0_data_master_readdata,              //                                         .readdata
		input  wire        nios2_qsys_0_data_master_write,                 //                                         .write
		input  wire [31:0] nios2_qsys_0_data_master_writedata,             //                                         .writedata
		input  wire        nios2_qsys_0_data_master_debugaccess,           //                                         .debugaccess
		input  wire [16:0] nios2_qsys_0_instruction_master_address,        //          nios2_qsys_0_instruction_master.address
		output wire        nios2_qsys_0_instruction_master_waitrequest,    //                                         .waitrequest
		input  wire        nios2_qsys_0_instruction_master_read,           //                                         .read
		output wire [31:0] nios2_qsys_0_instruction_master_readdata,       //                                         .readdata
		output wire [1:0]  DECODE1_s1_address,                             //                               DECODE1_s1.address
		output wire        DECODE1_s1_write,                               //                                         .write
		input  wire [31:0] DECODE1_s1_readdata,                            //                                         .readdata
		output wire [31:0] DECODE1_s1_writedata,                           //                                         .writedata
		output wire        DECODE1_s1_chipselect,                          //                                         .chipselect
		output wire [1:0]  DECODE2_s1_address,                             //                               DECODE2_s1.address
		output wire        DECODE2_s1_write,                               //                                         .write
		input  wire [31:0] DECODE2_s1_readdata,                            //                                         .readdata
		output wire [31:0] DECODE2_s1_writedata,                           //                                         .writedata
		output wire        DECODE2_s1_chipselect,                          //                                         .chipselect
		output wire [1:0]  DECODE3_s1_address,                             //                               DECODE3_s1.address
		output wire        DECODE3_s1_write,                               //                                         .write
		input  wire [31:0] DECODE3_s1_readdata,                            //                                         .readdata
		output wire [31:0] DECODE3_s1_writedata,                           //                                         .writedata
		output wire        DECODE3_s1_chipselect,                          //                                         .chipselect
		output wire [1:0]  DECODE4_s1_address,                             //                               DECODE4_s1.address
		output wire        DECODE4_s1_write,                               //                                         .write
		input  wire [31:0] DECODE4_s1_readdata,                            //                                         .readdata
		output wire [31:0] DECODE4_s1_writedata,                           //                                         .writedata
		output wire        DECODE4_s1_chipselect,                          //                                         .chipselect
		output wire [1:0]  HEX0_s1_address,                                //                                  HEX0_s1.address
		output wire        HEX0_s1_write,                                  //                                         .write
		input  wire [31:0] HEX0_s1_readdata,                               //                                         .readdata
		output wire [31:0] HEX0_s1_writedata,                              //                                         .writedata
		output wire        HEX0_s1_chipselect,                             //                                         .chipselect
		output wire [8:0]  nios2_qsys_0_debug_mem_slave_address,           //             nios2_qsys_0_debug_mem_slave.address
		output wire        nios2_qsys_0_debug_mem_slave_write,             //                                         .write
		output wire        nios2_qsys_0_debug_mem_slave_read,              //                                         .read
		input  wire [31:0] nios2_qsys_0_debug_mem_slave_readdata,          //                                         .readdata
		output wire [31:0] nios2_qsys_0_debug_mem_slave_writedata,         //                                         .writedata
		output wire [3:0]  nios2_qsys_0_debug_mem_slave_byteenable,        //                                         .byteenable
		input  wire        nios2_qsys_0_debug_mem_slave_waitrequest,       //                                         .waitrequest
		output wire        nios2_qsys_0_debug_mem_slave_debugaccess,       //                                         .debugaccess
		output wire [11:0] onchip_memory2_0_s1_address,                    //                      onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                      //                                         .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                   //                                         .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                  //                                         .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                 //                                         .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                 //                                         .chipselect
		output wire        onchip_memory2_0_s1_clken,                      //                                         .clken
		output wire [1:0]  PERIOD1_s1_address,                             //                               PERIOD1_s1.address
		output wire        PERIOD1_s1_write,                               //                                         .write
		input  wire [31:0] PERIOD1_s1_readdata,                            //                                         .readdata
		output wire [31:0] PERIOD1_s1_writedata,                           //                                         .writedata
		output wire        PERIOD1_s1_chipselect,                          //                                         .chipselect
		output wire [1:0]  PERIOD2_s1_address,                             //                               PERIOD2_s1.address
		output wire        PERIOD2_s1_write,                               //                                         .write
		input  wire [31:0] PERIOD2_s1_readdata,                            //                                         .readdata
		output wire [31:0] PERIOD2_s1_writedata,                           //                                         .writedata
		output wire        PERIOD2_s1_chipselect,                          //                                         .chipselect
		output wire [1:0]  PERIOD3_s1_address,                             //                               PERIOD3_s1.address
		output wire        PERIOD3_s1_write,                               //                                         .write
		input  wire [31:0] PERIOD3_s1_readdata,                            //                                         .readdata
		output wire [31:0] PERIOD3_s1_writedata,                           //                                         .writedata
		output wire        PERIOD3_s1_chipselect,                          //                                         .chipselect
		output wire [1:0]  PERIOD4_s1_address,                             //                               PERIOD4_s1.address
		output wire        PERIOD4_s1_write,                               //                                         .write
		input  wire [31:0] PERIOD4_s1_readdata,                            //                                         .readdata
		output wire [31:0] PERIOD4_s1_writedata,                           //                                         .writedata
		output wire        PERIOD4_s1_chipselect,                          //                                         .chipselect
		output wire [1:0]  PUSH_s1_address,                                //                                  PUSH_s1.address
		input  wire [31:0] PUSH_s1_readdata                                //                                         .readdata
	);

	wire         nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_qsys_0_data_master_agent:av_waitrequest -> nios2_qsys_0_data_master_translator:uav_waitrequest
	wire  [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_qsys_0_data_master_agent:av_readdata -> nios2_qsys_0_data_master_translator:uav_readdata
	wire         nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_qsys_0_data_master_translator:uav_debugaccess -> nios2_qsys_0_data_master_agent:av_debugaccess
	wire  [18:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_address;              // nios2_qsys_0_data_master_translator:uav_address -> nios2_qsys_0_data_master_agent:av_address
	wire         nios2_qsys_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_qsys_0_data_master_translator:uav_read -> nios2_qsys_0_data_master_agent:av_read
	wire   [3:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_qsys_0_data_master_translator:uav_byteenable -> nios2_qsys_0_data_master_agent:av_byteenable
	wire         nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_qsys_0_data_master_agent:av_readdatavalid -> nios2_qsys_0_data_master_translator:uav_readdatavalid
	wire         nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_qsys_0_data_master_translator:uav_lock -> nios2_qsys_0_data_master_agent:av_lock
	wire         nios2_qsys_0_data_master_translator_avalon_universal_master_0_write;                // nios2_qsys_0_data_master_translator:uav_write -> nios2_qsys_0_data_master_agent:av_write
	wire  [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_qsys_0_data_master_translator:uav_writedata -> nios2_qsys_0_data_master_agent:av_writedata
	wire   [2:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_qsys_0_data_master_translator:uav_burstcount -> nios2_qsys_0_data_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_qsys_0_data_master_agent:rp_valid
	wire  [96:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_qsys_0_data_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                                  // nios2_qsys_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire  [11:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_qsys_0_data_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_qsys_0_data_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_qsys_0_data_master_agent:rp_endofpacket
	wire         nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_qsys_0_instruction_master_agent:av_waitrequest -> nios2_qsys_0_instruction_master_translator:uav_waitrequest
	wire  [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_qsys_0_instruction_master_agent:av_readdata -> nios2_qsys_0_instruction_master_translator:uav_readdata
	wire         nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_qsys_0_instruction_master_translator:uav_debugaccess -> nios2_qsys_0_instruction_master_agent:av_debugaccess
	wire  [18:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_qsys_0_instruction_master_translator:uav_address -> nios2_qsys_0_instruction_master_agent:av_address
	wire         nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_qsys_0_instruction_master_translator:uav_read -> nios2_qsys_0_instruction_master_agent:av_read
	wire   [3:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_qsys_0_instruction_master_translator:uav_byteenable -> nios2_qsys_0_instruction_master_agent:av_byteenable
	wire         nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_qsys_0_instruction_master_agent:av_readdatavalid -> nios2_qsys_0_instruction_master_translator:uav_readdatavalid
	wire         nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_qsys_0_instruction_master_translator:uav_lock -> nios2_qsys_0_instruction_master_agent:av_lock
	wire         nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_qsys_0_instruction_master_translator:uav_write -> nios2_qsys_0_instruction_master_agent:av_write
	wire  [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_qsys_0_instruction_master_translator:uav_writedata -> nios2_qsys_0_instruction_master_agent:av_writedata
	wire   [2:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_qsys_0_instruction_master_translator:uav_burstcount -> nios2_qsys_0_instruction_master_agent:av_burstcount
	wire         rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_qsys_0_instruction_master_agent:rp_valid
	wire  [96:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_qsys_0_instruction_master_agent:rp_data
	wire         rsp_mux_001_src_ready;                                                              // nios2_qsys_0_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire  [11:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_qsys_0_instruction_master_agent:rp_channel
	wire         rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_qsys_0_instruction_master_agent:rp_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_qsys_0_instruction_master_agent:rp_endofpacket
	wire  [31:0] nios2_qsys_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_qsys_0_debug_mem_slave_translator:uav_readdata -> nios2_qsys_0_debug_mem_slave_agent:m0_readdata
	wire         nios2_qsys_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_qsys_0_debug_mem_slave_translator:uav_waitrequest -> nios2_qsys_0_debug_mem_slave_agent:m0_waitrequest
	wire         nios2_qsys_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_qsys_0_debug_mem_slave_agent:m0_debugaccess -> nios2_qsys_0_debug_mem_slave_translator:uav_debugaccess
	wire  [18:0] nios2_qsys_0_debug_mem_slave_agent_m0_address;                                      // nios2_qsys_0_debug_mem_slave_agent:m0_address -> nios2_qsys_0_debug_mem_slave_translator:uav_address
	wire   [3:0] nios2_qsys_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_qsys_0_debug_mem_slave_agent:m0_byteenable -> nios2_qsys_0_debug_mem_slave_translator:uav_byteenable
	wire         nios2_qsys_0_debug_mem_slave_agent_m0_read;                                         // nios2_qsys_0_debug_mem_slave_agent:m0_read -> nios2_qsys_0_debug_mem_slave_translator:uav_read
	wire         nios2_qsys_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_qsys_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_qsys_0_debug_mem_slave_agent:m0_readdatavalid
	wire         nios2_qsys_0_debug_mem_slave_agent_m0_lock;                                         // nios2_qsys_0_debug_mem_slave_agent:m0_lock -> nios2_qsys_0_debug_mem_slave_translator:uav_lock
	wire  [31:0] nios2_qsys_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_qsys_0_debug_mem_slave_agent:m0_writedata -> nios2_qsys_0_debug_mem_slave_translator:uav_writedata
	wire         nios2_qsys_0_debug_mem_slave_agent_m0_write;                                        // nios2_qsys_0_debug_mem_slave_agent:m0_write -> nios2_qsys_0_debug_mem_slave_translator:uav_write
	wire   [2:0] nios2_qsys_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_qsys_0_debug_mem_slave_agent:m0_burstcount -> nios2_qsys_0_debug_mem_slave_translator:uav_burstcount
	wire         nios2_qsys_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_qsys_0_debug_mem_slave_agent:rf_source_valid -> nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [97:0] nios2_qsys_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_qsys_0_debug_mem_slave_agent:rf_source_data -> nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire         nios2_qsys_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_qsys_0_debug_mem_slave_agent:rf_source_ready
	wire         nios2_qsys_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_qsys_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire         nios2_qsys_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_qsys_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire         nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_qsys_0_debug_mem_slave_agent:rf_sink_valid
	wire  [97:0] nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_qsys_0_debug_mem_slave_agent:rf_sink_data
	wire         nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_qsys_0_debug_mem_slave_agent:rf_sink_ready -> nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire         nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_qsys_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire         nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_qsys_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_qsys_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> nios2_qsys_0_debug_mem_slave_agent:cp_valid
	wire  [96:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> nios2_qsys_0_debug_mem_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                                  // nios2_qsys_0_debug_mem_slave_agent:cp_ready -> cmd_mux:src_ready
	wire  [11:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> nios2_qsys_0_debug_mem_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> nios2_qsys_0_debug_mem_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> nios2_qsys_0_debug_mem_slave_agent:cp_endofpacket
	wire  [31:0] hex0_s1_agent_m0_readdata;                                                          // HEX0_s1_translator:uav_readdata -> HEX0_s1_agent:m0_readdata
	wire         hex0_s1_agent_m0_waitrequest;                                                       // HEX0_s1_translator:uav_waitrequest -> HEX0_s1_agent:m0_waitrequest
	wire         hex0_s1_agent_m0_debugaccess;                                                       // HEX0_s1_agent:m0_debugaccess -> HEX0_s1_translator:uav_debugaccess
	wire  [18:0] hex0_s1_agent_m0_address;                                                           // HEX0_s1_agent:m0_address -> HEX0_s1_translator:uav_address
	wire   [3:0] hex0_s1_agent_m0_byteenable;                                                        // HEX0_s1_agent:m0_byteenable -> HEX0_s1_translator:uav_byteenable
	wire         hex0_s1_agent_m0_read;                                                              // HEX0_s1_agent:m0_read -> HEX0_s1_translator:uav_read
	wire         hex0_s1_agent_m0_readdatavalid;                                                     // HEX0_s1_translator:uav_readdatavalid -> HEX0_s1_agent:m0_readdatavalid
	wire         hex0_s1_agent_m0_lock;                                                              // HEX0_s1_agent:m0_lock -> HEX0_s1_translator:uav_lock
	wire  [31:0] hex0_s1_agent_m0_writedata;                                                         // HEX0_s1_agent:m0_writedata -> HEX0_s1_translator:uav_writedata
	wire         hex0_s1_agent_m0_write;                                                             // HEX0_s1_agent:m0_write -> HEX0_s1_translator:uav_write
	wire   [2:0] hex0_s1_agent_m0_burstcount;                                                        // HEX0_s1_agent:m0_burstcount -> HEX0_s1_translator:uav_burstcount
	wire         hex0_s1_agent_rf_source_valid;                                                      // HEX0_s1_agent:rf_source_valid -> HEX0_s1_agent_rsp_fifo:in_valid
	wire  [97:0] hex0_s1_agent_rf_source_data;                                                       // HEX0_s1_agent:rf_source_data -> HEX0_s1_agent_rsp_fifo:in_data
	wire         hex0_s1_agent_rf_source_ready;                                                      // HEX0_s1_agent_rsp_fifo:in_ready -> HEX0_s1_agent:rf_source_ready
	wire         hex0_s1_agent_rf_source_startofpacket;                                              // HEX0_s1_agent:rf_source_startofpacket -> HEX0_s1_agent_rsp_fifo:in_startofpacket
	wire         hex0_s1_agent_rf_source_endofpacket;                                                // HEX0_s1_agent:rf_source_endofpacket -> HEX0_s1_agent_rsp_fifo:in_endofpacket
	wire         hex0_s1_agent_rsp_fifo_out_valid;                                                   // HEX0_s1_agent_rsp_fifo:out_valid -> HEX0_s1_agent:rf_sink_valid
	wire  [97:0] hex0_s1_agent_rsp_fifo_out_data;                                                    // HEX0_s1_agent_rsp_fifo:out_data -> HEX0_s1_agent:rf_sink_data
	wire         hex0_s1_agent_rsp_fifo_out_ready;                                                   // HEX0_s1_agent:rf_sink_ready -> HEX0_s1_agent_rsp_fifo:out_ready
	wire         hex0_s1_agent_rsp_fifo_out_startofpacket;                                           // HEX0_s1_agent_rsp_fifo:out_startofpacket -> HEX0_s1_agent:rf_sink_startofpacket
	wire         hex0_s1_agent_rsp_fifo_out_endofpacket;                                             // HEX0_s1_agent_rsp_fifo:out_endofpacket -> HEX0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> HEX0_s1_agent:cp_valid
	wire  [96:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> HEX0_s1_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                              // HEX0_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [11:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> HEX0_s1_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> HEX0_s1_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> HEX0_s1_agent:cp_endofpacket
	wire  [31:0] push_s1_agent_m0_readdata;                                                          // PUSH_s1_translator:uav_readdata -> PUSH_s1_agent:m0_readdata
	wire         push_s1_agent_m0_waitrequest;                                                       // PUSH_s1_translator:uav_waitrequest -> PUSH_s1_agent:m0_waitrequest
	wire         push_s1_agent_m0_debugaccess;                                                       // PUSH_s1_agent:m0_debugaccess -> PUSH_s1_translator:uav_debugaccess
	wire  [18:0] push_s1_agent_m0_address;                                                           // PUSH_s1_agent:m0_address -> PUSH_s1_translator:uav_address
	wire   [3:0] push_s1_agent_m0_byteenable;                                                        // PUSH_s1_agent:m0_byteenable -> PUSH_s1_translator:uav_byteenable
	wire         push_s1_agent_m0_read;                                                              // PUSH_s1_agent:m0_read -> PUSH_s1_translator:uav_read
	wire         push_s1_agent_m0_readdatavalid;                                                     // PUSH_s1_translator:uav_readdatavalid -> PUSH_s1_agent:m0_readdatavalid
	wire         push_s1_agent_m0_lock;                                                              // PUSH_s1_agent:m0_lock -> PUSH_s1_translator:uav_lock
	wire  [31:0] push_s1_agent_m0_writedata;                                                         // PUSH_s1_agent:m0_writedata -> PUSH_s1_translator:uav_writedata
	wire         push_s1_agent_m0_write;                                                             // PUSH_s1_agent:m0_write -> PUSH_s1_translator:uav_write
	wire   [2:0] push_s1_agent_m0_burstcount;                                                        // PUSH_s1_agent:m0_burstcount -> PUSH_s1_translator:uav_burstcount
	wire         push_s1_agent_rf_source_valid;                                                      // PUSH_s1_agent:rf_source_valid -> PUSH_s1_agent_rsp_fifo:in_valid
	wire  [97:0] push_s1_agent_rf_source_data;                                                       // PUSH_s1_agent:rf_source_data -> PUSH_s1_agent_rsp_fifo:in_data
	wire         push_s1_agent_rf_source_ready;                                                      // PUSH_s1_agent_rsp_fifo:in_ready -> PUSH_s1_agent:rf_source_ready
	wire         push_s1_agent_rf_source_startofpacket;                                              // PUSH_s1_agent:rf_source_startofpacket -> PUSH_s1_agent_rsp_fifo:in_startofpacket
	wire         push_s1_agent_rf_source_endofpacket;                                                // PUSH_s1_agent:rf_source_endofpacket -> PUSH_s1_agent_rsp_fifo:in_endofpacket
	wire         push_s1_agent_rsp_fifo_out_valid;                                                   // PUSH_s1_agent_rsp_fifo:out_valid -> PUSH_s1_agent:rf_sink_valid
	wire  [97:0] push_s1_agent_rsp_fifo_out_data;                                                    // PUSH_s1_agent_rsp_fifo:out_data -> PUSH_s1_agent:rf_sink_data
	wire         push_s1_agent_rsp_fifo_out_ready;                                                   // PUSH_s1_agent:rf_sink_ready -> PUSH_s1_agent_rsp_fifo:out_ready
	wire         push_s1_agent_rsp_fifo_out_startofpacket;                                           // PUSH_s1_agent_rsp_fifo:out_startofpacket -> PUSH_s1_agent:rf_sink_startofpacket
	wire         push_s1_agent_rsp_fifo_out_endofpacket;                                             // PUSH_s1_agent_rsp_fifo:out_endofpacket -> PUSH_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> PUSH_s1_agent:cp_valid
	wire  [96:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> PUSH_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                              // PUSH_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [11:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> PUSH_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> PUSH_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> PUSH_s1_agent:cp_endofpacket
	wire  [31:0] period1_s1_agent_m0_readdata;                                                       // PERIOD1_s1_translator:uav_readdata -> PERIOD1_s1_agent:m0_readdata
	wire         period1_s1_agent_m0_waitrequest;                                                    // PERIOD1_s1_translator:uav_waitrequest -> PERIOD1_s1_agent:m0_waitrequest
	wire         period1_s1_agent_m0_debugaccess;                                                    // PERIOD1_s1_agent:m0_debugaccess -> PERIOD1_s1_translator:uav_debugaccess
	wire  [18:0] period1_s1_agent_m0_address;                                                        // PERIOD1_s1_agent:m0_address -> PERIOD1_s1_translator:uav_address
	wire   [3:0] period1_s1_agent_m0_byteenable;                                                     // PERIOD1_s1_agent:m0_byteenable -> PERIOD1_s1_translator:uav_byteenable
	wire         period1_s1_agent_m0_read;                                                           // PERIOD1_s1_agent:m0_read -> PERIOD1_s1_translator:uav_read
	wire         period1_s1_agent_m0_readdatavalid;                                                  // PERIOD1_s1_translator:uav_readdatavalid -> PERIOD1_s1_agent:m0_readdatavalid
	wire         period1_s1_agent_m0_lock;                                                           // PERIOD1_s1_agent:m0_lock -> PERIOD1_s1_translator:uav_lock
	wire  [31:0] period1_s1_agent_m0_writedata;                                                      // PERIOD1_s1_agent:m0_writedata -> PERIOD1_s1_translator:uav_writedata
	wire         period1_s1_agent_m0_write;                                                          // PERIOD1_s1_agent:m0_write -> PERIOD1_s1_translator:uav_write
	wire   [2:0] period1_s1_agent_m0_burstcount;                                                     // PERIOD1_s1_agent:m0_burstcount -> PERIOD1_s1_translator:uav_burstcount
	wire         period1_s1_agent_rf_source_valid;                                                   // PERIOD1_s1_agent:rf_source_valid -> PERIOD1_s1_agent_rsp_fifo:in_valid
	wire  [97:0] period1_s1_agent_rf_source_data;                                                    // PERIOD1_s1_agent:rf_source_data -> PERIOD1_s1_agent_rsp_fifo:in_data
	wire         period1_s1_agent_rf_source_ready;                                                   // PERIOD1_s1_agent_rsp_fifo:in_ready -> PERIOD1_s1_agent:rf_source_ready
	wire         period1_s1_agent_rf_source_startofpacket;                                           // PERIOD1_s1_agent:rf_source_startofpacket -> PERIOD1_s1_agent_rsp_fifo:in_startofpacket
	wire         period1_s1_agent_rf_source_endofpacket;                                             // PERIOD1_s1_agent:rf_source_endofpacket -> PERIOD1_s1_agent_rsp_fifo:in_endofpacket
	wire         period1_s1_agent_rsp_fifo_out_valid;                                                // PERIOD1_s1_agent_rsp_fifo:out_valid -> PERIOD1_s1_agent:rf_sink_valid
	wire  [97:0] period1_s1_agent_rsp_fifo_out_data;                                                 // PERIOD1_s1_agent_rsp_fifo:out_data -> PERIOD1_s1_agent:rf_sink_data
	wire         period1_s1_agent_rsp_fifo_out_ready;                                                // PERIOD1_s1_agent:rf_sink_ready -> PERIOD1_s1_agent_rsp_fifo:out_ready
	wire         period1_s1_agent_rsp_fifo_out_startofpacket;                                        // PERIOD1_s1_agent_rsp_fifo:out_startofpacket -> PERIOD1_s1_agent:rf_sink_startofpacket
	wire         period1_s1_agent_rsp_fifo_out_endofpacket;                                          // PERIOD1_s1_agent_rsp_fifo:out_endofpacket -> PERIOD1_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> PERIOD1_s1_agent:cp_valid
	wire  [96:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> PERIOD1_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                              // PERIOD1_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [11:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> PERIOD1_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> PERIOD1_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> PERIOD1_s1_agent:cp_endofpacket
	wire  [31:0] period2_s1_agent_m0_readdata;                                                       // PERIOD2_s1_translator:uav_readdata -> PERIOD2_s1_agent:m0_readdata
	wire         period2_s1_agent_m0_waitrequest;                                                    // PERIOD2_s1_translator:uav_waitrequest -> PERIOD2_s1_agent:m0_waitrequest
	wire         period2_s1_agent_m0_debugaccess;                                                    // PERIOD2_s1_agent:m0_debugaccess -> PERIOD2_s1_translator:uav_debugaccess
	wire  [18:0] period2_s1_agent_m0_address;                                                        // PERIOD2_s1_agent:m0_address -> PERIOD2_s1_translator:uav_address
	wire   [3:0] period2_s1_agent_m0_byteenable;                                                     // PERIOD2_s1_agent:m0_byteenable -> PERIOD2_s1_translator:uav_byteenable
	wire         period2_s1_agent_m0_read;                                                           // PERIOD2_s1_agent:m0_read -> PERIOD2_s1_translator:uav_read
	wire         period2_s1_agent_m0_readdatavalid;                                                  // PERIOD2_s1_translator:uav_readdatavalid -> PERIOD2_s1_agent:m0_readdatavalid
	wire         period2_s1_agent_m0_lock;                                                           // PERIOD2_s1_agent:m0_lock -> PERIOD2_s1_translator:uav_lock
	wire  [31:0] period2_s1_agent_m0_writedata;                                                      // PERIOD2_s1_agent:m0_writedata -> PERIOD2_s1_translator:uav_writedata
	wire         period2_s1_agent_m0_write;                                                          // PERIOD2_s1_agent:m0_write -> PERIOD2_s1_translator:uav_write
	wire   [2:0] period2_s1_agent_m0_burstcount;                                                     // PERIOD2_s1_agent:m0_burstcount -> PERIOD2_s1_translator:uav_burstcount
	wire         period2_s1_agent_rf_source_valid;                                                   // PERIOD2_s1_agent:rf_source_valid -> PERIOD2_s1_agent_rsp_fifo:in_valid
	wire  [97:0] period2_s1_agent_rf_source_data;                                                    // PERIOD2_s1_agent:rf_source_data -> PERIOD2_s1_agent_rsp_fifo:in_data
	wire         period2_s1_agent_rf_source_ready;                                                   // PERIOD2_s1_agent_rsp_fifo:in_ready -> PERIOD2_s1_agent:rf_source_ready
	wire         period2_s1_agent_rf_source_startofpacket;                                           // PERIOD2_s1_agent:rf_source_startofpacket -> PERIOD2_s1_agent_rsp_fifo:in_startofpacket
	wire         period2_s1_agent_rf_source_endofpacket;                                             // PERIOD2_s1_agent:rf_source_endofpacket -> PERIOD2_s1_agent_rsp_fifo:in_endofpacket
	wire         period2_s1_agent_rsp_fifo_out_valid;                                                // PERIOD2_s1_agent_rsp_fifo:out_valid -> PERIOD2_s1_agent:rf_sink_valid
	wire  [97:0] period2_s1_agent_rsp_fifo_out_data;                                                 // PERIOD2_s1_agent_rsp_fifo:out_data -> PERIOD2_s1_agent:rf_sink_data
	wire         period2_s1_agent_rsp_fifo_out_ready;                                                // PERIOD2_s1_agent:rf_sink_ready -> PERIOD2_s1_agent_rsp_fifo:out_ready
	wire         period2_s1_agent_rsp_fifo_out_startofpacket;                                        // PERIOD2_s1_agent_rsp_fifo:out_startofpacket -> PERIOD2_s1_agent:rf_sink_startofpacket
	wire         period2_s1_agent_rsp_fifo_out_endofpacket;                                          // PERIOD2_s1_agent_rsp_fifo:out_endofpacket -> PERIOD2_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> PERIOD2_s1_agent:cp_valid
	wire  [96:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> PERIOD2_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                              // PERIOD2_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [11:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> PERIOD2_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> PERIOD2_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> PERIOD2_s1_agent:cp_endofpacket
	wire  [31:0] period3_s1_agent_m0_readdata;                                                       // PERIOD3_s1_translator:uav_readdata -> PERIOD3_s1_agent:m0_readdata
	wire         period3_s1_agent_m0_waitrequest;                                                    // PERIOD3_s1_translator:uav_waitrequest -> PERIOD3_s1_agent:m0_waitrequest
	wire         period3_s1_agent_m0_debugaccess;                                                    // PERIOD3_s1_agent:m0_debugaccess -> PERIOD3_s1_translator:uav_debugaccess
	wire  [18:0] period3_s1_agent_m0_address;                                                        // PERIOD3_s1_agent:m0_address -> PERIOD3_s1_translator:uav_address
	wire   [3:0] period3_s1_agent_m0_byteenable;                                                     // PERIOD3_s1_agent:m0_byteenable -> PERIOD3_s1_translator:uav_byteenable
	wire         period3_s1_agent_m0_read;                                                           // PERIOD3_s1_agent:m0_read -> PERIOD3_s1_translator:uav_read
	wire         period3_s1_agent_m0_readdatavalid;                                                  // PERIOD3_s1_translator:uav_readdatavalid -> PERIOD3_s1_agent:m0_readdatavalid
	wire         period3_s1_agent_m0_lock;                                                           // PERIOD3_s1_agent:m0_lock -> PERIOD3_s1_translator:uav_lock
	wire  [31:0] period3_s1_agent_m0_writedata;                                                      // PERIOD3_s1_agent:m0_writedata -> PERIOD3_s1_translator:uav_writedata
	wire         period3_s1_agent_m0_write;                                                          // PERIOD3_s1_agent:m0_write -> PERIOD3_s1_translator:uav_write
	wire   [2:0] period3_s1_agent_m0_burstcount;                                                     // PERIOD3_s1_agent:m0_burstcount -> PERIOD3_s1_translator:uav_burstcount
	wire         period3_s1_agent_rf_source_valid;                                                   // PERIOD3_s1_agent:rf_source_valid -> PERIOD3_s1_agent_rsp_fifo:in_valid
	wire  [97:0] period3_s1_agent_rf_source_data;                                                    // PERIOD3_s1_agent:rf_source_data -> PERIOD3_s1_agent_rsp_fifo:in_data
	wire         period3_s1_agent_rf_source_ready;                                                   // PERIOD3_s1_agent_rsp_fifo:in_ready -> PERIOD3_s1_agent:rf_source_ready
	wire         period3_s1_agent_rf_source_startofpacket;                                           // PERIOD3_s1_agent:rf_source_startofpacket -> PERIOD3_s1_agent_rsp_fifo:in_startofpacket
	wire         period3_s1_agent_rf_source_endofpacket;                                             // PERIOD3_s1_agent:rf_source_endofpacket -> PERIOD3_s1_agent_rsp_fifo:in_endofpacket
	wire         period3_s1_agent_rsp_fifo_out_valid;                                                // PERIOD3_s1_agent_rsp_fifo:out_valid -> PERIOD3_s1_agent:rf_sink_valid
	wire  [97:0] period3_s1_agent_rsp_fifo_out_data;                                                 // PERIOD3_s1_agent_rsp_fifo:out_data -> PERIOD3_s1_agent:rf_sink_data
	wire         period3_s1_agent_rsp_fifo_out_ready;                                                // PERIOD3_s1_agent:rf_sink_ready -> PERIOD3_s1_agent_rsp_fifo:out_ready
	wire         period3_s1_agent_rsp_fifo_out_startofpacket;                                        // PERIOD3_s1_agent_rsp_fifo:out_startofpacket -> PERIOD3_s1_agent:rf_sink_startofpacket
	wire         period3_s1_agent_rsp_fifo_out_endofpacket;                                          // PERIOD3_s1_agent_rsp_fifo:out_endofpacket -> PERIOD3_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> PERIOD3_s1_agent:cp_valid
	wire  [96:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> PERIOD3_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                              // PERIOD3_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [11:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> PERIOD3_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> PERIOD3_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> PERIOD3_s1_agent:cp_endofpacket
	wire  [31:0] period4_s1_agent_m0_readdata;                                                       // PERIOD4_s1_translator:uav_readdata -> PERIOD4_s1_agent:m0_readdata
	wire         period4_s1_agent_m0_waitrequest;                                                    // PERIOD4_s1_translator:uav_waitrequest -> PERIOD4_s1_agent:m0_waitrequest
	wire         period4_s1_agent_m0_debugaccess;                                                    // PERIOD4_s1_agent:m0_debugaccess -> PERIOD4_s1_translator:uav_debugaccess
	wire  [18:0] period4_s1_agent_m0_address;                                                        // PERIOD4_s1_agent:m0_address -> PERIOD4_s1_translator:uav_address
	wire   [3:0] period4_s1_agent_m0_byteenable;                                                     // PERIOD4_s1_agent:m0_byteenable -> PERIOD4_s1_translator:uav_byteenable
	wire         period4_s1_agent_m0_read;                                                           // PERIOD4_s1_agent:m0_read -> PERIOD4_s1_translator:uav_read
	wire         period4_s1_agent_m0_readdatavalid;                                                  // PERIOD4_s1_translator:uav_readdatavalid -> PERIOD4_s1_agent:m0_readdatavalid
	wire         period4_s1_agent_m0_lock;                                                           // PERIOD4_s1_agent:m0_lock -> PERIOD4_s1_translator:uav_lock
	wire  [31:0] period4_s1_agent_m0_writedata;                                                      // PERIOD4_s1_agent:m0_writedata -> PERIOD4_s1_translator:uav_writedata
	wire         period4_s1_agent_m0_write;                                                          // PERIOD4_s1_agent:m0_write -> PERIOD4_s1_translator:uav_write
	wire   [2:0] period4_s1_agent_m0_burstcount;                                                     // PERIOD4_s1_agent:m0_burstcount -> PERIOD4_s1_translator:uav_burstcount
	wire         period4_s1_agent_rf_source_valid;                                                   // PERIOD4_s1_agent:rf_source_valid -> PERIOD4_s1_agent_rsp_fifo:in_valid
	wire  [97:0] period4_s1_agent_rf_source_data;                                                    // PERIOD4_s1_agent:rf_source_data -> PERIOD4_s1_agent_rsp_fifo:in_data
	wire         period4_s1_agent_rf_source_ready;                                                   // PERIOD4_s1_agent_rsp_fifo:in_ready -> PERIOD4_s1_agent:rf_source_ready
	wire         period4_s1_agent_rf_source_startofpacket;                                           // PERIOD4_s1_agent:rf_source_startofpacket -> PERIOD4_s1_agent_rsp_fifo:in_startofpacket
	wire         period4_s1_agent_rf_source_endofpacket;                                             // PERIOD4_s1_agent:rf_source_endofpacket -> PERIOD4_s1_agent_rsp_fifo:in_endofpacket
	wire         period4_s1_agent_rsp_fifo_out_valid;                                                // PERIOD4_s1_agent_rsp_fifo:out_valid -> PERIOD4_s1_agent:rf_sink_valid
	wire  [97:0] period4_s1_agent_rsp_fifo_out_data;                                                 // PERIOD4_s1_agent_rsp_fifo:out_data -> PERIOD4_s1_agent:rf_sink_data
	wire         period4_s1_agent_rsp_fifo_out_ready;                                                // PERIOD4_s1_agent:rf_sink_ready -> PERIOD4_s1_agent_rsp_fifo:out_ready
	wire         period4_s1_agent_rsp_fifo_out_startofpacket;                                        // PERIOD4_s1_agent_rsp_fifo:out_startofpacket -> PERIOD4_s1_agent:rf_sink_startofpacket
	wire         period4_s1_agent_rsp_fifo_out_endofpacket;                                          // PERIOD4_s1_agent_rsp_fifo:out_endofpacket -> PERIOD4_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> PERIOD4_s1_agent:cp_valid
	wire  [96:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> PERIOD4_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                              // PERIOD4_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [11:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> PERIOD4_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> PERIOD4_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> PERIOD4_s1_agent:cp_endofpacket
	wire  [31:0] decode1_s1_agent_m0_readdata;                                                       // DECODE1_s1_translator:uav_readdata -> DECODE1_s1_agent:m0_readdata
	wire         decode1_s1_agent_m0_waitrequest;                                                    // DECODE1_s1_translator:uav_waitrequest -> DECODE1_s1_agent:m0_waitrequest
	wire         decode1_s1_agent_m0_debugaccess;                                                    // DECODE1_s1_agent:m0_debugaccess -> DECODE1_s1_translator:uav_debugaccess
	wire  [18:0] decode1_s1_agent_m0_address;                                                        // DECODE1_s1_agent:m0_address -> DECODE1_s1_translator:uav_address
	wire   [3:0] decode1_s1_agent_m0_byteenable;                                                     // DECODE1_s1_agent:m0_byteenable -> DECODE1_s1_translator:uav_byteenable
	wire         decode1_s1_agent_m0_read;                                                           // DECODE1_s1_agent:m0_read -> DECODE1_s1_translator:uav_read
	wire         decode1_s1_agent_m0_readdatavalid;                                                  // DECODE1_s1_translator:uav_readdatavalid -> DECODE1_s1_agent:m0_readdatavalid
	wire         decode1_s1_agent_m0_lock;                                                           // DECODE1_s1_agent:m0_lock -> DECODE1_s1_translator:uav_lock
	wire  [31:0] decode1_s1_agent_m0_writedata;                                                      // DECODE1_s1_agent:m0_writedata -> DECODE1_s1_translator:uav_writedata
	wire         decode1_s1_agent_m0_write;                                                          // DECODE1_s1_agent:m0_write -> DECODE1_s1_translator:uav_write
	wire   [2:0] decode1_s1_agent_m0_burstcount;                                                     // DECODE1_s1_agent:m0_burstcount -> DECODE1_s1_translator:uav_burstcount
	wire         decode1_s1_agent_rf_source_valid;                                                   // DECODE1_s1_agent:rf_source_valid -> DECODE1_s1_agent_rsp_fifo:in_valid
	wire  [97:0] decode1_s1_agent_rf_source_data;                                                    // DECODE1_s1_agent:rf_source_data -> DECODE1_s1_agent_rsp_fifo:in_data
	wire         decode1_s1_agent_rf_source_ready;                                                   // DECODE1_s1_agent_rsp_fifo:in_ready -> DECODE1_s1_agent:rf_source_ready
	wire         decode1_s1_agent_rf_source_startofpacket;                                           // DECODE1_s1_agent:rf_source_startofpacket -> DECODE1_s1_agent_rsp_fifo:in_startofpacket
	wire         decode1_s1_agent_rf_source_endofpacket;                                             // DECODE1_s1_agent:rf_source_endofpacket -> DECODE1_s1_agent_rsp_fifo:in_endofpacket
	wire         decode1_s1_agent_rsp_fifo_out_valid;                                                // DECODE1_s1_agent_rsp_fifo:out_valid -> DECODE1_s1_agent:rf_sink_valid
	wire  [97:0] decode1_s1_agent_rsp_fifo_out_data;                                                 // DECODE1_s1_agent_rsp_fifo:out_data -> DECODE1_s1_agent:rf_sink_data
	wire         decode1_s1_agent_rsp_fifo_out_ready;                                                // DECODE1_s1_agent:rf_sink_ready -> DECODE1_s1_agent_rsp_fifo:out_ready
	wire         decode1_s1_agent_rsp_fifo_out_startofpacket;                                        // DECODE1_s1_agent_rsp_fifo:out_startofpacket -> DECODE1_s1_agent:rf_sink_startofpacket
	wire         decode1_s1_agent_rsp_fifo_out_endofpacket;                                          // DECODE1_s1_agent_rsp_fifo:out_endofpacket -> DECODE1_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> DECODE1_s1_agent:cp_valid
	wire  [96:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> DECODE1_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                              // DECODE1_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [11:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> DECODE1_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> DECODE1_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> DECODE1_s1_agent:cp_endofpacket
	wire  [31:0] decode2_s1_agent_m0_readdata;                                                       // DECODE2_s1_translator:uav_readdata -> DECODE2_s1_agent:m0_readdata
	wire         decode2_s1_agent_m0_waitrequest;                                                    // DECODE2_s1_translator:uav_waitrequest -> DECODE2_s1_agent:m0_waitrequest
	wire         decode2_s1_agent_m0_debugaccess;                                                    // DECODE2_s1_agent:m0_debugaccess -> DECODE2_s1_translator:uav_debugaccess
	wire  [18:0] decode2_s1_agent_m0_address;                                                        // DECODE2_s1_agent:m0_address -> DECODE2_s1_translator:uav_address
	wire   [3:0] decode2_s1_agent_m0_byteenable;                                                     // DECODE2_s1_agent:m0_byteenable -> DECODE2_s1_translator:uav_byteenable
	wire         decode2_s1_agent_m0_read;                                                           // DECODE2_s1_agent:m0_read -> DECODE2_s1_translator:uav_read
	wire         decode2_s1_agent_m0_readdatavalid;                                                  // DECODE2_s1_translator:uav_readdatavalid -> DECODE2_s1_agent:m0_readdatavalid
	wire         decode2_s1_agent_m0_lock;                                                           // DECODE2_s1_agent:m0_lock -> DECODE2_s1_translator:uav_lock
	wire  [31:0] decode2_s1_agent_m0_writedata;                                                      // DECODE2_s1_agent:m0_writedata -> DECODE2_s1_translator:uav_writedata
	wire         decode2_s1_agent_m0_write;                                                          // DECODE2_s1_agent:m0_write -> DECODE2_s1_translator:uav_write
	wire   [2:0] decode2_s1_agent_m0_burstcount;                                                     // DECODE2_s1_agent:m0_burstcount -> DECODE2_s1_translator:uav_burstcount
	wire         decode2_s1_agent_rf_source_valid;                                                   // DECODE2_s1_agent:rf_source_valid -> DECODE2_s1_agent_rsp_fifo:in_valid
	wire  [97:0] decode2_s1_agent_rf_source_data;                                                    // DECODE2_s1_agent:rf_source_data -> DECODE2_s1_agent_rsp_fifo:in_data
	wire         decode2_s1_agent_rf_source_ready;                                                   // DECODE2_s1_agent_rsp_fifo:in_ready -> DECODE2_s1_agent:rf_source_ready
	wire         decode2_s1_agent_rf_source_startofpacket;                                           // DECODE2_s1_agent:rf_source_startofpacket -> DECODE2_s1_agent_rsp_fifo:in_startofpacket
	wire         decode2_s1_agent_rf_source_endofpacket;                                             // DECODE2_s1_agent:rf_source_endofpacket -> DECODE2_s1_agent_rsp_fifo:in_endofpacket
	wire         decode2_s1_agent_rsp_fifo_out_valid;                                                // DECODE2_s1_agent_rsp_fifo:out_valid -> DECODE2_s1_agent:rf_sink_valid
	wire  [97:0] decode2_s1_agent_rsp_fifo_out_data;                                                 // DECODE2_s1_agent_rsp_fifo:out_data -> DECODE2_s1_agent:rf_sink_data
	wire         decode2_s1_agent_rsp_fifo_out_ready;                                                // DECODE2_s1_agent:rf_sink_ready -> DECODE2_s1_agent_rsp_fifo:out_ready
	wire         decode2_s1_agent_rsp_fifo_out_startofpacket;                                        // DECODE2_s1_agent_rsp_fifo:out_startofpacket -> DECODE2_s1_agent:rf_sink_startofpacket
	wire         decode2_s1_agent_rsp_fifo_out_endofpacket;                                          // DECODE2_s1_agent_rsp_fifo:out_endofpacket -> DECODE2_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> DECODE2_s1_agent:cp_valid
	wire  [96:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> DECODE2_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                              // DECODE2_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [11:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> DECODE2_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> DECODE2_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> DECODE2_s1_agent:cp_endofpacket
	wire  [31:0] decode3_s1_agent_m0_readdata;                                                       // DECODE3_s1_translator:uav_readdata -> DECODE3_s1_agent:m0_readdata
	wire         decode3_s1_agent_m0_waitrequest;                                                    // DECODE3_s1_translator:uav_waitrequest -> DECODE3_s1_agent:m0_waitrequest
	wire         decode3_s1_agent_m0_debugaccess;                                                    // DECODE3_s1_agent:m0_debugaccess -> DECODE3_s1_translator:uav_debugaccess
	wire  [18:0] decode3_s1_agent_m0_address;                                                        // DECODE3_s1_agent:m0_address -> DECODE3_s1_translator:uav_address
	wire   [3:0] decode3_s1_agent_m0_byteenable;                                                     // DECODE3_s1_agent:m0_byteenable -> DECODE3_s1_translator:uav_byteenable
	wire         decode3_s1_agent_m0_read;                                                           // DECODE3_s1_agent:m0_read -> DECODE3_s1_translator:uav_read
	wire         decode3_s1_agent_m0_readdatavalid;                                                  // DECODE3_s1_translator:uav_readdatavalid -> DECODE3_s1_agent:m0_readdatavalid
	wire         decode3_s1_agent_m0_lock;                                                           // DECODE3_s1_agent:m0_lock -> DECODE3_s1_translator:uav_lock
	wire  [31:0] decode3_s1_agent_m0_writedata;                                                      // DECODE3_s1_agent:m0_writedata -> DECODE3_s1_translator:uav_writedata
	wire         decode3_s1_agent_m0_write;                                                          // DECODE3_s1_agent:m0_write -> DECODE3_s1_translator:uav_write
	wire   [2:0] decode3_s1_agent_m0_burstcount;                                                     // DECODE3_s1_agent:m0_burstcount -> DECODE3_s1_translator:uav_burstcount
	wire         decode3_s1_agent_rf_source_valid;                                                   // DECODE3_s1_agent:rf_source_valid -> DECODE3_s1_agent_rsp_fifo:in_valid
	wire  [97:0] decode3_s1_agent_rf_source_data;                                                    // DECODE3_s1_agent:rf_source_data -> DECODE3_s1_agent_rsp_fifo:in_data
	wire         decode3_s1_agent_rf_source_ready;                                                   // DECODE3_s1_agent_rsp_fifo:in_ready -> DECODE3_s1_agent:rf_source_ready
	wire         decode3_s1_agent_rf_source_startofpacket;                                           // DECODE3_s1_agent:rf_source_startofpacket -> DECODE3_s1_agent_rsp_fifo:in_startofpacket
	wire         decode3_s1_agent_rf_source_endofpacket;                                             // DECODE3_s1_agent:rf_source_endofpacket -> DECODE3_s1_agent_rsp_fifo:in_endofpacket
	wire         decode3_s1_agent_rsp_fifo_out_valid;                                                // DECODE3_s1_agent_rsp_fifo:out_valid -> DECODE3_s1_agent:rf_sink_valid
	wire  [97:0] decode3_s1_agent_rsp_fifo_out_data;                                                 // DECODE3_s1_agent_rsp_fifo:out_data -> DECODE3_s1_agent:rf_sink_data
	wire         decode3_s1_agent_rsp_fifo_out_ready;                                                // DECODE3_s1_agent:rf_sink_ready -> DECODE3_s1_agent_rsp_fifo:out_ready
	wire         decode3_s1_agent_rsp_fifo_out_startofpacket;                                        // DECODE3_s1_agent_rsp_fifo:out_startofpacket -> DECODE3_s1_agent:rf_sink_startofpacket
	wire         decode3_s1_agent_rsp_fifo_out_endofpacket;                                          // DECODE3_s1_agent_rsp_fifo:out_endofpacket -> DECODE3_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> DECODE3_s1_agent:cp_valid
	wire  [96:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> DECODE3_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                              // DECODE3_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [11:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> DECODE3_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> DECODE3_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> DECODE3_s1_agent:cp_endofpacket
	wire  [31:0] decode4_s1_agent_m0_readdata;                                                       // DECODE4_s1_translator:uav_readdata -> DECODE4_s1_agent:m0_readdata
	wire         decode4_s1_agent_m0_waitrequest;                                                    // DECODE4_s1_translator:uav_waitrequest -> DECODE4_s1_agent:m0_waitrequest
	wire         decode4_s1_agent_m0_debugaccess;                                                    // DECODE4_s1_agent:m0_debugaccess -> DECODE4_s1_translator:uav_debugaccess
	wire  [18:0] decode4_s1_agent_m0_address;                                                        // DECODE4_s1_agent:m0_address -> DECODE4_s1_translator:uav_address
	wire   [3:0] decode4_s1_agent_m0_byteenable;                                                     // DECODE4_s1_agent:m0_byteenable -> DECODE4_s1_translator:uav_byteenable
	wire         decode4_s1_agent_m0_read;                                                           // DECODE4_s1_agent:m0_read -> DECODE4_s1_translator:uav_read
	wire         decode4_s1_agent_m0_readdatavalid;                                                  // DECODE4_s1_translator:uav_readdatavalid -> DECODE4_s1_agent:m0_readdatavalid
	wire         decode4_s1_agent_m0_lock;                                                           // DECODE4_s1_agent:m0_lock -> DECODE4_s1_translator:uav_lock
	wire  [31:0] decode4_s1_agent_m0_writedata;                                                      // DECODE4_s1_agent:m0_writedata -> DECODE4_s1_translator:uav_writedata
	wire         decode4_s1_agent_m0_write;                                                          // DECODE4_s1_agent:m0_write -> DECODE4_s1_translator:uav_write
	wire   [2:0] decode4_s1_agent_m0_burstcount;                                                     // DECODE4_s1_agent:m0_burstcount -> DECODE4_s1_translator:uav_burstcount
	wire         decode4_s1_agent_rf_source_valid;                                                   // DECODE4_s1_agent:rf_source_valid -> DECODE4_s1_agent_rsp_fifo:in_valid
	wire  [97:0] decode4_s1_agent_rf_source_data;                                                    // DECODE4_s1_agent:rf_source_data -> DECODE4_s1_agent_rsp_fifo:in_data
	wire         decode4_s1_agent_rf_source_ready;                                                   // DECODE4_s1_agent_rsp_fifo:in_ready -> DECODE4_s1_agent:rf_source_ready
	wire         decode4_s1_agent_rf_source_startofpacket;                                           // DECODE4_s1_agent:rf_source_startofpacket -> DECODE4_s1_agent_rsp_fifo:in_startofpacket
	wire         decode4_s1_agent_rf_source_endofpacket;                                             // DECODE4_s1_agent:rf_source_endofpacket -> DECODE4_s1_agent_rsp_fifo:in_endofpacket
	wire         decode4_s1_agent_rsp_fifo_out_valid;                                                // DECODE4_s1_agent_rsp_fifo:out_valid -> DECODE4_s1_agent:rf_sink_valid
	wire  [97:0] decode4_s1_agent_rsp_fifo_out_data;                                                 // DECODE4_s1_agent_rsp_fifo:out_data -> DECODE4_s1_agent:rf_sink_data
	wire         decode4_s1_agent_rsp_fifo_out_ready;                                                // DECODE4_s1_agent:rf_sink_ready -> DECODE4_s1_agent_rsp_fifo:out_ready
	wire         decode4_s1_agent_rsp_fifo_out_startofpacket;                                        // DECODE4_s1_agent_rsp_fifo:out_startofpacket -> DECODE4_s1_agent:rf_sink_startofpacket
	wire         decode4_s1_agent_rsp_fifo_out_endofpacket;                                          // DECODE4_s1_agent_rsp_fifo:out_endofpacket -> DECODE4_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> DECODE4_s1_agent:cp_valid
	wire  [96:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> DECODE4_s1_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                              // DECODE4_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [11:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> DECODE4_s1_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> DECODE4_s1_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> DECODE4_s1_agent:cp_endofpacket
	wire  [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                              // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire         onchip_memory2_0_s1_agent_m0_waitrequest;                                           // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire         onchip_memory2_0_s1_agent_m0_debugaccess;                                           // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire  [18:0] onchip_memory2_0_s1_agent_m0_address;                                               // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire   [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                            // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire         onchip_memory2_0_s1_agent_m0_read;                                                  // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire         onchip_memory2_0_s1_agent_m0_readdatavalid;                                         // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire         onchip_memory2_0_s1_agent_m0_lock;                                                  // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire  [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                             // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire         onchip_memory2_0_s1_agent_m0_write;                                                 // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire   [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                            // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire         onchip_memory2_0_s1_agent_rf_source_valid;                                          // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [97:0] onchip_memory2_0_s1_agent_rf_source_data;                                           // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire         onchip_memory2_0_s1_agent_rf_source_ready;                                          // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire         onchip_memory2_0_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire         onchip_memory2_0_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [97:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [96:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire         cmd_mux_011_src_ready;                                                              // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire  [11:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire         cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire         nios2_qsys_0_data_master_agent_cp_valid;                                            // nios2_qsys_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [96:0] nios2_qsys_0_data_master_agent_cp_data;                                             // nios2_qsys_0_data_master_agent:cp_data -> router:sink_data
	wire         nios2_qsys_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_qsys_0_data_master_agent:cp_ready
	wire         nios2_qsys_0_data_master_agent_cp_startofpacket;                                    // nios2_qsys_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         nios2_qsys_0_data_master_agent_cp_endofpacket;                                      // nios2_qsys_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [96:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire  [11:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         nios2_qsys_0_instruction_master_agent_cp_valid;                                     // nios2_qsys_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [96:0] nios2_qsys_0_instruction_master_agent_cp_data;                                      // nios2_qsys_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire         nios2_qsys_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_qsys_0_instruction_master_agent:cp_ready
	wire         nios2_qsys_0_instruction_master_agent_cp_startofpacket;                             // nios2_qsys_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         nios2_qsys_0_instruction_master_agent_cp_endofpacket;                               // nios2_qsys_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [96:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire         router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire  [11:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         nios2_qsys_0_debug_mem_slave_agent_rp_valid;                                        // nios2_qsys_0_debug_mem_slave_agent:rp_valid -> router_002:sink_valid
	wire  [96:0] nios2_qsys_0_debug_mem_slave_agent_rp_data;                                         // nios2_qsys_0_debug_mem_slave_agent:rp_data -> router_002:sink_data
	wire         nios2_qsys_0_debug_mem_slave_agent_rp_ready;                                        // router_002:sink_ready -> nios2_qsys_0_debug_mem_slave_agent:rp_ready
	wire         nios2_qsys_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_qsys_0_debug_mem_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         nios2_qsys_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_qsys_0_debug_mem_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire  [96:0] router_002_src_data;                                                                // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire  [11:0] router_002_src_channel;                                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         hex0_s1_agent_rp_valid;                                                             // HEX0_s1_agent:rp_valid -> router_003:sink_valid
	wire  [96:0] hex0_s1_agent_rp_data;                                                              // HEX0_s1_agent:rp_data -> router_003:sink_data
	wire         hex0_s1_agent_rp_ready;                                                             // router_003:sink_ready -> HEX0_s1_agent:rp_ready
	wire         hex0_s1_agent_rp_startofpacket;                                                     // HEX0_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         hex0_s1_agent_rp_endofpacket;                                                       // HEX0_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [96:0] router_003_src_data;                                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire         router_003_src_ready;                                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire  [11:0] router_003_src_channel;                                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         push_s1_agent_rp_valid;                                                             // PUSH_s1_agent:rp_valid -> router_004:sink_valid
	wire  [96:0] push_s1_agent_rp_data;                                                              // PUSH_s1_agent:rp_data -> router_004:sink_data
	wire         push_s1_agent_rp_ready;                                                             // router_004:sink_ready -> PUSH_s1_agent:rp_ready
	wire         push_s1_agent_rp_startofpacket;                                                     // PUSH_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         push_s1_agent_rp_endofpacket;                                                       // PUSH_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [96:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire         router_004_src_ready;                                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire  [11:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         period1_s1_agent_rp_valid;                                                          // PERIOD1_s1_agent:rp_valid -> router_005:sink_valid
	wire  [96:0] period1_s1_agent_rp_data;                                                           // PERIOD1_s1_agent:rp_data -> router_005:sink_data
	wire         period1_s1_agent_rp_ready;                                                          // router_005:sink_ready -> PERIOD1_s1_agent:rp_ready
	wire         period1_s1_agent_rp_startofpacket;                                                  // PERIOD1_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         period1_s1_agent_rp_endofpacket;                                                    // PERIOD1_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [96:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_003:sink_data
	wire         router_005_src_ready;                                                               // rsp_demux_003:sink_ready -> router_005:src_ready
	wire  [11:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         period2_s1_agent_rp_valid;                                                          // PERIOD2_s1_agent:rp_valid -> router_006:sink_valid
	wire  [96:0] period2_s1_agent_rp_data;                                                           // PERIOD2_s1_agent:rp_data -> router_006:sink_data
	wire         period2_s1_agent_rp_ready;                                                          // router_006:sink_ready -> PERIOD2_s1_agent:rp_ready
	wire         period2_s1_agent_rp_startofpacket;                                                  // PERIOD2_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         period2_s1_agent_rp_endofpacket;                                                    // PERIOD2_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [96:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_004:sink_data
	wire         router_006_src_ready;                                                               // rsp_demux_004:sink_ready -> router_006:src_ready
	wire  [11:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         period3_s1_agent_rp_valid;                                                          // PERIOD3_s1_agent:rp_valid -> router_007:sink_valid
	wire  [96:0] period3_s1_agent_rp_data;                                                           // PERIOD3_s1_agent:rp_data -> router_007:sink_data
	wire         period3_s1_agent_rp_ready;                                                          // router_007:sink_ready -> PERIOD3_s1_agent:rp_ready
	wire         period3_s1_agent_rp_startofpacket;                                                  // PERIOD3_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         period3_s1_agent_rp_endofpacket;                                                    // PERIOD3_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [96:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire         router_007_src_ready;                                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire  [11:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         period4_s1_agent_rp_valid;                                                          // PERIOD4_s1_agent:rp_valid -> router_008:sink_valid
	wire  [96:0] period4_s1_agent_rp_data;                                                           // PERIOD4_s1_agent:rp_data -> router_008:sink_data
	wire         period4_s1_agent_rp_ready;                                                          // router_008:sink_ready -> PERIOD4_s1_agent:rp_ready
	wire         period4_s1_agent_rp_startofpacket;                                                  // PERIOD4_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         period4_s1_agent_rp_endofpacket;                                                    // PERIOD4_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [96:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_006:sink_data
	wire         router_008_src_ready;                                                               // rsp_demux_006:sink_ready -> router_008:src_ready
	wire  [11:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         decode1_s1_agent_rp_valid;                                                          // DECODE1_s1_agent:rp_valid -> router_009:sink_valid
	wire  [96:0] decode1_s1_agent_rp_data;                                                           // DECODE1_s1_agent:rp_data -> router_009:sink_data
	wire         decode1_s1_agent_rp_ready;                                                          // router_009:sink_ready -> DECODE1_s1_agent:rp_ready
	wire         decode1_s1_agent_rp_startofpacket;                                                  // DECODE1_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         decode1_s1_agent_rp_endofpacket;                                                    // DECODE1_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [96:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_007:sink_data
	wire         router_009_src_ready;                                                               // rsp_demux_007:sink_ready -> router_009:src_ready
	wire  [11:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         decode2_s1_agent_rp_valid;                                                          // DECODE2_s1_agent:rp_valid -> router_010:sink_valid
	wire  [96:0] decode2_s1_agent_rp_data;                                                           // DECODE2_s1_agent:rp_data -> router_010:sink_data
	wire         decode2_s1_agent_rp_ready;                                                          // router_010:sink_ready -> DECODE2_s1_agent:rp_ready
	wire         decode2_s1_agent_rp_startofpacket;                                                  // DECODE2_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         decode2_s1_agent_rp_endofpacket;                                                    // DECODE2_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [96:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_008:sink_data
	wire         router_010_src_ready;                                                               // rsp_demux_008:sink_ready -> router_010:src_ready
	wire  [11:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         decode3_s1_agent_rp_valid;                                                          // DECODE3_s1_agent:rp_valid -> router_011:sink_valid
	wire  [96:0] decode3_s1_agent_rp_data;                                                           // DECODE3_s1_agent:rp_data -> router_011:sink_data
	wire         decode3_s1_agent_rp_ready;                                                          // router_011:sink_ready -> DECODE3_s1_agent:rp_ready
	wire         decode3_s1_agent_rp_startofpacket;                                                  // DECODE3_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         decode3_s1_agent_rp_endofpacket;                                                    // DECODE3_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [96:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_009:sink_data
	wire         router_011_src_ready;                                                               // rsp_demux_009:sink_ready -> router_011:src_ready
	wire  [11:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         decode4_s1_agent_rp_valid;                                                          // DECODE4_s1_agent:rp_valid -> router_012:sink_valid
	wire  [96:0] decode4_s1_agent_rp_data;                                                           // DECODE4_s1_agent:rp_data -> router_012:sink_data
	wire         decode4_s1_agent_rp_ready;                                                          // router_012:sink_ready -> DECODE4_s1_agent:rp_ready
	wire         decode4_s1_agent_rp_startofpacket;                                                  // DECODE4_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         decode4_s1_agent_rp_endofpacket;                                                    // DECODE4_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [96:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_010:sink_data
	wire         router_012_src_ready;                                                               // rsp_demux_010:sink_ready -> router_012:src_ready
	wire  [11:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_010:sink_channel
	wire         router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         onchip_memory2_0_s1_agent_rp_valid;                                                 // onchip_memory2_0_s1_agent:rp_valid -> router_013:sink_valid
	wire  [96:0] onchip_memory2_0_s1_agent_rp_data;                                                  // onchip_memory2_0_s1_agent:rp_data -> router_013:sink_data
	wire         onchip_memory2_0_s1_agent_rp_ready;                                                 // router_013:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire         onchip_memory2_0_s1_agent_rp_startofpacket;                                         // onchip_memory2_0_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire         onchip_memory2_0_s1_agent_rp_endofpacket;                                           // onchip_memory2_0_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [96:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_011:sink_data
	wire         router_013_src_ready;                                                               // rsp_demux_011:sink_ready -> router_013:src_ready
	wire  [11:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_011:sink_channel
	wire         router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [96:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [11:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [96:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire  [11:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [96:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire  [11:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [96:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire  [11:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [96:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire  [11:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [96:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire  [11:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [96:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                               // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire  [11:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [96:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire  [11:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [96:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                               // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [11:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [96:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                               // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [11:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [96:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire         cmd_demux_src10_ready;                                                              // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire  [11:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                                              // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [96:0] cmd_demux_src11_data;                                                               // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire         cmd_demux_src11_ready;                                                              // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire  [11:0] cmd_demux_src11_channel;                                                            // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_src11_startofpacket;                                                      // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         cmd_demux_src11_endofpacket;                                                        // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [96:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire         cmd_demux_001_src0_ready;                                                           // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire  [11:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> cmd_mux_011:sink1_valid
	wire  [96:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> cmd_mux_011:sink1_data
	wire         cmd_demux_001_src1_ready;                                                           // cmd_mux_011:sink1_ready -> cmd_demux_001:src1_ready
	wire  [11:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> cmd_mux_011:sink1_channel
	wire         cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire         cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [96:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [11:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src1_valid;                                                               // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [96:0] rsp_demux_src1_data;                                                                // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_src1_ready;                                                               // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire  [11:0] rsp_demux_src1_channel;                                                             // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_src1_startofpacket;                                                       // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_src1_endofpacket;                                                         // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [96:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire  [11:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [96:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire  [11:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [96:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire  [11:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [96:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire  [11:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [96:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire  [11:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [96:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                           // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire  [11:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [96:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire  [11:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [96:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                           // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [11:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [96:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                           // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [11:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [96:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire         rsp_demux_010_src0_ready;                                                           // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire  [11:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire         rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [96:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire         rsp_demux_011_src0_ready;                                                           // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire  [11:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire         rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire         rsp_demux_011_src1_valid;                                                           // rsp_demux_011:src1_valid -> rsp_mux_001:sink1_valid
	wire  [96:0] rsp_demux_011_src1_data;                                                            // rsp_demux_011:src1_data -> rsp_mux_001:sink1_data
	wire         rsp_demux_011_src1_ready;                                                           // rsp_mux_001:sink1_ready -> rsp_demux_011:src1_ready
	wire  [11:0] rsp_demux_011_src1_channel;                                                         // rsp_demux_011:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_011_src1_startofpacket;                                                   // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire         rsp_demux_011_src1_endofpacket;                                                     // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter:in_0_ready -> nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                      // nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> nios2_qsys_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire         hex0_s1_agent_rdata_fifo_src_valid;                                                 // HEX0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] hex0_s1_agent_rdata_fifo_src_data;                                                  // HEX0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         hex0_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_001:in_0_ready -> HEX0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> HEX0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> HEX0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                  // HEX0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> HEX0_s1_agent:rdata_fifo_sink_error
	wire         push_s1_agent_rdata_fifo_src_valid;                                                 // PUSH_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] push_s1_agent_rdata_fifo_src_data;                                                  // PUSH_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         push_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_002:in_0_ready -> PUSH_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> PUSH_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> PUSH_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                  // PUSH_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> PUSH_s1_agent:rdata_fifo_sink_error
	wire         period1_s1_agent_rdata_fifo_src_valid;                                              // PERIOD1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] period1_s1_agent_rdata_fifo_src_data;                                               // PERIOD1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         period1_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_003:in_0_ready -> PERIOD1_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> PERIOD1_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> PERIOD1_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                  // PERIOD1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> PERIOD1_s1_agent:rdata_fifo_sink_error
	wire         period2_s1_agent_rdata_fifo_src_valid;                                              // PERIOD2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] period2_s1_agent_rdata_fifo_src_data;                                               // PERIOD2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         period2_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_004:in_0_ready -> PERIOD2_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> PERIOD2_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> PERIOD2_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                                  // PERIOD2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> PERIOD2_s1_agent:rdata_fifo_sink_error
	wire         period3_s1_agent_rdata_fifo_src_valid;                                              // PERIOD3_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] period3_s1_agent_rdata_fifo_src_data;                                               // PERIOD3_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         period3_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_005:in_0_ready -> PERIOD3_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> PERIOD3_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> PERIOD3_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                                  // PERIOD3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> PERIOD3_s1_agent:rdata_fifo_sink_error
	wire         period4_s1_agent_rdata_fifo_src_valid;                                              // PERIOD4_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] period4_s1_agent_rdata_fifo_src_data;                                               // PERIOD4_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         period4_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_006:in_0_ready -> PERIOD4_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> PERIOD4_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> PERIOD4_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                                  // PERIOD4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> PERIOD4_s1_agent:rdata_fifo_sink_error
	wire         decode1_s1_agent_rdata_fifo_src_valid;                                              // DECODE1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] decode1_s1_agent_rdata_fifo_src_data;                                               // DECODE1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         decode1_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_007:in_0_ready -> DECODE1_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> DECODE1_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> DECODE1_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                                  // DECODE1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> DECODE1_s1_agent:rdata_fifo_sink_error
	wire         decode2_s1_agent_rdata_fifo_src_valid;                                              // DECODE2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] decode2_s1_agent_rdata_fifo_src_data;                                               // DECODE2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         decode2_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_008:in_0_ready -> DECODE2_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> DECODE2_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> DECODE2_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                                  // DECODE2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> DECODE2_s1_agent:rdata_fifo_sink_error
	wire         decode3_s1_agent_rdata_fifo_src_valid;                                              // DECODE3_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] decode3_s1_agent_rdata_fifo_src_data;                                               // DECODE3_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         decode3_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_009:in_0_ready -> DECODE3_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> DECODE3_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> DECODE3_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                                  // DECODE3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> DECODE3_s1_agent:rdata_fifo_sink_error
	wire         decode4_s1_agent_rdata_fifo_src_valid;                                              // DECODE4_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire  [33:0] decode4_s1_agent_rdata_fifo_src_data;                                               // DECODE4_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire         decode4_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_010:in_0_ready -> DECODE4_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> DECODE4_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> DECODE4_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                                  // DECODE4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> DECODE4_s1_agent:rdata_fifo_sink_error
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire  [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_011:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_011_out_0_valid;                                                  // avalon_st_adapter_011:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_011_out_0_data;                                                   // avalon_st_adapter_011:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_011_out_0_ready;                                                  // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire   [0:0] avalon_st_adapter_011_out_0_error;                                                  // avalon_st_adapter_011:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_qsys_0_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                               //                       clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_qsys_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_qsys_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_qsys_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_qsys_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_qsys_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_qsys_0_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                       clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_qsys_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_qsys_0_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_qsys_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_qsys_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_qsys_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_qsys_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_qsys_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_qsys_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_qsys_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_qsys_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_qsys_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_qsys_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_qsys_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_qsys_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_qsys_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_qsys_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_qsys_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_qsys_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_qsys_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_qsys_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex0_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (hex0_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (hex0_s1_agent_m0_read),                          //                         .read
		.uav_write              (hex0_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (hex0_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (hex0_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (hex0_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (hex0_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (hex0_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (hex0_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (hex0_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (HEX0_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (HEX0_s1_write),                                  //                         .write
		.av_readdata            (HEX0_s1_readdata),                               //                         .readdata
		.av_writedata           (HEX0_s1_writedata),                              //                         .writedata
		.av_chipselect          (HEX0_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) push_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (push_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (push_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (push_s1_agent_m0_read),                          //                         .read
		.uav_write              (push_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (push_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (push_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (push_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (push_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (push_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (push_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (push_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (PUSH_s1_address),                                //      avalon_anti_slave_0.address
		.av_readdata            (PUSH_s1_readdata),                               //                         .readdata
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) period1_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (period1_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (period1_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (period1_s1_agent_m0_read),                       //                         .read
		.uav_write              (period1_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (period1_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (period1_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (period1_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (period1_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (period1_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (period1_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (period1_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (PERIOD1_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (PERIOD1_s1_write),                               //                         .write
		.av_readdata            (PERIOD1_s1_readdata),                            //                         .readdata
		.av_writedata           (PERIOD1_s1_writedata),                           //                         .writedata
		.av_chipselect          (PERIOD1_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) period2_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (period2_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (period2_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (period2_s1_agent_m0_read),                       //                         .read
		.uav_write              (period2_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (period2_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (period2_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (period2_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (period2_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (period2_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (period2_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (period2_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (PERIOD2_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (PERIOD2_s1_write),                               //                         .write
		.av_readdata            (PERIOD2_s1_readdata),                            //                         .readdata
		.av_writedata           (PERIOD2_s1_writedata),                           //                         .writedata
		.av_chipselect          (PERIOD2_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) period3_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (period3_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (period3_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (period3_s1_agent_m0_read),                       //                         .read
		.uav_write              (period3_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (period3_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (period3_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (period3_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (period3_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (period3_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (period3_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (period3_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (PERIOD3_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (PERIOD3_s1_write),                               //                         .write
		.av_readdata            (PERIOD3_s1_readdata),                            //                         .readdata
		.av_writedata           (PERIOD3_s1_writedata),                           //                         .writedata
		.av_chipselect          (PERIOD3_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) period4_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (period4_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (period4_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (period4_s1_agent_m0_read),                       //                         .read
		.uav_write              (period4_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (period4_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (period4_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (period4_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (period4_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (period4_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (period4_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (period4_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (PERIOD4_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (PERIOD4_s1_write),                               //                         .write
		.av_readdata            (PERIOD4_s1_readdata),                            //                         .readdata
		.av_writedata           (PERIOD4_s1_writedata),                           //                         .writedata
		.av_chipselect          (PERIOD4_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) decode1_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (decode1_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (decode1_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (decode1_s1_agent_m0_read),                       //                         .read
		.uav_write              (decode1_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (decode1_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (decode1_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (decode1_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (decode1_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (decode1_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (decode1_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (decode1_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (DECODE1_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (DECODE1_s1_write),                               //                         .write
		.av_readdata            (DECODE1_s1_readdata),                            //                         .readdata
		.av_writedata           (DECODE1_s1_writedata),                           //                         .writedata
		.av_chipselect          (DECODE1_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) decode2_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (decode2_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (decode2_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (decode2_s1_agent_m0_read),                       //                         .read
		.uav_write              (decode2_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (decode2_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (decode2_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (decode2_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (decode2_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (decode2_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (decode2_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (decode2_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (DECODE2_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (DECODE2_s1_write),                               //                         .write
		.av_readdata            (DECODE2_s1_readdata),                            //                         .readdata
		.av_writedata           (DECODE2_s1_writedata),                           //                         .writedata
		.av_chipselect          (DECODE2_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) decode3_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (decode3_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (decode3_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (decode3_s1_agent_m0_read),                       //                         .read
		.uav_write              (decode3_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (decode3_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (decode3_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (decode3_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (decode3_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (decode3_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (decode3_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (decode3_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (DECODE3_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (DECODE3_s1_write),                               //                         .write
		.av_readdata            (DECODE3_s1_readdata),                            //                         .readdata
		.av_writedata           (DECODE3_s1_writedata),                           //                         .writedata
		.av_chipselect          (DECODE3_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) decode4_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (decode4_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (decode4_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (decode4_s1_agent_m0_read),                       //                         .read
		.uav_write              (decode4_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (decode4_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (decode4_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (decode4_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (decode4_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (decode4_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (decode4_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (decode4_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (DECODE4_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (DECODE4_s1_write),                               //                         .write
		.av_readdata            (DECODE4_s1_readdata),                            //                         .readdata
		.av_writedata           (DECODE4_s1_writedata),                           //                         .writedata
		.av_chipselect          (DECODE4_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),              //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                      //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                   //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                  //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                 //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                 //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                      //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_QOS_H                 (75),
		.PKT_QOS_L                 (75),
		.PKT_DATA_SIDEBAND_H       (73),
		.PKT_DATA_SIDEBAND_L       (73),
		.PKT_ADDR_SIDEBAND_H       (72),
		.PKT_ADDR_SIDEBAND_L       (72),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_CACHE_H               (91),
		.PKT_CACHE_L               (88),
		.PKT_THREAD_ID_H           (84),
		.PKT_THREAD_ID_L           (84),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                               //       clk.clk
		.reset                 (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_QOS_H                 (75),
		.PKT_QOS_L                 (75),
		.PKT_DATA_SIDEBAND_H       (73),
		.PKT_DATA_SIDEBAND_L       (73),
		.PKT_ADDR_SIDEBAND_H       (72),
		.PKT_ADDR_SIDEBAND_L       (72),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_CACHE_H               (91),
		.PKT_CACHE_L               (88),
		.PKT_THREAD_ID_H           (84),
		.PKT_THREAD_ID_L           (84),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                 (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_qsys_0_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_qsys_0_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_qsys_0_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_qsys_0_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_qsys_0_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_qsys_0_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_qsys_0_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_qsys_0_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_qsys_0_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_qsys_0_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_qsys_0_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_qsys_0_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_qsys_0_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_qsys_0_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_qsys_0_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_qsys_0_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_qsys_0_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                           //                .channel
		.rf_sink_ready           (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_qsys_0_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_qsys_0_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_qsys_0_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_qsys_0_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_qsys_0_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_qsys_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_qsys_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_qsys_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_qsys_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_qsys_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_qsys_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_qsys_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex0_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hex0_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (hex0_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (hex0_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (hex0_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (hex0_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (hex0_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (hex0_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (hex0_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (hex0_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (hex0_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (hex0_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (hex0_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (hex0_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (hex0_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (hex0_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (hex0_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_001_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                        //                .channel
		.rf_sink_ready           (hex0_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (hex0_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (hex0_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (hex0_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (hex0_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (hex0_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (hex0_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (hex0_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (hex0_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (hex0_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),              //                .error
		.rdata_fifo_src_ready    (hex0_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex0_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (hex0_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex0_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (hex0_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (hex0_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (hex0_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (hex0_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (hex0_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (hex0_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (hex0_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (hex0_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (hex0_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) push_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (push_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (push_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (push_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (push_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (push_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (push_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (push_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (push_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (push_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (push_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (push_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (push_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (push_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (push_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (push_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (push_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                        //                .channel
		.rf_sink_ready           (push_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (push_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (push_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (push_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (push_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (push_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (push_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (push_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (push_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (push_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),              //                .error
		.rdata_fifo_src_ready    (push_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (push_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (push_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) push_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (push_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (push_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (push_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (push_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (push_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (push_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (push_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (push_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (push_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (push_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) period1_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (period1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (period1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (period1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (period1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (period1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (period1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (period1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (period1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (period1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (period1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (period1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (period1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (period1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (period1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (period1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (period1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_003_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                        //                .channel
		.rf_sink_ready           (period1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (period1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (period1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (period1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (period1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (period1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (period1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (period1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (period1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (period1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),              //                .error
		.rdata_fifo_src_ready    (period1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (period1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (period1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) period1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (period1_s1_agent_rf_source_data),                //        in.data
		.in_valid          (period1_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (period1_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (period1_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (period1_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (period1_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (period1_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (period1_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (period1_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (period1_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) period2_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (period2_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (period2_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (period2_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (period2_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (period2_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (period2_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (period2_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (period2_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (period2_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (period2_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (period2_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (period2_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (period2_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (period2_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (period2_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (period2_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_004_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                        //                .channel
		.rf_sink_ready           (period2_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (period2_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (period2_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (period2_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (period2_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (period2_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (period2_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (period2_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (period2_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (period2_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),              //                .error
		.rdata_fifo_src_ready    (period2_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (period2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (period2_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) period2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (period2_s1_agent_rf_source_data),                //        in.data
		.in_valid          (period2_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (period2_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (period2_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (period2_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (period2_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (period2_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (period2_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (period2_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (period2_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) period3_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (period3_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (period3_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (period3_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (period3_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (period3_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (period3_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (period3_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (period3_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (period3_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (period3_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (period3_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (period3_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (period3_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (period3_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (period3_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (period3_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_005_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                        //                .channel
		.rf_sink_ready           (period3_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (period3_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (period3_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (period3_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (period3_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (period3_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (period3_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (period3_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (period3_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (period3_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),              //                .error
		.rdata_fifo_src_ready    (period3_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (period3_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (period3_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) period3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (period3_s1_agent_rf_source_data),                //        in.data
		.in_valid          (period3_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (period3_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (period3_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (period3_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (period3_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (period3_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (period3_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (period3_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (period3_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) period4_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (period4_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (period4_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (period4_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (period4_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (period4_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (period4_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (period4_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (period4_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (period4_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (period4_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (period4_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (period4_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (period4_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (period4_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (period4_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (period4_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_006_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                        //                .channel
		.rf_sink_ready           (period4_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (period4_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (period4_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (period4_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (period4_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (period4_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (period4_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (period4_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (period4_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (period4_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),              //                .error
		.rdata_fifo_src_ready    (period4_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (period4_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (period4_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) period4_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (period4_s1_agent_rf_source_data),                //        in.data
		.in_valid          (period4_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (period4_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (period4_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (period4_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (period4_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (period4_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (period4_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (period4_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (period4_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) decode1_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (decode1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (decode1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (decode1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (decode1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (decode1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (decode1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (decode1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (decode1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (decode1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (decode1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (decode1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (decode1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (decode1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (decode1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (decode1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (decode1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (decode1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (decode1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (decode1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (decode1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (decode1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (decode1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (decode1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (decode1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (decode1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (decode1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (decode1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (decode1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (decode1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) decode1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (decode1_s1_agent_rf_source_data),                //        in.data
		.in_valid          (decode1_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (decode1_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (decode1_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (decode1_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (decode1_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (decode1_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (decode1_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (decode1_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (decode1_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) decode2_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (decode2_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (decode2_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (decode2_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (decode2_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (decode2_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (decode2_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (decode2_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (decode2_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (decode2_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (decode2_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (decode2_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (decode2_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (decode2_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (decode2_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (decode2_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (decode2_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_008_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                        //                .channel
		.rf_sink_ready           (decode2_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (decode2_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (decode2_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (decode2_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (decode2_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (decode2_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (decode2_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (decode2_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (decode2_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (decode2_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),              //                .error
		.rdata_fifo_src_ready    (decode2_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (decode2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (decode2_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) decode2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (decode2_s1_agent_rf_source_data),                //        in.data
		.in_valid          (decode2_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (decode2_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (decode2_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (decode2_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (decode2_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (decode2_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (decode2_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (decode2_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (decode2_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) decode3_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (decode3_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (decode3_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (decode3_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (decode3_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (decode3_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (decode3_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (decode3_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (decode3_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (decode3_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (decode3_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (decode3_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (decode3_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (decode3_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (decode3_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (decode3_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (decode3_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_009_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                        //                .channel
		.rf_sink_ready           (decode3_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (decode3_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (decode3_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (decode3_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (decode3_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (decode3_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (decode3_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (decode3_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (decode3_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (decode3_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),              //                .error
		.rdata_fifo_src_ready    (decode3_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (decode3_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (decode3_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) decode3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (decode3_s1_agent_rf_source_data),                //        in.data
		.in_valid          (decode3_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (decode3_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (decode3_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (decode3_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (decode3_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (decode3_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (decode3_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (decode3_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (decode3_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) decode4_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (decode4_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (decode4_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (decode4_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (decode4_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (decode4_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (decode4_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (decode4_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (decode4_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (decode4_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (decode4_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (decode4_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (decode4_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (decode4_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (decode4_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (decode4_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (decode4_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_010_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                        //                .channel
		.rf_sink_ready           (decode4_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (decode4_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (decode4_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (decode4_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (decode4_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (decode4_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (decode4_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (decode4_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (decode4_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (decode4_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),              //                .error
		.rdata_fifo_src_ready    (decode4_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (decode4_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (decode4_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) decode4_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (decode4_s1_agent_rf_source_data),                //        in.data
		.in_valid          (decode4_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (decode4_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (decode4_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (decode4_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (decode4_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (decode4_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (decode4_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (decode4_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (decode4_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (96),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (nios2_qsys_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (nios2_qsys_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	nios2e_mm_interconnect_0_router router (
		.sink_ready         (nios2_qsys_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_qsys_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (nios2_qsys_0_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_002_src_ready),                                //       src.ready
		.src_valid          (router_002_src_valid),                                //          .valid
		.src_data           (router_002_src_data),                                 //          .data
		.src_channel        (router_002_src_channel),                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (hex0_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (hex0_s1_agent_rp_valid),                         //          .valid
		.sink_data          (hex0_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (hex0_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hex0_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                           //       src.ready
		.src_valid          (router_003_src_valid),                           //          .valid
		.src_data           (router_003_src_data),                            //          .data
		.src_channel        (router_003_src_channel),                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (push_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (push_s1_agent_rp_valid),                         //          .valid
		.sink_data          (push_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (push_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (push_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_003 router_005 (
		.sink_ready         (period1_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (period1_s1_agent_rp_valid),                      //          .valid
		.sink_data          (period1_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (period1_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (period1_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                           //       src.ready
		.src_valid          (router_005_src_valid),                           //          .valid
		.src_data           (router_005_src_data),                            //          .data
		.src_channel        (router_005_src_channel),                         //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_003 router_006 (
		.sink_ready         (period2_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (period2_s1_agent_rp_valid),                      //          .valid
		.sink_data          (period2_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (period2_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (period2_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                           //       src.ready
		.src_valid          (router_006_src_valid),                           //          .valid
		.src_data           (router_006_src_data),                            //          .data
		.src_channel        (router_006_src_channel),                         //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_003 router_007 (
		.sink_ready         (period3_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (period3_s1_agent_rp_valid),                      //          .valid
		.sink_data          (period3_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (period3_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (period3_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_003 router_008 (
		.sink_ready         (period4_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (period4_s1_agent_rp_valid),                      //          .valid
		.sink_data          (period4_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (period4_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (period4_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                           //       src.ready
		.src_valid          (router_008_src_valid),                           //          .valid
		.src_data           (router_008_src_data),                            //          .data
		.src_channel        (router_008_src_channel),                         //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_003 router_009 (
		.sink_ready         (decode1_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (decode1_s1_agent_rp_valid),                      //          .valid
		.sink_data          (decode1_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (decode1_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (decode1_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                           //       src.ready
		.src_valid          (router_009_src_valid),                           //          .valid
		.src_data           (router_009_src_data),                            //          .data
		.src_channel        (router_009_src_channel),                         //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_003 router_010 (
		.sink_ready         (decode2_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (decode2_s1_agent_rp_valid),                      //          .valid
		.sink_data          (decode2_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (decode2_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (decode2_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                           //       src.ready
		.src_valid          (router_010_src_valid),                           //          .valid
		.src_data           (router_010_src_data),                            //          .data
		.src_channel        (router_010_src_channel),                         //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_003 router_011 (
		.sink_ready         (decode3_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (decode3_s1_agent_rp_valid),                      //          .valid
		.sink_data          (decode3_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (decode3_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (decode3_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                           //       src.ready
		.src_valid          (router_011_src_valid),                           //          .valid
		.src_data           (router_011_src_data),                            //          .data
		.src_channel        (router_011_src_channel),                         //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_003 router_012 (
		.sink_ready         (decode4_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (decode4_s1_agent_rp_valid),                      //          .valid
		.sink_data          (decode4_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (decode4_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (decode4_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                           //       src.ready
		.src_valid          (router_012_src_valid),                           //          .valid
		.src_data           (router_012_src_data),                            //          .data
		.src_channel        (router_012_src_channel),                         //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),             //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),              //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                           //       src.ready
		.src_valid          (router_013_src_valid),                           //          .valid
		.src_data           (router_013_src_data),                            //          .data
		.src_channel        (router_013_src_channel),                         //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                               //      sink.ready
		.sink_channel        (router_src_channel),                             //          .channel
		.sink_data           (router_src_data),                                //          .data
		.sink_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                         //          .endofpacket
		.sink_valid          (router_src_valid),                               //          .valid
		.src0_ready          (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                           //          .valid
		.src0_data           (cmd_demux_src0_data),                            //          .data
		.src0_channel        (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                           //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                           //          .valid
		.src1_data           (cmd_demux_src1_data),                            //          .data
		.src1_channel        (cmd_demux_src1_channel),                         //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                           //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                           //          .valid
		.src2_data           (cmd_demux_src2_data),                            //          .data
		.src2_channel        (cmd_demux_src2_channel),                         //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                           //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                           //          .valid
		.src3_data           (cmd_demux_src3_data),                            //          .data
		.src3_channel        (cmd_demux_src3_channel),                         //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                           //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                           //          .valid
		.src4_data           (cmd_demux_src4_data),                            //          .data
		.src4_channel        (cmd_demux_src4_channel),                         //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                           //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                           //          .valid
		.src5_data           (cmd_demux_src5_data),                            //          .data
		.src5_channel        (cmd_demux_src5_channel),                         //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                           //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                           //          .valid
		.src6_data           (cmd_demux_src6_data),                            //          .data
		.src6_channel        (cmd_demux_src6_channel),                         //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                     //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                           //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                           //          .valid
		.src7_data           (cmd_demux_src7_data),                            //          .data
		.src7_channel        (cmd_demux_src7_channel),                         //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                           //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                           //          .valid
		.src8_data           (cmd_demux_src8_data),                            //          .data
		.src8_channel        (cmd_demux_src8_channel),                         //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                           //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                           //          .valid
		.src9_data           (cmd_demux_src9_data),                            //          .data
		.src9_channel        (cmd_demux_src9_channel),                         //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                     //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                          //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                          //          .valid
		.src10_data          (cmd_demux_src10_data),                           //          .data
		.src10_channel       (cmd_demux_src10_channel),                        //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                    //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                          //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                          //          .valid
		.src11_data          (cmd_demux_src11_data),                           //          .data
		.src11_channel       (cmd_demux_src11_channel),                        //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket)                     //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //      sink.ready
		.sink_channel       (router_001_src_channel),                         //          .channel
		.sink_data          (router_001_src_data),                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_001_src0_data),                        //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.src1_data          (cmd_demux_001_src1_data),                        //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_src_valid),                              //          .valid
		.src_data            (cmd_mux_src_data),                               //          .data
		.src_channel         (cmd_mux_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //          .channel
		.sink0_data          (cmd_demux_src0_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_mux_001_src_data),                           //          .data
		.src_channel         (cmd_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //          .channel
		.sink0_data          (cmd_demux_src1_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_mux_004_src_data),                           //          .data
		.src_channel         (cmd_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                         //          .channel
		.sink0_data          (cmd_demux_src4_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux_001 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_mux_006_src_data),                           //          .data
		.src_channel         (cmd_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                         //          .channel
		.sink0_data          (cmd_demux_src6_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux_001 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                          //          .valid
		.src_data            (cmd_mux_007_src_data),                           //          .data
		.src_channel         (cmd_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                         //          .channel
		.sink0_data          (cmd_demux_src7_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux_001 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                          //          .valid
		.src_data            (cmd_mux_008_src_data),                           //          .data
		.src_channel         (cmd_mux_008_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                         //          .channel
		.sink0_data          (cmd_demux_src8_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux_001 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                          //          .valid
		.src_data            (cmd_mux_009_src_data),                           //          .data
		.src_channel         (cmd_mux_009_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                         //          .channel
		.sink0_data          (cmd_demux_src9_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux_001 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                          //          .valid
		.src_data            (cmd_mux_010_src_data),                           //          .data
		.src_channel         (cmd_mux_010_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                        //          .channel
		.sink0_data          (cmd_demux_src10_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                     //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                          //          .valid
		.src_data            (cmd_mux_011_src_data),                           //          .data
		.src_channel         (cmd_mux_011_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                        //          .channel
		.sink0_data          (cmd_demux_src11_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_demux_001 rsp_demux (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                           //      sink.ready
		.sink_channel       (router_002_src_channel),                         //          .channel
		.sink_data          (router_002_src_data),                            //          .data
		.sink_startofpacket (router_002_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_002_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_src0_data),                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_src1_data),                            //          .data
		.src1_channel       (rsp_demux_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                      //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //      sink.ready
		.sink_channel       (router_003_src_channel),                         //          .channel
		.sink_data          (router_003_src_data),                            //          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_003_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //      sink.ready
		.sink_channel       (router_004_src_channel),                         //          .channel
		.sink_data          (router_004_src_data),                            //          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_004_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_demux_001 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_demux_001 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_demux_001 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //      sink.ready
		.sink_channel       (router_008_src_channel),                         //          .channel
		.sink_data          (router_008_src_data),                            //          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_008_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_demux_001 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                           //      sink.ready
		.sink_channel       (router_009_src_channel),                         //          .channel
		.sink_data          (router_009_src_data),                            //          .data
		.sink_startofpacket (router_009_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_009_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_007_src0_data),                        //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_demux_001 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                           //      sink.ready
		.sink_channel       (router_010_src_channel),                         //          .channel
		.sink_data          (router_010_src_data),                            //          .data
		.sink_startofpacket (router_010_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_010_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_008_src0_data),                        //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_demux_001 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                           //      sink.ready
		.sink_channel       (router_011_src_channel),                         //          .channel
		.sink_data          (router_011_src_data),                            //          .data
		.sink_startofpacket (router_011_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_011_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_009_src0_data),                        //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_demux_001 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                           //      sink.ready
		.sink_channel       (router_012_src_channel),                         //          .channel
		.sink_data          (router_012_src_data),                            //          .data
		.sink_startofpacket (router_012_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_012_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_010_src0_data),                        //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_cmd_demux_001 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                           //      sink.ready
		.sink_channel       (router_013_src_channel),                         //          .channel
		.sink_data          (router_013_src_data),                            //          .data
		.sink_startofpacket (router_013_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_013_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_011_src0_data),                        //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_011_src1_data),                        //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                  //       clk.clk
		.reset                (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                              //       src.ready
		.src_valid            (rsp_mux_src_valid),                              //          .valid
		.src_data             (rsp_mux_src_data),                               //          .data
		.src_channel          (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                         //          .channel
		.sink0_data           (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                       //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                     //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                        //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                       //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                     //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                        //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                       //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                     //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                        //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                       //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                     //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                        //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                       //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                       //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                     //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                        //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                 //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                       //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                       //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                     //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                        //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                 //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                       //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                       //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                     //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                        //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                       //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                       //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                     //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                        //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                 //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                       //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                        //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                 //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                       //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                        //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                         //          .channel
		.sink0_data          (rsp_demux_src1_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                     //          .endofpacket
		.sink1_ready         (rsp_demux_011_src1_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_011_src1_valid),                       //          .valid
		.sink1_channel       (rsp_demux_011_src1_channel),                     //          .channel
		.sink1_data          (rsp_demux_011_src1_data),                        //          .data
		.sink1_startofpacket (rsp_demux_011_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_011_src1_endofpacket)                  //          .endofpacket
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_qsys_0_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                            //         .error
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex0_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (hex0_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (hex0_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)               //         .error
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (push_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (push_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (push_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (period1_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (period1_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (period1_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (period2_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (period2_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (period2_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)               //         .error
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (period3_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (period3_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (period3_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (period4_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (period4_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (period4_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)               //         .error
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (decode1_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (decode1_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (decode1_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)               //         .error
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (decode2_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (decode2_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (decode2_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)               //         .error
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (decode3_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (decode3_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (decode3_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)               //         .error
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (decode4_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (decode4_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (decode4_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)               //         .error
	);

	nios2e_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)               //         .error
	);

endmodule
