
mtest02.elf:     file format elf32-littlenios2
mtest02.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00009da4 memsz 0x00009da4 flags r-x
    LOAD off    0x0000adc4 vaddr 0x00009dc4 paddr 0x0000b904 align 2**12
         filesz 0x00001b40 memsz 0x00001b40 flags rw-
    LOAD off    0x0000d444 vaddr 0x0000d444 paddr 0x0000d444 align 2**12
         filesz 0x00000000 memsz 0x000001d4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009940  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000254  00009b70  00009b70  0000ab70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b40  00009dc4  0000b904  0000adc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001d4  0000d444  0000d444  0000d444  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0000d618  0000d618  0000c904  2**0
                  CONTENTS
  7 .epcs_flash_controller_0 00000000  00801000  00801000  0000c904  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000c904  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b48  00000000  00000000  0000c928  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001a84b  00000000  00000000  0000d470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006efc  00000000  00000000  00027cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007e51  00000000  00000000  0002ebb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001c48  00000000  00000000  00036a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002e9a  00000000  00000000  00038650  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ea4  00000000  00000000  0003b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00040390  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000728  00000000  00000000  000403a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00043752  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00043755  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00043761  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00043762  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00043763  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0004376e  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00043779  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000006  00000000  00000000  00043784  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000012  00000000  00000000  0004378a  2**0
                  CONTENTS, READONLY
 27 .jdi          00006130  00000000  00000000  0004379c  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00081c6c  00000000  00000000  000498cc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00009b70 l    d  .rodata	00000000 .rodata
00009dc4 l    d  .rwdata	00000000 .rwdata
0000d444 l    d  .bss	00000000 .bss
0000d618 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00801000 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mtest02_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 memtest.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00003124 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000032c8 l     F .text	00000034 alt_dev_reg
00009dc4 l     O .rwdata	000000cc epcs_flash_controller_0
00009e90 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00003388 l     F .text	00000034 alt_flash_device_register
00003410 l     F .text	000003f8 alt_epcs_flash_query
00003808 l     F .text	000000ec alt_epcs_flash_memcmp
00003be0 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000040a8 l     F .text	0000020c altera_avalon_jtag_uart_irq
000042b4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
00004948 l     F .text	00000038 epcs_test_wip
00004980 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00005054 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005188 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000051b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000056d0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00005830 l     F .text	0000003c alt_get_errno
0000586c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0000b098 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008230 l     F .text	00000008 __fp_unlock
00008244 l     F .text	0000019c __sinit.part.1
000083e0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
00008e80 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00009508 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000095fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
000096e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00009844 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000b900 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00009a34 l     F .text	0000003c alt_get_errno
0000d47c g     O .bss	00000004 alt_instruction_exception_handler
00003b54 g     F .text	0000008c alt_epcs_flash_get_info
000093c0 g     F .text	00000054 _isatty_r
00003210 g     F .text	0000007c alt_main
0000d518 g     O .bss	00000100 alt_irq
00009414 g     F .text	00000060 _lseek_r
0000b904 g       *ABS*	00000000 __flash_rwdata_start
0000d618 g       *ABS*	00000000 __alt_heap_start
00009148 g     F .text	0000005c __sseek
00008590 g     F .text	00000010 __sinit
000083e8 g     F .text	00000078 __sfmoreglue
00009820 g     F .text	00000024 __malloc_unlock
00007368 g     F .text	0000015c memmove
00008578 g     F .text	00000018 _cleanup
0000328c g     F .text	0000003c alt_putstr
00005cdc g     F .text	00000024 altera_nios2_gen2_irq_init
000049bc g     F .text	000000fc epcs_sector_erase
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009364 g     F .text	0000005c _fstat_r
0000d480 g     O .bss	00000004 errno
00007a9c g     F .text	00000014 __srget
000090c4 g     F .text	00000008 __seofread
0000d468 g     O .bss	00000004 alt_argv
000138c4 g       *ABS*	00000000 _gp
0000d4b8 g     O .bss	00000020 Decode
0000131c g     F .text	00000218 DispAll
0000af18 g     O .rwdata	00000180 alt_fd_list
000067bc g     F .text	00000070 _getc_r
0000682c g     F .text	00000088 getc
00004c00 g     F .text	0000006c epcs_write_status_register
00005efc g     F .text	00000090 alt_find_dev
00007220 g     F .text	00000148 memcpy
00008238 g     F .text	0000000c _cleanup_r
000057b4 g     F .text	0000007c alt_io_redirect
00009b70 g       *ABS*	00000000 __DTOR_END__
00006158 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00003cec g     F .text	00000100 alt_epcs_flash_write_block
000044ac g     F .text	0000021c altera_avalon_jtag_uart_read
0000300c g     F .text	00000064 .hidden __udivsi3
00009638 g     F .text	000000ac isatty
0000d448 g     O .bss	00000004 dn
0000d48c g     O .bss	00000004 __malloc_top_pad
000062f4 g     F .text	000004c8 __sfvwrite_r
00007ab0 g     F .text	00000054 _sbrk_r
00009474 g     F .text	00000060 _read_r
0000b8d4 g     O .rwdata	00000004 alt_max_fd
00009260 g     F .text	000000f0 _fclose_r
00008200 g     F .text	00000030 fflush
0000d488 g     O .bss	00000004 __malloc_max_sbrked_mem
0000d450 g     O .bss	00000004 blinkco
00003c74 g     F .text	00000078 alt_epcs_flash_erase_block
00009720 g     F .text	000000dc lseek
0000b8f0 g     O .rwdata	00000004 _global_impure_ptr
00004ecc g     F .text	0000005c epcs_exit_4_bytes_mode
000074c4 g     F .text	00000564 _realloc_r
0000d618 g       *ABS*	00000000 __bss_end
000055e0 g     F .text	000000f0 alt_iic_isr_register
000030f0 g     F .text	00000034 alt_getchar
00005bd4 g     F .text	00000108 alt_tick
000085b0 g     F .text	00000018 __fp_lock_all
00005594 g     F .text	0000004c alt_ic_irq_enabled
0000d458 g     O .bss	00000004 ChN
0000d45c g     O .bss	00000003 state
00005b38 g     F .text	0000009c alt_alarm_stop
0000d470 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
0000aef0 g     O .rwdata	00000028 alt_dev_null
00005168 g     F .text	00000020 alt_dcache_flush_all
0000b904 g       *ABS*	00000000 __ram_rwdata_end
0000d460 g     O .bss	00000004 regval
0000b8cc g     O .rwdata	00000008 alt_dev_list
00009a70 g     F .text	00000100 write
00009dc4 g       *ABS*	00000000 __ram_rodata_end
00009544 g     F .text	000000b8 fstat
00003070 g     F .text	00000058 .hidden __umodsi3
00004d88 g     F .text	00000068 epcs_read_electronic_signature
0000d618 g       *ABS*	00000000 end
00003fe8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00009b70 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
000046c8 g     F .text	00000224 altera_avalon_jtag_uart_write
000085a0 g     F .text	00000004 __sfp_lock_acquire
000070c0 g     F .text	000000e4 memchr
00008704 g     F .text	00000310 _free_r
00007a28 g     F .text	00000074 __srget_r
00007e08 g     F .text	00000180 __call_exitprocs
000015bc g     F .text	000000e4 uart_rx_char
00000ebc g     F .text	000002a0 DispDuty
0000b8f8 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
0000d474 g     O .bss	00000004 _alt_tick_rate
0000026c g     F .text	00000054 _wait
0000d454 g     O .bss	00000004 Category
00005d00 g     F .text	000001fc alt_avalon_spi_command
0000d478 g     O .bss	00000004 _alt_nticks
00009880 g     F .text	00000104 read
00003334 g     F .text	00000054 alt_sys_init
00007cf0 g     F .text	00000118 __register_exitproc
00004354 g     F .text	00000068 altera_avalon_jtag_uart_close
000030c8 g     F .text	00000028 .hidden __mulsi3
00009dc4 g       *ABS*	00000000 __ram_rwdata_start
00009b70 g       *ABS*	00000000 __ram_rodata_start
0000d490 g     O .bss	00000028 __malloc_current_mallinfo
000048ec g     F .text	0000005c epcs_read_status_register
0000115c g     F .text	000001c0 DispChN
00003e84 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00006094 g     F .text	000000c4 alt_get_fd
0000920c g     F .text	00000054 _close_r
0000d44c g     O .bss	00000004 BlinkEnb
00004df0 g     F .text	00000080 epcs_read_device_id
000071a4 g     F .text	0000007c memcmp
00003f44 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000d618 g       *ABS*	00000000 __alt_stack_base
00003f94 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00801000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
00007b9c g     F .text	00000154 __swsetup_r
00008460 g     F .text	00000118 __sfp
0000b4bc g     O .rwdata	00000408 __malloc_av_
000085ac g     F .text	00000004 __sinit_lock_release
00009070 g     F .text	00000054 __sread
00005f8c g     F .text	00000108 alt_find_file
000051f0 g     F .text	000000a4 alt_dev_llist_insert
000097fc g     F .text	00000024 __malloc_lock
00009984 g     F .text	000000b0 sbrk
000081a4 g     F .text	0000005c _fflush_r
0000d4d8 g     O .bss	00000020 Duty
0000b8dc g     O .rwdata	00000008 alt_flash_dev_list
0000d444 g       *ABS*	00000000 __bss_start
00008d58 g     F .text	00000128 memset
000016a0 g     F .text	00001874 main
0000d46c g     O .bss	00000004 alt_envp
0000d484 g     O .bss	00000004 __malloc_max_total_mem
000004fc g     F .text	000000a4 TurnOffSeg
00003ee4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000091a4 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00009350 g     F .text	00000014 fclose
000068b4 g     F .text	0000080c _malloc_r
0000b8d8 g     O .rwdata	00000004 alt_errno
00008a14 g     F .text	000000c4 _fwalk
00002f14 g     F .text	00000084 .hidden __divsi3
000085e0 g     F .text	00000124 _malloc_trim_r
00009b70 g       *ABS*	00000000 __CTOR_END__
000038f4 g     F .text	00000260 alt_epcs_flash_write
00009b70 g       *ABS*	00000000 __flash_rodata_start
00009b70 g       *ABS*	00000000 __DTOR_LIST__
000032fc g     F .text	00000038 alt_irq_init
00005ab4 g     F .text	00000084 alt_release_fd
000005a0 g     F .text	0000091c DispPeriod
0000d4f8 g     O .bss	00000020 Period
000061f4 g     F .text	00000014 atexit
000091ac g     F .text	00000060 _write_r
0000b8f4 g     O .rwdata	00000004 _impure_ptr
0000d464 g     O .bss	00000004 alt_argc
00007f88 g     F .text	0000021c __sflush_r
000052f4 g     F .text	00000060 _do_dtors
00008e9c g     F .text	000001d4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
000085c8 g     F .text	00000018 __fp_unlock_all
0000b8c4 g     O .rwdata	00000008 alt_fs_list
00001534 g     F .text	00000088 uart_print_help
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004ab8 g     F .text	000000f4 epcs_read_buffer
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
000033bc g     F .text	00000054 alt_epcs_flash_init
0000d444 g     O .bss	00000004 pn
00005430 g     F .text	00000050 alt_ic_isr_register
0000b904 g       *ABS*	00000000 _edata
0000d618 g       *ABS*	00000000 _end
00005354 g     F .text	00000068 alt_flash_open_dev
00000230 g       *ABS*	00000000 __ram_exceptions_end
000043bc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00006240 g     F .text	0000009c _fputs_r
00005508 g     F .text	0000008c alt_ic_irq_disable
00004e70 g     F .text	0000005c epcs_enter_4_bytes_mode
000090cc g     F .text	0000007c __swrite
0000b8fc g     O .rwdata	00000004 __malloc_trim_threshold
00006208 g     F .text	00000038 exit
00008ad8 g     F .text	000000c4 _fwalk_reent
000053bc g     F .text	00000054 alt_flash_close_dev
00002f98 g     F .text	00000074 .hidden __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000085a4 g     F .text	00000004 __sfp_lock_release
000094d4 g     F .text	00000034 _exit
00004f28 g     F .text	0000012c alt_alarm_start
00008b9c g     F .text	000001bc __smakebuf_r
00007b04 g     F .text	00000098 strlen
00004bac g     F .text	00000054 epcs_write_enable
00005958 g     F .text	0000015c open
000002c0 g     F .text	0000023c Seg7Enc
00005410 g     F .text	00000020 alt_icache_flush_all
000062dc g     F .text	00000018 fputs
0000b8e4 g     O .rwdata	00000004 alt_priority_mask
00005480 g     F .text	00000088 alt_ic_irq_enable
00003dec g     F .text	00000098 alt_epcs_flash_read
0000b8e8 g     O .rwdata	00000008 alt_alarm_list
00005294 g     F .text	00000060 _do_ctors
00005090 g     F .text	000000d8 close
0000318c g     F .text	00000084 alt_load
000085a8 g     F .text	00000004 __sinit_lock_acquire
00004c6c g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10b54604 	addi	r2,r2,-10984
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10b54604 	addi	r2,r2,-10984
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_epcs_flash_controller_0+0xff7ff12c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_epcs_flash_controller_0+0xff7ff120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6ee17 	ldw	r2,-25672(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6ee17 	ldw	r2,-25672(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d68e3114 	ori	gp,gp,14532
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     244:	10b51114 	ori	r2,r2,54340

    movhi r3, %hi(__bss_end)
     248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     24c:	18f58614 	ori	r3,r3,54808

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_epcs_flash_controller_0+0xff7ff254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000318c0 	call	318c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00032100 	call	3210 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_epcs_flash_controller_0+0xff7ff268>

0000026c <_wait>:
unsigned long 	regval;
//char 		onechar;

void _wait(loop_count)
int loop_count;
{
     26c:	defffc04 	addi	sp,sp,-16
     270:	df000315 	stw	fp,12(sp)
     274:	df000304 	addi	fp,sp,12
     278:	e13fff15 	stw	r4,-4(fp)
	volatile int sum, data;
	sum	= 0;
     27c:	e03ffd15 	stw	zero,-12(fp)
	for (data = 0; data < loop_count; data++) {
     280:	e03ffe15 	stw	zero,-8(fp)
     284:	00000606 	br	2a0 <_wait+0x34>
		sum = (data << 8);
     288:	e0bffe17 	ldw	r2,-8(fp)
     28c:	1004923a 	slli	r2,r2,8
     290:	e0bffd15 	stw	r2,-12(fp)
void _wait(loop_count)
int loop_count;
{
	volatile int sum, data;
	sum	= 0;
	for (data = 0; data < loop_count; data++) {
     294:	e0bffe17 	ldw	r2,-8(fp)
     298:	10800044 	addi	r2,r2,1
     29c:	e0bffe15 	stw	r2,-8(fp)
     2a0:	e0fffe17 	ldw	r3,-8(fp)
     2a4:	e0bfff17 	ldw	r2,-4(fp)
     2a8:	18bff716 	blt	r3,r2,288 <__alt_mem_epcs_flash_controller_0+0xff7ff288>
		sum = (data << 8);
	}
  return;
     2ac:	0001883a 	nop
}
     2b0:	e037883a 	mov	sp,fp
     2b4:	df000017 	ldw	fp,0(sp)
     2b8:	dec00104 	addi	sp,sp,4
     2bc:	f800283a 	ret

000002c0 <Seg7Enc>:

int Seg7Enc(int n) {
     2c0:	defffd04 	addi	sp,sp,-12
     2c4:	df000215 	stw	fp,8(sp)
     2c8:	df000204 	addi	fp,sp,8
     2cc:	e13fff15 	stw	r4,-4(fp)
	int res;
	if(n == 0) res = 0xc0;
     2d0:	e0bfff17 	ldw	r2,-4(fp)
     2d4:	1000031e 	bne	r2,zero,2e4 <Seg7Enc+0x24>
     2d8:	00803004 	movi	r2,192
     2dc:	e0bffe15 	stw	r2,-8(fp)
     2e0:	00008106 	br	4e8 <Seg7Enc+0x228>
	else if(n == 1) res = 0xf9;
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	10800058 	cmpnei	r2,r2,1
     2ec:	1000031e 	bne	r2,zero,2fc <Seg7Enc+0x3c>
     2f0:	00803e44 	movi	r2,249
     2f4:	e0bffe15 	stw	r2,-8(fp)
     2f8:	00007b06 	br	4e8 <Seg7Enc+0x228>
	else if(n == 2) res = 0xa4;
     2fc:	e0bfff17 	ldw	r2,-4(fp)
     300:	10800098 	cmpnei	r2,r2,2
     304:	1000031e 	bne	r2,zero,314 <Seg7Enc+0x54>
     308:	00802904 	movi	r2,164
     30c:	e0bffe15 	stw	r2,-8(fp)
     310:	00007506 	br	4e8 <Seg7Enc+0x228>
	else if(n == 3) res = 0xb0;
     314:	e0bfff17 	ldw	r2,-4(fp)
     318:	108000d8 	cmpnei	r2,r2,3
     31c:	1000031e 	bne	r2,zero,32c <Seg7Enc+0x6c>
     320:	00802c04 	movi	r2,176
     324:	e0bffe15 	stw	r2,-8(fp)
     328:	00006f06 	br	4e8 <Seg7Enc+0x228>
	else if(n == 4) res = 0x99;
     32c:	e0bfff17 	ldw	r2,-4(fp)
     330:	10800118 	cmpnei	r2,r2,4
     334:	1000031e 	bne	r2,zero,344 <Seg7Enc+0x84>
     338:	00802644 	movi	r2,153
     33c:	e0bffe15 	stw	r2,-8(fp)
     340:	00006906 	br	4e8 <Seg7Enc+0x228>
	else if(n == 5) res = 0x92;
     344:	e0bfff17 	ldw	r2,-4(fp)
     348:	10800158 	cmpnei	r2,r2,5
     34c:	1000031e 	bne	r2,zero,35c <Seg7Enc+0x9c>
     350:	00802484 	movi	r2,146
     354:	e0bffe15 	stw	r2,-8(fp)
     358:	00006306 	br	4e8 <Seg7Enc+0x228>
	else if(n == 6) res = 0x82;
     35c:	e0bfff17 	ldw	r2,-4(fp)
     360:	10800198 	cmpnei	r2,r2,6
     364:	1000031e 	bne	r2,zero,374 <Seg7Enc+0xb4>
     368:	00802084 	movi	r2,130
     36c:	e0bffe15 	stw	r2,-8(fp)
     370:	00005d06 	br	4e8 <Seg7Enc+0x228>
	else if(n == 7) res = 0xf8;
     374:	e0bfff17 	ldw	r2,-4(fp)
     378:	108001d8 	cmpnei	r2,r2,7
     37c:	1000031e 	bne	r2,zero,38c <Seg7Enc+0xcc>
     380:	00803e04 	movi	r2,248
     384:	e0bffe15 	stw	r2,-8(fp)
     388:	00005706 	br	4e8 <Seg7Enc+0x228>
	else if(n == 8) res = 0x80;
     38c:	e0bfff17 	ldw	r2,-4(fp)
     390:	10800218 	cmpnei	r2,r2,8
     394:	1000031e 	bne	r2,zero,3a4 <Seg7Enc+0xe4>
     398:	00802004 	movi	r2,128
     39c:	e0bffe15 	stw	r2,-8(fp)
     3a0:	00005106 	br	4e8 <Seg7Enc+0x228>
	else if(n == 9) res = 0x98;
     3a4:	e0bfff17 	ldw	r2,-4(fp)
     3a8:	10800258 	cmpnei	r2,r2,9
     3ac:	1000031e 	bne	r2,zero,3bc <Seg7Enc+0xfc>
     3b0:	00802604 	movi	r2,152
     3b4:	e0bffe15 	stw	r2,-8(fp)
     3b8:	00004b06 	br	4e8 <Seg7Enc+0x228>
	else if(n == 10) res = 0x88; // A
     3bc:	e0bfff17 	ldw	r2,-4(fp)
     3c0:	10800298 	cmpnei	r2,r2,10
     3c4:	1000031e 	bne	r2,zero,3d4 <Seg7Enc+0x114>
     3c8:	00802204 	movi	r2,136
     3cc:	e0bffe15 	stw	r2,-8(fp)
     3d0:	00004506 	br	4e8 <Seg7Enc+0x228>
	else if(n == 11) res = 0x83; // b
     3d4:	e0bfff17 	ldw	r2,-4(fp)
     3d8:	108002d8 	cmpnei	r2,r2,11
     3dc:	1000031e 	bne	r2,zero,3ec <Seg7Enc+0x12c>
     3e0:	008020c4 	movi	r2,131
     3e4:	e0bffe15 	stw	r2,-8(fp)
     3e8:	00003f06 	br	4e8 <Seg7Enc+0x228>
	else if(n == 12) res = 0xa7; // c
     3ec:	e0bfff17 	ldw	r2,-4(fp)
     3f0:	10800318 	cmpnei	r2,r2,12
     3f4:	1000031e 	bne	r2,zero,404 <Seg7Enc+0x144>
     3f8:	008029c4 	movi	r2,167
     3fc:	e0bffe15 	stw	r2,-8(fp)
     400:	00003906 	br	4e8 <Seg7Enc+0x228>
	else if(n == 13) res = 0xa1; // d
     404:	e0bfff17 	ldw	r2,-4(fp)
     408:	10800358 	cmpnei	r2,r2,13
     40c:	1000031e 	bne	r2,zero,41c <Seg7Enc+0x15c>
     410:	00802844 	movi	r2,161
     414:	e0bffe15 	stw	r2,-8(fp)
     418:	00003306 	br	4e8 <Seg7Enc+0x228>
	else if(n == 14) res = 0x86; // E
     41c:	e0bfff17 	ldw	r2,-4(fp)
     420:	10800398 	cmpnei	r2,r2,14
     424:	1000031e 	bne	r2,zero,434 <Seg7Enc+0x174>
     428:	00802184 	movi	r2,134
     42c:	e0bffe15 	stw	r2,-8(fp)
     430:	00002d06 	br	4e8 <Seg7Enc+0x228>
	else if(n == 15) res = 0x8e; // F
     434:	e0bfff17 	ldw	r2,-4(fp)
     438:	108003d8 	cmpnei	r2,r2,15
     43c:	1000031e 	bne	r2,zero,44c <Seg7Enc+0x18c>
     440:	00802384 	movi	r2,142
     444:	e0bffe15 	stw	r2,-8(fp)
     448:	00002706 	br	4e8 <Seg7Enc+0x228>
	else if(n == 100) res = 0x8b; // h(hundred)
     44c:	e0bfff17 	ldw	r2,-4(fp)
     450:	10801918 	cmpnei	r2,r2,100
     454:	1000031e 	bne	r2,zero,464 <Seg7Enc+0x1a4>
     458:	008022c4 	movi	r2,139
     45c:	e0bffe15 	stw	r2,-8(fp)
     460:	00002106 	br	4e8 <Seg7Enc+0x228>
	else if(n == 1000) res = 0x79; // 1.(1k)
     464:	e0bfff17 	ldw	r2,-4(fp)
     468:	1080fa18 	cmpnei	r2,r2,1000
     46c:	1000031e 	bne	r2,zero,47c <Seg7Enc+0x1bc>
     470:	00801e44 	movi	r2,121
     474:	e0bffe15 	stw	r2,-8(fp)
     478:	00001b06 	br	4e8 <Seg7Enc+0x228>
	else if(n == 2000) res = 0x24; // 2.(2k)
     47c:	e0bfff17 	ldw	r2,-4(fp)
     480:	1081f418 	cmpnei	r2,r2,2000
     484:	1000031e 	bne	r2,zero,494 <Seg7Enc+0x1d4>
     488:	00800904 	movi	r2,36
     48c:	e0bffe15 	stw	r2,-8(fp)
     490:	00001506 	br	4e8 <Seg7Enc+0x228>
	else if(n == 5000) res = 0x12; // 5.(5k)
     494:	e0bfff17 	ldw	r2,-4(fp)
     498:	1084e218 	cmpnei	r2,r2,5000
     49c:	1000031e 	bne	r2,zero,4ac <Seg7Enc+0x1ec>
     4a0:	00800484 	movi	r2,18
     4a4:	e0bffe15 	stw	r2,-8(fp)
     4a8:	00000f06 	br	4e8 <Seg7Enc+0x228>
	else if(n == 10000) res = 0x40; // 0.(10k)
     4ac:	e0bfff17 	ldw	r2,-4(fp)
     4b0:	1089c418 	cmpnei	r2,r2,10000
     4b4:	1000031e 	bne	r2,zero,4c4 <Seg7Enc+0x204>
     4b8:	00801004 	movi	r2,64
     4bc:	e0bffe15 	stw	r2,-8(fp)
     4c0:	00000906 	br	4e8 <Seg7Enc+0x228>
	else if(n == 100000) res = 0x0b; // h.(100k)
     4c4:	e0ffff17 	ldw	r3,-4(fp)
     4c8:	008000b4 	movhi	r2,2
     4cc:	10a1a804 	addi	r2,r2,-31072
     4d0:	1880031e 	bne	r3,r2,4e0 <Seg7Enc+0x220>
     4d4:	008002c4 	movi	r2,11
     4d8:	e0bffe15 	stw	r2,-8(fp)
     4dc:	00000206 	br	4e8 <Seg7Enc+0x228>
	else res = 0xff;
     4e0:	00803fc4 	movi	r2,255
     4e4:	e0bffe15 	stw	r2,-8(fp)
	return res;
     4e8:	e0bffe17 	ldw	r2,-8(fp)
}
     4ec:	e037883a 	mov	sp,fp
     4f0:	df000017 	ldw	fp,0(sp)
     4f4:	dec00104 	addi	sp,sp,4
     4f8:	f800283a 	ret

000004fc <TurnOffSeg>:

void TurnOffSeg(int n) {
     4fc:	defffc04 	addi	sp,sp,-16
     500:	dfc00315 	stw	ra,12(sp)
     504:	df000215 	stw	fp,8(sp)
     508:	dc000115 	stw	r16,4(sp)
     50c:	df000204 	addi	fp,sp,8
     510:	e13ffe15 	stw	r4,-8(fp)
	if(n == 1) {
     514:	e0bffe17 	ldw	r2,-8(fp)
     518:	10800058 	cmpnei	r2,r2,1
     51c:	1000061e 	bne	r2,zero,538 <TurnOffSeg+0x3c>
		*(volatile unsigned long *)HEX3_BASE = Seg7Enc(-1);
     520:	04002034 	movhi	r16,128
     524:	84080004 	addi	r16,r16,8192
     528:	013fffc4 	movi	r4,-1
     52c:	00002c00 	call	2c0 <Seg7Enc>
     530:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(-1);
	} else {
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(-1);
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(-1);
	}
}
     534:	00001306 	br	584 <TurnOffSeg+0x88>
}

void TurnOffSeg(int n) {
	if(n == 1) {
		*(volatile unsigned long *)HEX3_BASE = Seg7Enc(-1);
	} else if(n == 2) {
     538:	e0bffe17 	ldw	r2,-8(fp)
     53c:	10800098 	cmpnei	r2,r2,2
     540:	1000061e 	bne	r2,zero,55c <TurnOffSeg+0x60>
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(-1);
     544:	04002034 	movhi	r16,128
     548:	84080404 	addi	r16,r16,8208
     54c:	013fffc4 	movi	r4,-1
     550:	00002c00 	call	2c0 <Seg7Enc>
     554:	80800015 	stw	r2,0(r16)
	} else {
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(-1);
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(-1);
	}
}
     558:	00000a06 	br	584 <TurnOffSeg+0x88>
	if(n == 1) {
		*(volatile unsigned long *)HEX3_BASE = Seg7Enc(-1);
	} else if(n == 2) {
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(-1);
	} else {
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(-1);
     55c:	04002034 	movhi	r16,128
     560:	84080804 	addi	r16,r16,8224
     564:	013fffc4 	movi	r4,-1
     568:	00002c00 	call	2c0 <Seg7Enc>
     56c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(-1);
     570:	04002034 	movhi	r16,128
     574:	84083004 	addi	r16,r16,8384
     578:	013fffc4 	movi	r4,-1
     57c:	00002c00 	call	2c0 <Seg7Enc>
     580:	80800015 	stw	r2,0(r16)
	}
}
     584:	0001883a 	nop
     588:	e6ffff04 	addi	sp,fp,-4
     58c:	dfc00217 	ldw	ra,8(sp)
     590:	df000117 	ldw	fp,4(sp)
     594:	dc000017 	ldw	r16,0(sp)
     598:	dec00304 	addi	sp,sp,12
     59c:	f800283a 	ret

000005a0 <DispPeriod>:

void DispPeriod(int byState) {
     5a0:	defffc04 	addi	sp,sp,-16
     5a4:	dfc00315 	stw	ra,12(sp)
     5a8:	df000215 	stw	fp,8(sp)
     5ac:	dc000115 	stw	r16,4(sp)
     5b0:	df000204 	addi	fp,sp,8
     5b4:	e13ffe15 	stw	r4,-8(fp)
	if((byState == 0 && Period[ChN] == 50000000) || (byState == 1 && state[2] == '0')) {
     5b8:	e0bffe17 	ldw	r2,-8(fp)
     5bc:	10000a1e 	bne	r2,zero,5e8 <DispPeriod+0x48>
     5c0:	d0e6e517 	ldw	r3,-25708(gp)
     5c4:	00800074 	movhi	r2,1
     5c8:	10b53e04 	addi	r2,r2,-11016
     5cc:	18c7883a 	add	r3,r3,r3
     5d0:	18c7883a 	add	r3,r3,r3
     5d4:	10c5883a 	add	r2,r2,r3
     5d8:	10c00017 	ldw	r3,0(r2)
     5dc:	0080bef4 	movhi	r2,763
     5e0:	10bc2004 	addi	r2,r2,-3968
     5e4:	18800926 	beq	r3,r2,60c <DispPeriod+0x6c>
     5e8:	e0bffe17 	ldw	r2,-8(fp)
     5ec:	10800058 	cmpnei	r2,r2,1
     5f0:	1000111e 	bne	r2,zero,638 <DispPeriod+0x98>
     5f4:	d0a6e683 	ldbu	r2,-25702(gp)
     5f8:	10803fcc 	andi	r2,r2,255
     5fc:	1080201c 	xori	r2,r2,128
     600:	10bfe004 	addi	r2,r2,-128
     604:	10800c18 	cmpnei	r2,r2,48
     608:	10000b1e 	bne	r2,zero,638 <DispPeriod+0x98>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(0);
     60c:	04002034 	movhi	r16,128
     610:	84080804 	addi	r16,r16,8224
     614:	0009883a 	mov	r4,zero
     618:	00002c00 	call	2c0 <Seg7Enc>
     61c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(1);
     620:	04002034 	movhi	r16,128
     624:	84083004 	addi	r16,r16,8384
     628:	01000044 	movi	r4,1
     62c:	00002c00 	call	2c0 <Seg7Enc>
     630:	80800015 	stw	r2,0(r16)
     634:	00021a06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 25000000) || (byState == 1 && state[2] == '1')) {
     638:	e0bffe17 	ldw	r2,-8(fp)
     63c:	10000a1e 	bne	r2,zero,668 <DispPeriod+0xc8>
     640:	d0e6e517 	ldw	r3,-25708(gp)
     644:	00800074 	movhi	r2,1
     648:	10b53e04 	addi	r2,r2,-11016
     64c:	18c7883a 	add	r3,r3,r3
     650:	18c7883a 	add	r3,r3,r3
     654:	10c5883a 	add	r2,r2,r3
     658:	10c00017 	ldw	r3,0(r2)
     65c:	00805f74 	movhi	r2,381
     660:	109e1004 	addi	r2,r2,30784
     664:	18800926 	beq	r3,r2,68c <DispPeriod+0xec>
     668:	e0bffe17 	ldw	r2,-8(fp)
     66c:	10800058 	cmpnei	r2,r2,1
     670:	1000111e 	bne	r2,zero,6b8 <DispPeriod+0x118>
     674:	d0a6e683 	ldbu	r2,-25702(gp)
     678:	10803fcc 	andi	r2,r2,255
     67c:	1080201c 	xori	r2,r2,128
     680:	10bfe004 	addi	r2,r2,-128
     684:	10800c58 	cmpnei	r2,r2,49
     688:	10000b1e 	bne	r2,zero,6b8 <DispPeriod+0x118>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(0);
     68c:	04002034 	movhi	r16,128
     690:	84080804 	addi	r16,r16,8224
     694:	0009883a 	mov	r4,zero
     698:	00002c00 	call	2c0 <Seg7Enc>
     69c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(2);
     6a0:	04002034 	movhi	r16,128
     6a4:	84083004 	addi	r16,r16,8384
     6a8:	01000084 	movi	r4,2
     6ac:	00002c00 	call	2c0 <Seg7Enc>
     6b0:	80800015 	stw	r2,0(r16)
     6b4:	0001fa06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 10000000) || (byState == 1 && state[2] == '2')) {
     6b8:	e0bffe17 	ldw	r2,-8(fp)
     6bc:	10000a1e 	bne	r2,zero,6e8 <DispPeriod+0x148>
     6c0:	d0e6e517 	ldw	r3,-25708(gp)
     6c4:	00800074 	movhi	r2,1
     6c8:	10b53e04 	addi	r2,r2,-11016
     6cc:	18c7883a 	add	r3,r3,r3
     6d0:	18c7883a 	add	r3,r3,r3
     6d4:	10c5883a 	add	r2,r2,r3
     6d8:	10c00017 	ldw	r3,0(r2)
     6dc:	00802674 	movhi	r2,153
     6e0:	10a5a004 	addi	r2,r2,-27008
     6e4:	18800926 	beq	r3,r2,70c <DispPeriod+0x16c>
     6e8:	e0bffe17 	ldw	r2,-8(fp)
     6ec:	10800058 	cmpnei	r2,r2,1
     6f0:	1000111e 	bne	r2,zero,738 <DispPeriod+0x198>
     6f4:	d0a6e683 	ldbu	r2,-25702(gp)
     6f8:	10803fcc 	andi	r2,r2,255
     6fc:	1080201c 	xori	r2,r2,128
     700:	10bfe004 	addi	r2,r2,-128
     704:	10800c98 	cmpnei	r2,r2,50
     708:	10000b1e 	bne	r2,zero,738 <DispPeriod+0x198>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(0);
     70c:	04002034 	movhi	r16,128
     710:	84080804 	addi	r16,r16,8224
     714:	0009883a 	mov	r4,zero
     718:	00002c00 	call	2c0 <Seg7Enc>
     71c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(5);
     720:	04002034 	movhi	r16,128
     724:	84083004 	addi	r16,r16,8384
     728:	01000144 	movi	r4,5
     72c:	00002c00 	call	2c0 <Seg7Enc>
     730:	80800015 	stw	r2,0(r16)
     734:	0001da06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 5000000) || (byState == 1 && state[2] == '3')) {
     738:	e0bffe17 	ldw	r2,-8(fp)
     73c:	10000a1e 	bne	r2,zero,768 <DispPeriod+0x1c8>
     740:	d0e6e517 	ldw	r3,-25708(gp)
     744:	00800074 	movhi	r2,1
     748:	10b53e04 	addi	r2,r2,-11016
     74c:	18c7883a 	add	r3,r3,r3
     750:	18c7883a 	add	r3,r3,r3
     754:	10c5883a 	add	r2,r2,r3
     758:	10c00017 	ldw	r3,0(r2)
     75c:	00801334 	movhi	r2,76
     760:	1092d004 	addi	r2,r2,19264
     764:	18800926 	beq	r3,r2,78c <DispPeriod+0x1ec>
     768:	e0bffe17 	ldw	r2,-8(fp)
     76c:	10800058 	cmpnei	r2,r2,1
     770:	1000111e 	bne	r2,zero,7b8 <DispPeriod+0x218>
     774:	d0a6e683 	ldbu	r2,-25702(gp)
     778:	10803fcc 	andi	r2,r2,255
     77c:	1080201c 	xori	r2,r2,128
     780:	10bfe004 	addi	r2,r2,-128
     784:	10800cd8 	cmpnei	r2,r2,51
     788:	10000b1e 	bne	r2,zero,7b8 <DispPeriod+0x218>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(1);
     78c:	04002034 	movhi	r16,128
     790:	84080804 	addi	r16,r16,8224
     794:	01000044 	movi	r4,1
     798:	00002c00 	call	2c0 <Seg7Enc>
     79c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(0);
     7a0:	04002034 	movhi	r16,128
     7a4:	84083004 	addi	r16,r16,8384
     7a8:	0009883a 	mov	r4,zero
     7ac:	00002c00 	call	2c0 <Seg7Enc>
     7b0:	80800015 	stw	r2,0(r16)
     7b4:	0001ba06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 2500000) || (byState == 1 && state[2] == '4')) {
     7b8:	e0bffe17 	ldw	r2,-8(fp)
     7bc:	10000a1e 	bne	r2,zero,7e8 <DispPeriod+0x248>
     7c0:	d0e6e517 	ldw	r3,-25708(gp)
     7c4:	00800074 	movhi	r2,1
     7c8:	10b53e04 	addi	r2,r2,-11016
     7cc:	18c7883a 	add	r3,r3,r3
     7d0:	18c7883a 	add	r3,r3,r3
     7d4:	10c5883a 	add	r2,r2,r3
     7d8:	10c00017 	ldw	r3,0(r2)
     7dc:	008009b4 	movhi	r2,38
     7e0:	10896804 	addi	r2,r2,9632
     7e4:	18800926 	beq	r3,r2,80c <DispPeriod+0x26c>
     7e8:	e0bffe17 	ldw	r2,-8(fp)
     7ec:	10800058 	cmpnei	r2,r2,1
     7f0:	1000111e 	bne	r2,zero,838 <DispPeriod+0x298>
     7f4:	d0a6e683 	ldbu	r2,-25702(gp)
     7f8:	10803fcc 	andi	r2,r2,255
     7fc:	1080201c 	xori	r2,r2,128
     800:	10bfe004 	addi	r2,r2,-128
     804:	10800d18 	cmpnei	r2,r2,52
     808:	10000b1e 	bne	r2,zero,838 <DispPeriod+0x298>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(2);
     80c:	04002034 	movhi	r16,128
     810:	84080804 	addi	r16,r16,8224
     814:	01000084 	movi	r4,2
     818:	00002c00 	call	2c0 <Seg7Enc>
     81c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(0);
     820:	04002034 	movhi	r16,128
     824:	84083004 	addi	r16,r16,8384
     828:	0009883a 	mov	r4,zero
     82c:	00002c00 	call	2c0 <Seg7Enc>
     830:	80800015 	stw	r2,0(r16)
     834:	00019a06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 1000000) || (byState == 1 && state[2] == '5')) {
     838:	e0bffe17 	ldw	r2,-8(fp)
     83c:	10000a1e 	bne	r2,zero,868 <DispPeriod+0x2c8>
     840:	d0e6e517 	ldw	r3,-25708(gp)
     844:	00800074 	movhi	r2,1
     848:	10b53e04 	addi	r2,r2,-11016
     84c:	18c7883a 	add	r3,r3,r3
     850:	18c7883a 	add	r3,r3,r3
     854:	10c5883a 	add	r2,r2,r3
     858:	10c00017 	ldw	r3,0(r2)
     85c:	008003f4 	movhi	r2,15
     860:	10909004 	addi	r2,r2,16960
     864:	18800926 	beq	r3,r2,88c <DispPeriod+0x2ec>
     868:	e0bffe17 	ldw	r2,-8(fp)
     86c:	10800058 	cmpnei	r2,r2,1
     870:	1000111e 	bne	r2,zero,8b8 <DispPeriod+0x318>
     874:	d0a6e683 	ldbu	r2,-25702(gp)
     878:	10803fcc 	andi	r2,r2,255
     87c:	1080201c 	xori	r2,r2,128
     880:	10bfe004 	addi	r2,r2,-128
     884:	10800d58 	cmpnei	r2,r2,53
     888:	10000b1e 	bne	r2,zero,8b8 <DispPeriod+0x318>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(5);
     88c:	04002034 	movhi	r16,128
     890:	84080804 	addi	r16,r16,8224
     894:	01000144 	movi	r4,5
     898:	00002c00 	call	2c0 <Seg7Enc>
     89c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(0);
     8a0:	04002034 	movhi	r16,128
     8a4:	84083004 	addi	r16,r16,8384
     8a8:	0009883a 	mov	r4,zero
     8ac:	00002c00 	call	2c0 <Seg7Enc>
     8b0:	80800015 	stw	r2,0(r16)
     8b4:	00017a06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 500000) || (byState == 1 && state[2] == '6')) {
     8b8:	e0bffe17 	ldw	r2,-8(fp)
     8bc:	10000a1e 	bne	r2,zero,8e8 <DispPeriod+0x348>
     8c0:	d0e6e517 	ldw	r3,-25708(gp)
     8c4:	00800074 	movhi	r2,1
     8c8:	10b53e04 	addi	r2,r2,-11016
     8cc:	18c7883a 	add	r3,r3,r3
     8d0:	18c7883a 	add	r3,r3,r3
     8d4:	10c5883a 	add	r2,r2,r3
     8d8:	10c00017 	ldw	r3,0(r2)
     8dc:	00800234 	movhi	r2,8
     8e0:	10a84804 	addi	r2,r2,-24288
     8e4:	18800926 	beq	r3,r2,90c <DispPeriod+0x36c>
     8e8:	e0bffe17 	ldw	r2,-8(fp)
     8ec:	10800058 	cmpnei	r2,r2,1
     8f0:	1000111e 	bne	r2,zero,938 <DispPeriod+0x398>
     8f4:	d0a6e683 	ldbu	r2,-25702(gp)
     8f8:	10803fcc 	andi	r2,r2,255
     8fc:	1080201c 	xori	r2,r2,128
     900:	10bfe004 	addi	r2,r2,-128
     904:	10800d98 	cmpnei	r2,r2,54
     908:	10000b1e 	bne	r2,zero,938 <DispPeriod+0x398>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(1);
     90c:	04002034 	movhi	r16,128
     910:	84080804 	addi	r16,r16,8224
     914:	01000044 	movi	r4,1
     918:	00002c00 	call	2c0 <Seg7Enc>
     91c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(100);
     920:	04002034 	movhi	r16,128
     924:	84083004 	addi	r16,r16,8384
     928:	01001904 	movi	r4,100
     92c:	00002c00 	call	2c0 <Seg7Enc>
     930:	80800015 	stw	r2,0(r16)
     934:	00015a06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 250000) || (byState == 1 && state[2] == '7')) {
     938:	e0bffe17 	ldw	r2,-8(fp)
     93c:	10000a1e 	bne	r2,zero,968 <DispPeriod+0x3c8>
     940:	d0e6e517 	ldw	r3,-25708(gp)
     944:	00800074 	movhi	r2,1
     948:	10b53e04 	addi	r2,r2,-11016
     94c:	18c7883a 	add	r3,r3,r3
     950:	18c7883a 	add	r3,r3,r3
     954:	10c5883a 	add	r2,r2,r3
     958:	10c00017 	ldw	r3,0(r2)
     95c:	00800134 	movhi	r2,4
     960:	10b42404 	addi	r2,r2,-12144
     964:	18800926 	beq	r3,r2,98c <DispPeriod+0x3ec>
     968:	e0bffe17 	ldw	r2,-8(fp)
     96c:	10800058 	cmpnei	r2,r2,1
     970:	1000111e 	bne	r2,zero,9b8 <DispPeriod+0x418>
     974:	d0a6e683 	ldbu	r2,-25702(gp)
     978:	10803fcc 	andi	r2,r2,255
     97c:	1080201c 	xori	r2,r2,128
     980:	10bfe004 	addi	r2,r2,-128
     984:	10800dd8 	cmpnei	r2,r2,55
     988:	10000b1e 	bne	r2,zero,9b8 <DispPeriod+0x418>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(2);
     98c:	04002034 	movhi	r16,128
     990:	84080804 	addi	r16,r16,8224
     994:	01000084 	movi	r4,2
     998:	00002c00 	call	2c0 <Seg7Enc>
     99c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(100);
     9a0:	04002034 	movhi	r16,128
     9a4:	84083004 	addi	r16,r16,8384
     9a8:	01001904 	movi	r4,100
     9ac:	00002c00 	call	2c0 <Seg7Enc>
     9b0:	80800015 	stw	r2,0(r16)
     9b4:	00013a06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 100000) || (byState == 1 && state[2] == '8')) {
     9b8:	e0bffe17 	ldw	r2,-8(fp)
     9bc:	10000a1e 	bne	r2,zero,9e8 <DispPeriod+0x448>
     9c0:	d0e6e517 	ldw	r3,-25708(gp)
     9c4:	00800074 	movhi	r2,1
     9c8:	10b53e04 	addi	r2,r2,-11016
     9cc:	18c7883a 	add	r3,r3,r3
     9d0:	18c7883a 	add	r3,r3,r3
     9d4:	10c5883a 	add	r2,r2,r3
     9d8:	10c00017 	ldw	r3,0(r2)
     9dc:	008000b4 	movhi	r2,2
     9e0:	10a1a804 	addi	r2,r2,-31072
     9e4:	18800926 	beq	r3,r2,a0c <DispPeriod+0x46c>
     9e8:	e0bffe17 	ldw	r2,-8(fp)
     9ec:	10800058 	cmpnei	r2,r2,1
     9f0:	1000111e 	bne	r2,zero,a38 <DispPeriod+0x498>
     9f4:	d0a6e683 	ldbu	r2,-25702(gp)
     9f8:	10803fcc 	andi	r2,r2,255
     9fc:	1080201c 	xori	r2,r2,128
     a00:	10bfe004 	addi	r2,r2,-128
     a04:	10800e18 	cmpnei	r2,r2,56
     a08:	10000b1e 	bne	r2,zero,a38 <DispPeriod+0x498>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(5);
     a0c:	04002034 	movhi	r16,128
     a10:	84080804 	addi	r16,r16,8224
     a14:	01000144 	movi	r4,5
     a18:	00002c00 	call	2c0 <Seg7Enc>
     a1c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(100);
     a20:	04002034 	movhi	r16,128
     a24:	84083004 	addi	r16,r16,8384
     a28:	01001904 	movi	r4,100
     a2c:	00002c00 	call	2c0 <Seg7Enc>
     a30:	80800015 	stw	r2,0(r16)
     a34:	00011a06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 50000) || (byState == 1 && state[2] == '9')) {
     a38:	e0bffe17 	ldw	r2,-8(fp)
     a3c:	1000091e 	bne	r2,zero,a64 <DispPeriod+0x4c4>
     a40:	d0e6e517 	ldw	r3,-25708(gp)
     a44:	00800074 	movhi	r2,1
     a48:	10b53e04 	addi	r2,r2,-11016
     a4c:	18c7883a 	add	r3,r3,r3
     a50:	18c7883a 	add	r3,r3,r3
     a54:	10c5883a 	add	r2,r2,r3
     a58:	10c00017 	ldw	r3,0(r2)
     a5c:	00b0d414 	movui	r2,50000
     a60:	18800926 	beq	r3,r2,a88 <DispPeriod+0x4e8>
     a64:	e0bffe17 	ldw	r2,-8(fp)
     a68:	10800058 	cmpnei	r2,r2,1
     a6c:	1000111e 	bne	r2,zero,ab4 <DispPeriod+0x514>
     a70:	d0a6e683 	ldbu	r2,-25702(gp)
     a74:	10803fcc 	andi	r2,r2,255
     a78:	1080201c 	xori	r2,r2,128
     a7c:	10bfe004 	addi	r2,r2,-128
     a80:	10800e58 	cmpnei	r2,r2,57
     a84:	10000b1e 	bne	r2,zero,ab4 <DispPeriod+0x514>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(0);
     a88:	04002034 	movhi	r16,128
     a8c:	84080804 	addi	r16,r16,8224
     a90:	0009883a 	mov	r4,zero
     a94:	00002c00 	call	2c0 <Seg7Enc>
     a98:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(1000);
     a9c:	04002034 	movhi	r16,128
     aa0:	84083004 	addi	r16,r16,8384
     aa4:	0100fa04 	movi	r4,1000
     aa8:	00002c00 	call	2c0 <Seg7Enc>
     aac:	80800015 	stw	r2,0(r16)
     ab0:	0000fb06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 25000) || (byState == 1 && state[2] == 'a')) {
     ab4:	e0bffe17 	ldw	r2,-8(fp)
     ab8:	1000091e 	bne	r2,zero,ae0 <DispPeriod+0x540>
     abc:	d0e6e517 	ldw	r3,-25708(gp)
     ac0:	00800074 	movhi	r2,1
     ac4:	10b53e04 	addi	r2,r2,-11016
     ac8:	18c7883a 	add	r3,r3,r3
     acc:	18c7883a 	add	r3,r3,r3
     ad0:	10c5883a 	add	r2,r2,r3
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	10986a20 	cmpeqi	r2,r2,25000
     adc:	1000091e 	bne	r2,zero,b04 <DispPeriod+0x564>
     ae0:	e0bffe17 	ldw	r2,-8(fp)
     ae4:	10800058 	cmpnei	r2,r2,1
     ae8:	1000111e 	bne	r2,zero,b30 <DispPeriod+0x590>
     aec:	d0a6e683 	ldbu	r2,-25702(gp)
     af0:	10803fcc 	andi	r2,r2,255
     af4:	1080201c 	xori	r2,r2,128
     af8:	10bfe004 	addi	r2,r2,-128
     afc:	10801858 	cmpnei	r2,r2,97
     b00:	10000b1e 	bne	r2,zero,b30 <DispPeriod+0x590>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(0);
     b04:	04002034 	movhi	r16,128
     b08:	84080804 	addi	r16,r16,8224
     b0c:	0009883a 	mov	r4,zero
     b10:	00002c00 	call	2c0 <Seg7Enc>
     b14:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(2000);
     b18:	04002034 	movhi	r16,128
     b1c:	84083004 	addi	r16,r16,8384
     b20:	0101f404 	movi	r4,2000
     b24:	00002c00 	call	2c0 <Seg7Enc>
     b28:	80800015 	stw	r2,0(r16)
     b2c:	0000dc06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 10000) || (byState == 1 && state[2] == 'b')) {
     b30:	e0bffe17 	ldw	r2,-8(fp)
     b34:	1000091e 	bne	r2,zero,b5c <DispPeriod+0x5bc>
     b38:	d0e6e517 	ldw	r3,-25708(gp)
     b3c:	00800074 	movhi	r2,1
     b40:	10b53e04 	addi	r2,r2,-11016
     b44:	18c7883a 	add	r3,r3,r3
     b48:	18c7883a 	add	r3,r3,r3
     b4c:	10c5883a 	add	r2,r2,r3
     b50:	10800017 	ldw	r2,0(r2)
     b54:	1089c420 	cmpeqi	r2,r2,10000
     b58:	1000091e 	bne	r2,zero,b80 <DispPeriod+0x5e0>
     b5c:	e0bffe17 	ldw	r2,-8(fp)
     b60:	10800058 	cmpnei	r2,r2,1
     b64:	1000111e 	bne	r2,zero,bac <DispPeriod+0x60c>
     b68:	d0a6e683 	ldbu	r2,-25702(gp)
     b6c:	10803fcc 	andi	r2,r2,255
     b70:	1080201c 	xori	r2,r2,128
     b74:	10bfe004 	addi	r2,r2,-128
     b78:	10801898 	cmpnei	r2,r2,98
     b7c:	10000b1e 	bne	r2,zero,bac <DispPeriod+0x60c>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(0);
     b80:	04002034 	movhi	r16,128
     b84:	84080804 	addi	r16,r16,8224
     b88:	0009883a 	mov	r4,zero
     b8c:	00002c00 	call	2c0 <Seg7Enc>
     b90:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(5000);
     b94:	04002034 	movhi	r16,128
     b98:	84083004 	addi	r16,r16,8384
     b9c:	0104e204 	movi	r4,5000
     ba0:	00002c00 	call	2c0 <Seg7Enc>
     ba4:	80800015 	stw	r2,0(r16)
     ba8:	0000bd06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 5000) || (byState == 1 && state[2] == 'c')) {
     bac:	e0bffe17 	ldw	r2,-8(fp)
     bb0:	1000091e 	bne	r2,zero,bd8 <DispPeriod+0x638>
     bb4:	d0e6e517 	ldw	r3,-25708(gp)
     bb8:	00800074 	movhi	r2,1
     bbc:	10b53e04 	addi	r2,r2,-11016
     bc0:	18c7883a 	add	r3,r3,r3
     bc4:	18c7883a 	add	r3,r3,r3
     bc8:	10c5883a 	add	r2,r2,r3
     bcc:	10800017 	ldw	r2,0(r2)
     bd0:	1084e220 	cmpeqi	r2,r2,5000
     bd4:	1000091e 	bne	r2,zero,bfc <DispPeriod+0x65c>
     bd8:	e0bffe17 	ldw	r2,-8(fp)
     bdc:	10800058 	cmpnei	r2,r2,1
     be0:	1000111e 	bne	r2,zero,c28 <DispPeriod+0x688>
     be4:	d0a6e683 	ldbu	r2,-25702(gp)
     be8:	10803fcc 	andi	r2,r2,255
     bec:	1080201c 	xori	r2,r2,128
     bf0:	10bfe004 	addi	r2,r2,-128
     bf4:	108018d8 	cmpnei	r2,r2,99
     bf8:	10000b1e 	bne	r2,zero,c28 <DispPeriod+0x688>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(1);
     bfc:	04002034 	movhi	r16,128
     c00:	84080804 	addi	r16,r16,8224
     c04:	01000044 	movi	r4,1
     c08:	00002c00 	call	2c0 <Seg7Enc>
     c0c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(10000);
     c10:	04002034 	movhi	r16,128
     c14:	84083004 	addi	r16,r16,8384
     c18:	0109c404 	movi	r4,10000
     c1c:	00002c00 	call	2c0 <Seg7Enc>
     c20:	80800015 	stw	r2,0(r16)
     c24:	00009e06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 2500) || (byState == 1 && state[2] == 'd')) {
     c28:	e0bffe17 	ldw	r2,-8(fp)
     c2c:	1000091e 	bne	r2,zero,c54 <DispPeriod+0x6b4>
     c30:	d0e6e517 	ldw	r3,-25708(gp)
     c34:	00800074 	movhi	r2,1
     c38:	10b53e04 	addi	r2,r2,-11016
     c3c:	18c7883a 	add	r3,r3,r3
     c40:	18c7883a 	add	r3,r3,r3
     c44:	10c5883a 	add	r2,r2,r3
     c48:	10800017 	ldw	r2,0(r2)
     c4c:	10827120 	cmpeqi	r2,r2,2500
     c50:	1000091e 	bne	r2,zero,c78 <DispPeriod+0x6d8>
     c54:	e0bffe17 	ldw	r2,-8(fp)
     c58:	10800058 	cmpnei	r2,r2,1
     c5c:	1000111e 	bne	r2,zero,ca4 <DispPeriod+0x704>
     c60:	d0a6e683 	ldbu	r2,-25702(gp)
     c64:	10803fcc 	andi	r2,r2,255
     c68:	1080201c 	xori	r2,r2,128
     c6c:	10bfe004 	addi	r2,r2,-128
     c70:	10801918 	cmpnei	r2,r2,100
     c74:	10000b1e 	bne	r2,zero,ca4 <DispPeriod+0x704>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(2);
     c78:	04002034 	movhi	r16,128
     c7c:	84080804 	addi	r16,r16,8224
     c80:	01000084 	movi	r4,2
     c84:	00002c00 	call	2c0 <Seg7Enc>
     c88:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(10000);
     c8c:	04002034 	movhi	r16,128
     c90:	84083004 	addi	r16,r16,8384
     c94:	0109c404 	movi	r4,10000
     c98:	00002c00 	call	2c0 <Seg7Enc>
     c9c:	80800015 	stw	r2,0(r16)
     ca0:	00007f06 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 1000) || (byState == 1 && state[2] == 'e')) {
     ca4:	e0bffe17 	ldw	r2,-8(fp)
     ca8:	1000091e 	bne	r2,zero,cd0 <DispPeriod+0x730>
     cac:	d0e6e517 	ldw	r3,-25708(gp)
     cb0:	00800074 	movhi	r2,1
     cb4:	10b53e04 	addi	r2,r2,-11016
     cb8:	18c7883a 	add	r3,r3,r3
     cbc:	18c7883a 	add	r3,r3,r3
     cc0:	10c5883a 	add	r2,r2,r3
     cc4:	10800017 	ldw	r2,0(r2)
     cc8:	1080fa20 	cmpeqi	r2,r2,1000
     ccc:	1000091e 	bne	r2,zero,cf4 <DispPeriod+0x754>
     cd0:	e0bffe17 	ldw	r2,-8(fp)
     cd4:	10800058 	cmpnei	r2,r2,1
     cd8:	1000111e 	bne	r2,zero,d20 <DispPeriod+0x780>
     cdc:	d0a6e683 	ldbu	r2,-25702(gp)
     ce0:	10803fcc 	andi	r2,r2,255
     ce4:	1080201c 	xori	r2,r2,128
     ce8:	10bfe004 	addi	r2,r2,-128
     cec:	10801958 	cmpnei	r2,r2,101
     cf0:	10000b1e 	bne	r2,zero,d20 <DispPeriod+0x780>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(5);
     cf4:	04002034 	movhi	r16,128
     cf8:	84080804 	addi	r16,r16,8224
     cfc:	01000144 	movi	r4,5
     d00:	00002c00 	call	2c0 <Seg7Enc>
     d04:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(10000);
     d08:	04002034 	movhi	r16,128
     d0c:	84083004 	addi	r16,r16,8384
     d10:	0109c404 	movi	r4,10000
     d14:	00002c00 	call	2c0 <Seg7Enc>
     d18:	80800015 	stw	r2,0(r16)
     d1c:	00006006 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 500) || (byState == 1 && state[2] == 'f')) {
     d20:	e0bffe17 	ldw	r2,-8(fp)
     d24:	1000091e 	bne	r2,zero,d4c <DispPeriod+0x7ac>
     d28:	d0e6e517 	ldw	r3,-25708(gp)
     d2c:	00800074 	movhi	r2,1
     d30:	10b53e04 	addi	r2,r2,-11016
     d34:	18c7883a 	add	r3,r3,r3
     d38:	18c7883a 	add	r3,r3,r3
     d3c:	10c5883a 	add	r2,r2,r3
     d40:	10800017 	ldw	r2,0(r2)
     d44:	10807d20 	cmpeqi	r2,r2,500
     d48:	1000091e 	bne	r2,zero,d70 <DispPeriod+0x7d0>
     d4c:	e0bffe17 	ldw	r2,-8(fp)
     d50:	10800058 	cmpnei	r2,r2,1
     d54:	1000121e 	bne	r2,zero,da0 <DispPeriod+0x800>
     d58:	d0a6e683 	ldbu	r2,-25702(gp)
     d5c:	10803fcc 	andi	r2,r2,255
     d60:	1080201c 	xori	r2,r2,128
     d64:	10bfe004 	addi	r2,r2,-128
     d68:	10801998 	cmpnei	r2,r2,102
     d6c:	10000c1e 	bne	r2,zero,da0 <DispPeriod+0x800>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(1);
     d70:	04002034 	movhi	r16,128
     d74:	84080804 	addi	r16,r16,8224
     d78:	01000044 	movi	r4,1
     d7c:	00002c00 	call	2c0 <Seg7Enc>
     d80:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(100000);
     d84:	04002034 	movhi	r16,128
     d88:	84083004 	addi	r16,r16,8384
     d8c:	010000b4 	movhi	r4,2
     d90:	2121a804 	addi	r4,r4,-31072
     d94:	00002c00 	call	2c0 <Seg7Enc>
     d98:	80800015 	stw	r2,0(r16)
     d9c:	00004006 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 250) || (byState == 1 && state[2] == 'g')) {
     da0:	e0bffe17 	ldw	r2,-8(fp)
     da4:	1000091e 	bne	r2,zero,dcc <DispPeriod+0x82c>
     da8:	d0e6e517 	ldw	r3,-25708(gp)
     dac:	00800074 	movhi	r2,1
     db0:	10b53e04 	addi	r2,r2,-11016
     db4:	18c7883a 	add	r3,r3,r3
     db8:	18c7883a 	add	r3,r3,r3
     dbc:	10c5883a 	add	r2,r2,r3
     dc0:	10800017 	ldw	r2,0(r2)
     dc4:	10803ea0 	cmpeqi	r2,r2,250
     dc8:	1000091e 	bne	r2,zero,df0 <DispPeriod+0x850>
     dcc:	e0bffe17 	ldw	r2,-8(fp)
     dd0:	10800058 	cmpnei	r2,r2,1
     dd4:	1000121e 	bne	r2,zero,e20 <DispPeriod+0x880>
     dd8:	d0a6e683 	ldbu	r2,-25702(gp)
     ddc:	10803fcc 	andi	r2,r2,255
     de0:	1080201c 	xori	r2,r2,128
     de4:	10bfe004 	addi	r2,r2,-128
     de8:	108019d8 	cmpnei	r2,r2,103
     dec:	10000c1e 	bne	r2,zero,e20 <DispPeriod+0x880>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(2);
     df0:	04002034 	movhi	r16,128
     df4:	84080804 	addi	r16,r16,8224
     df8:	01000084 	movi	r4,2
     dfc:	00002c00 	call	2c0 <Seg7Enc>
     e00:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(100000);
     e04:	04002034 	movhi	r16,128
     e08:	84083004 	addi	r16,r16,8384
     e0c:	010000b4 	movhi	r4,2
     e10:	2121a804 	addi	r4,r4,-31072
     e14:	00002c00 	call	2c0 <Seg7Enc>
     e18:	80800015 	stw	r2,0(r16)
     e1c:	00002006 	br	ea0 <DispPeriod+0x900>
	} else if((byState == 0 && Period[ChN] == 100) || (byState == 1 && state[2] == 'h')) {
     e20:	e0bffe17 	ldw	r2,-8(fp)
     e24:	1000091e 	bne	r2,zero,e4c <DispPeriod+0x8ac>
     e28:	d0e6e517 	ldw	r3,-25708(gp)
     e2c:	00800074 	movhi	r2,1
     e30:	10b53e04 	addi	r2,r2,-11016
     e34:	18c7883a 	add	r3,r3,r3
     e38:	18c7883a 	add	r3,r3,r3
     e3c:	10c5883a 	add	r2,r2,r3
     e40:	10800017 	ldw	r2,0(r2)
     e44:	10801920 	cmpeqi	r2,r2,100
     e48:	1000091e 	bne	r2,zero,e70 <DispPeriod+0x8d0>
     e4c:	e0bffe17 	ldw	r2,-8(fp)
     e50:	10800058 	cmpnei	r2,r2,1
     e54:	1000121e 	bne	r2,zero,ea0 <DispPeriod+0x900>
     e58:	d0a6e683 	ldbu	r2,-25702(gp)
     e5c:	10803fcc 	andi	r2,r2,255
     e60:	1080201c 	xori	r2,r2,128
     e64:	10bfe004 	addi	r2,r2,-128
     e68:	10801a18 	cmpnei	r2,r2,104
     e6c:	10000c1e 	bne	r2,zero,ea0 <DispPeriod+0x900>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(5);
     e70:	04002034 	movhi	r16,128
     e74:	84080804 	addi	r16,r16,8224
     e78:	01000144 	movi	r4,5
     e7c:	00002c00 	call	2c0 <Seg7Enc>
     e80:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(100000);
     e84:	04002034 	movhi	r16,128
     e88:	84083004 	addi	r16,r16,8384
     e8c:	010000b4 	movhi	r4,2
     e90:	2121a804 	addi	r4,r4,-31072
     e94:	00002c00 	call	2c0 <Seg7Enc>
     e98:	80800015 	stw	r2,0(r16)
	}
}
     e9c:	00000006 	br	ea0 <DispPeriod+0x900>
     ea0:	0001883a 	nop
     ea4:	e6ffff04 	addi	sp,fp,-4
     ea8:	dfc00217 	ldw	ra,8(sp)
     eac:	df000117 	ldw	fp,4(sp)
     eb0:	dc000017 	ldw	r16,0(sp)
     eb4:	dec00304 	addi	sp,sp,12
     eb8:	f800283a 	ret

00000ebc <DispDuty>:

void DispDuty(int byState) {
     ebc:	defffc04 	addi	sp,sp,-16
     ec0:	dfc00315 	stw	ra,12(sp)
     ec4:	df000215 	stw	fp,8(sp)
     ec8:	dc000115 	stw	r16,4(sp)
     ecc:	df000204 	addi	fp,sp,8
     ed0:	e13ffe15 	stw	r4,-8(fp)
	if((byState == 0 && Duty[ChN] == 1) || (byState == 1 && state[2] == '0')) {
     ed4:	e0bffe17 	ldw	r2,-8(fp)
     ed8:	1000091e 	bne	r2,zero,f00 <DispDuty+0x44>
     edc:	d0e6e517 	ldw	r3,-25708(gp)
     ee0:	00800074 	movhi	r2,1
     ee4:	10b53604 	addi	r2,r2,-11048
     ee8:	18c7883a 	add	r3,r3,r3
     eec:	18c7883a 	add	r3,r3,r3
     ef0:	10c5883a 	add	r2,r2,r3
     ef4:	10800017 	ldw	r2,0(r2)
     ef8:	10800060 	cmpeqi	r2,r2,1
     efc:	1000091e 	bne	r2,zero,f24 <DispDuty+0x68>
     f00:	e0bffe17 	ldw	r2,-8(fp)
     f04:	10800058 	cmpnei	r2,r2,1
     f08:	1000111e 	bne	r2,zero,f50 <DispDuty+0x94>
     f0c:	d0a6e683 	ldbu	r2,-25702(gp)
     f10:	10803fcc 	andi	r2,r2,255
     f14:	1080201c 	xori	r2,r2,128
     f18:	10bfe004 	addi	r2,r2,-128
     f1c:	10800c18 	cmpnei	r2,r2,48
     f20:	10000b1e 	bne	r2,zero,f50 <DispDuty+0x94>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(1);
     f24:	04002034 	movhi	r16,128
     f28:	84080804 	addi	r16,r16,8224
     f2c:	01000044 	movi	r4,1
     f30:	00002c00 	call	2c0 <Seg7Enc>
     f34:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(0);
     f38:	04002034 	movhi	r16,128
     f3c:	84083004 	addi	r16,r16,8384
     f40:	0009883a 	mov	r4,zero
     f44:	00002c00 	call	2c0 <Seg7Enc>
     f48:	80800015 	stw	r2,0(r16)
     f4c:	00007c06 	br	1140 <DispDuty+0x284>
	} else if((byState == 0 && Duty[ChN] == 2) || (byState == 1 && state[2] == '1')) {
     f50:	e0bffe17 	ldw	r2,-8(fp)
     f54:	1000091e 	bne	r2,zero,f7c <DispDuty+0xc0>
     f58:	d0e6e517 	ldw	r3,-25708(gp)
     f5c:	00800074 	movhi	r2,1
     f60:	10b53604 	addi	r2,r2,-11048
     f64:	18c7883a 	add	r3,r3,r3
     f68:	18c7883a 	add	r3,r3,r3
     f6c:	10c5883a 	add	r2,r2,r3
     f70:	10800017 	ldw	r2,0(r2)
     f74:	108000a0 	cmpeqi	r2,r2,2
     f78:	1000091e 	bne	r2,zero,fa0 <DispDuty+0xe4>
     f7c:	e0bffe17 	ldw	r2,-8(fp)
     f80:	10800058 	cmpnei	r2,r2,1
     f84:	1000111e 	bne	r2,zero,fcc <DispDuty+0x110>
     f88:	d0a6e683 	ldbu	r2,-25702(gp)
     f8c:	10803fcc 	andi	r2,r2,255
     f90:	1080201c 	xori	r2,r2,128
     f94:	10bfe004 	addi	r2,r2,-128
     f98:	10800c58 	cmpnei	r2,r2,49
     f9c:	10000b1e 	bne	r2,zero,fcc <DispDuty+0x110>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(2);
     fa0:	04002034 	movhi	r16,128
     fa4:	84080804 	addi	r16,r16,8224
     fa8:	01000084 	movi	r4,2
     fac:	00002c00 	call	2c0 <Seg7Enc>
     fb0:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(0);
     fb4:	04002034 	movhi	r16,128
     fb8:	84083004 	addi	r16,r16,8384
     fbc:	0009883a 	mov	r4,zero
     fc0:	00002c00 	call	2c0 <Seg7Enc>
     fc4:	80800015 	stw	r2,0(r16)
     fc8:	00005d06 	br	1140 <DispDuty+0x284>
	} else if((byState == 0 && Duty[ChN] == 3) || (byState == 1 && state[2] == '2')) {
     fcc:	e0bffe17 	ldw	r2,-8(fp)
     fd0:	1000091e 	bne	r2,zero,ff8 <DispDuty+0x13c>
     fd4:	d0e6e517 	ldw	r3,-25708(gp)
     fd8:	00800074 	movhi	r2,1
     fdc:	10b53604 	addi	r2,r2,-11048
     fe0:	18c7883a 	add	r3,r3,r3
     fe4:	18c7883a 	add	r3,r3,r3
     fe8:	10c5883a 	add	r2,r2,r3
     fec:	10800017 	ldw	r2,0(r2)
     ff0:	108000e0 	cmpeqi	r2,r2,3
     ff4:	1000091e 	bne	r2,zero,101c <DispDuty+0x160>
     ff8:	e0bffe17 	ldw	r2,-8(fp)
     ffc:	10800058 	cmpnei	r2,r2,1
    1000:	1000111e 	bne	r2,zero,1048 <DispDuty+0x18c>
    1004:	d0a6e683 	ldbu	r2,-25702(gp)
    1008:	10803fcc 	andi	r2,r2,255
    100c:	1080201c 	xori	r2,r2,128
    1010:	10bfe004 	addi	r2,r2,-128
    1014:	10800c98 	cmpnei	r2,r2,50
    1018:	10000b1e 	bne	r2,zero,1048 <DispDuty+0x18c>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(3);
    101c:	04002034 	movhi	r16,128
    1020:	84080804 	addi	r16,r16,8224
    1024:	010000c4 	movi	r4,3
    1028:	00002c00 	call	2c0 <Seg7Enc>
    102c:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(0);
    1030:	04002034 	movhi	r16,128
    1034:	84083004 	addi	r16,r16,8384
    1038:	0009883a 	mov	r4,zero
    103c:	00002c00 	call	2c0 <Seg7Enc>
    1040:	80800015 	stw	r2,0(r16)
    1044:	00003e06 	br	1140 <DispDuty+0x284>
	} else if((byState == 0 && Duty[ChN] == 4) || (byState == 1 && state[2] == '3')) {
    1048:	e0bffe17 	ldw	r2,-8(fp)
    104c:	1000091e 	bne	r2,zero,1074 <DispDuty+0x1b8>
    1050:	d0e6e517 	ldw	r3,-25708(gp)
    1054:	00800074 	movhi	r2,1
    1058:	10b53604 	addi	r2,r2,-11048
    105c:	18c7883a 	add	r3,r3,r3
    1060:	18c7883a 	add	r3,r3,r3
    1064:	10c5883a 	add	r2,r2,r3
    1068:	10800017 	ldw	r2,0(r2)
    106c:	10800120 	cmpeqi	r2,r2,4
    1070:	1000091e 	bne	r2,zero,1098 <DispDuty+0x1dc>
    1074:	e0bffe17 	ldw	r2,-8(fp)
    1078:	10800058 	cmpnei	r2,r2,1
    107c:	1000111e 	bne	r2,zero,10c4 <DispDuty+0x208>
    1080:	d0a6e683 	ldbu	r2,-25702(gp)
    1084:	10803fcc 	andi	r2,r2,255
    1088:	1080201c 	xori	r2,r2,128
    108c:	10bfe004 	addi	r2,r2,-128
    1090:	10800cd8 	cmpnei	r2,r2,51
    1094:	10000b1e 	bne	r2,zero,10c4 <DispDuty+0x208>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(4);
    1098:	04002034 	movhi	r16,128
    109c:	84080804 	addi	r16,r16,8224
    10a0:	01000104 	movi	r4,4
    10a4:	00002c00 	call	2c0 <Seg7Enc>
    10a8:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(0);
    10ac:	04002034 	movhi	r16,128
    10b0:	84083004 	addi	r16,r16,8384
    10b4:	0009883a 	mov	r4,zero
    10b8:	00002c00 	call	2c0 <Seg7Enc>
    10bc:	80800015 	stw	r2,0(r16)
    10c0:	00001f06 	br	1140 <DispDuty+0x284>
	} else if((byState == 0 && Duty[ChN] == 5) || (byState == 1 && state[2] == '4')) {
    10c4:	e0bffe17 	ldw	r2,-8(fp)
    10c8:	1000091e 	bne	r2,zero,10f0 <DispDuty+0x234>
    10cc:	d0e6e517 	ldw	r3,-25708(gp)
    10d0:	00800074 	movhi	r2,1
    10d4:	10b53604 	addi	r2,r2,-11048
    10d8:	18c7883a 	add	r3,r3,r3
    10dc:	18c7883a 	add	r3,r3,r3
    10e0:	10c5883a 	add	r2,r2,r3
    10e4:	10800017 	ldw	r2,0(r2)
    10e8:	10800160 	cmpeqi	r2,r2,5
    10ec:	1000091e 	bne	r2,zero,1114 <DispDuty+0x258>
    10f0:	e0bffe17 	ldw	r2,-8(fp)
    10f4:	10800058 	cmpnei	r2,r2,1
    10f8:	1000111e 	bne	r2,zero,1140 <DispDuty+0x284>
    10fc:	d0a6e683 	ldbu	r2,-25702(gp)
    1100:	10803fcc 	andi	r2,r2,255
    1104:	1080201c 	xori	r2,r2,128
    1108:	10bfe004 	addi	r2,r2,-128
    110c:	10800d18 	cmpnei	r2,r2,52
    1110:	10000b1e 	bne	r2,zero,1140 <DispDuty+0x284>
		*(volatile unsigned long *)HEX1_BASE = Seg7Enc(5);
    1114:	04002034 	movhi	r16,128
    1118:	84080804 	addi	r16,r16,8224
    111c:	01000144 	movi	r4,5
    1120:	00002c00 	call	2c0 <Seg7Enc>
    1124:	80800015 	stw	r2,0(r16)
		*(volatile unsigned long *)HEX0_BASE = Seg7Enc(0);
    1128:	04002034 	movhi	r16,128
    112c:	84083004 	addi	r16,r16,8384
    1130:	0009883a 	mov	r4,zero
    1134:	00002c00 	call	2c0 <Seg7Enc>
    1138:	80800015 	stw	r2,0(r16)
	}
}
    113c:	00000006 	br	1140 <DispDuty+0x284>
    1140:	0001883a 	nop
    1144:	e6ffff04 	addi	sp,fp,-4
    1148:	dfc00217 	ldw	ra,8(sp)
    114c:	df000117 	ldw	fp,4(sp)
    1150:	dc000017 	ldw	r16,0(sp)
    1154:	dec00304 	addi	sp,sp,12
    1158:	f800283a 	ret

0000115c <DispChN>:

void DispChN(int byState) {
    115c:	defffc04 	addi	sp,sp,-16
    1160:	dfc00315 	stw	ra,12(sp)
    1164:	df000215 	stw	fp,8(sp)
    1168:	dc000115 	stw	r16,4(sp)
    116c:	df000204 	addi	fp,sp,8
    1170:	e13ffe15 	stw	r4,-8(fp)
	if((byState == 0 && ChN == 0) || (byState == 1 && state[2] == '0')) {
    1174:	e0bffe17 	ldw	r2,-8(fp)
    1178:	1000021e 	bne	r2,zero,1184 <DispChN+0x28>
    117c:	d0a6e517 	ldw	r2,-25708(gp)
    1180:	10000926 	beq	r2,zero,11a8 <DispChN+0x4c>
    1184:	e0bffe17 	ldw	r2,-8(fp)
    1188:	10800058 	cmpnei	r2,r2,1
    118c:	10000c1e 	bne	r2,zero,11c0 <DispChN+0x64>
    1190:	d0a6e683 	ldbu	r2,-25702(gp)
    1194:	10803fcc 	andi	r2,r2,255
    1198:	1080201c 	xori	r2,r2,128
    119c:	10bfe004 	addi	r2,r2,-128
    11a0:	10800c18 	cmpnei	r2,r2,48
    11a4:	1000061e 	bne	r2,zero,11c0 <DispChN+0x64>
		*(volatile unsigned long *)HEX3_BASE = Seg7Enc(0);
    11a8:	04002034 	movhi	r16,128
    11ac:	84080004 	addi	r16,r16,8192
    11b0:	0009883a 	mov	r4,zero
    11b4:	00002c00 	call	2c0 <Seg7Enc>
    11b8:	80800015 	stw	r2,0(r16)
    11bc:	00005006 	br	1300 <DispChN+0x1a4>
	} else if((byState == 0 && ChN == 1) || (byState == 1 && state[2] == '1')) {
    11c0:	e0bffe17 	ldw	r2,-8(fp)
    11c4:	1000031e 	bne	r2,zero,11d4 <DispChN+0x78>
    11c8:	d0a6e517 	ldw	r2,-25708(gp)
    11cc:	10800060 	cmpeqi	r2,r2,1
    11d0:	1000091e 	bne	r2,zero,11f8 <DispChN+0x9c>
    11d4:	e0bffe17 	ldw	r2,-8(fp)
    11d8:	10800058 	cmpnei	r2,r2,1
    11dc:	10000c1e 	bne	r2,zero,1210 <DispChN+0xb4>
    11e0:	d0a6e683 	ldbu	r2,-25702(gp)
    11e4:	10803fcc 	andi	r2,r2,255
    11e8:	1080201c 	xori	r2,r2,128
    11ec:	10bfe004 	addi	r2,r2,-128
    11f0:	10800c58 	cmpnei	r2,r2,49
    11f4:	1000061e 	bne	r2,zero,1210 <DispChN+0xb4>
		*(volatile unsigned long *)HEX3_BASE = Seg7Enc(1);
    11f8:	04002034 	movhi	r16,128
    11fc:	84080004 	addi	r16,r16,8192
    1200:	01000044 	movi	r4,1
    1204:	00002c00 	call	2c0 <Seg7Enc>
    1208:	80800015 	stw	r2,0(r16)
    120c:	00003c06 	br	1300 <DispChN+0x1a4>
	} else if((byState == 0 && ChN == 2) || (byState == 1 && state[2] == '2')) {
    1210:	e0bffe17 	ldw	r2,-8(fp)
    1214:	1000031e 	bne	r2,zero,1224 <DispChN+0xc8>
    1218:	d0a6e517 	ldw	r2,-25708(gp)
    121c:	108000a0 	cmpeqi	r2,r2,2
    1220:	1000091e 	bne	r2,zero,1248 <DispChN+0xec>
    1224:	e0bffe17 	ldw	r2,-8(fp)
    1228:	10800058 	cmpnei	r2,r2,1
    122c:	10000c1e 	bne	r2,zero,1260 <DispChN+0x104>
    1230:	d0a6e683 	ldbu	r2,-25702(gp)
    1234:	10803fcc 	andi	r2,r2,255
    1238:	1080201c 	xori	r2,r2,128
    123c:	10bfe004 	addi	r2,r2,-128
    1240:	10800c98 	cmpnei	r2,r2,50
    1244:	1000061e 	bne	r2,zero,1260 <DispChN+0x104>
		*(volatile unsigned long *)HEX3_BASE = Seg7Enc(2);
    1248:	04002034 	movhi	r16,128
    124c:	84080004 	addi	r16,r16,8192
    1250:	01000084 	movi	r4,2
    1254:	00002c00 	call	2c0 <Seg7Enc>
    1258:	80800015 	stw	r2,0(r16)
    125c:	00002806 	br	1300 <DispChN+0x1a4>
	} else if((byState == 0 && ChN == 3) || (byState == 1 && state[2] == '3')) {
    1260:	e0bffe17 	ldw	r2,-8(fp)
    1264:	1000031e 	bne	r2,zero,1274 <DispChN+0x118>
    1268:	d0a6e517 	ldw	r2,-25708(gp)
    126c:	108000e0 	cmpeqi	r2,r2,3
    1270:	1000091e 	bne	r2,zero,1298 <DispChN+0x13c>
    1274:	e0bffe17 	ldw	r2,-8(fp)
    1278:	10800058 	cmpnei	r2,r2,1
    127c:	10000c1e 	bne	r2,zero,12b0 <DispChN+0x154>
    1280:	d0a6e683 	ldbu	r2,-25702(gp)
    1284:	10803fcc 	andi	r2,r2,255
    1288:	1080201c 	xori	r2,r2,128
    128c:	10bfe004 	addi	r2,r2,-128
    1290:	10800cd8 	cmpnei	r2,r2,51
    1294:	1000061e 	bne	r2,zero,12b0 <DispChN+0x154>
		*(volatile unsigned long *)HEX3_BASE = Seg7Enc(3);
    1298:	04002034 	movhi	r16,128
    129c:	84080004 	addi	r16,r16,8192
    12a0:	010000c4 	movi	r4,3
    12a4:	00002c00 	call	2c0 <Seg7Enc>
    12a8:	80800015 	stw	r2,0(r16)
    12ac:	00001406 	br	1300 <DispChN+0x1a4>
	} else if((byState == 0 && ChN == 4) || (byState == 1 && state[2] == '4')) {
    12b0:	e0bffe17 	ldw	r2,-8(fp)
    12b4:	1000031e 	bne	r2,zero,12c4 <DispChN+0x168>
    12b8:	d0a6e517 	ldw	r2,-25708(gp)
    12bc:	10800120 	cmpeqi	r2,r2,4
    12c0:	1000091e 	bne	r2,zero,12e8 <DispChN+0x18c>
    12c4:	e0bffe17 	ldw	r2,-8(fp)
    12c8:	10800058 	cmpnei	r2,r2,1
    12cc:	10000c1e 	bne	r2,zero,1300 <DispChN+0x1a4>
    12d0:	d0a6e683 	ldbu	r2,-25702(gp)
    12d4:	10803fcc 	andi	r2,r2,255
    12d8:	1080201c 	xori	r2,r2,128
    12dc:	10bfe004 	addi	r2,r2,-128
    12e0:	10800d18 	cmpnei	r2,r2,52
    12e4:	1000061e 	bne	r2,zero,1300 <DispChN+0x1a4>
		*(volatile unsigned long *)HEX3_BASE = Seg7Enc(4);
    12e8:	04002034 	movhi	r16,128
    12ec:	84080004 	addi	r16,r16,8192
    12f0:	01000104 	movi	r4,4
    12f4:	00002c00 	call	2c0 <Seg7Enc>
    12f8:	80800015 	stw	r2,0(r16)
	}
}
    12fc:	00000006 	br	1300 <DispChN+0x1a4>
    1300:	0001883a 	nop
    1304:	e6ffff04 	addi	sp,fp,-4
    1308:	dfc00217 	ldw	ra,8(sp)
    130c:	df000117 	ldw	fp,4(sp)
    1310:	dc000017 	ldw	r16,0(sp)
    1314:	dec00304 	addi	sp,sp,12
    1318:	f800283a 	ret

0000131c <DispAll>:

void DispAll() {
    131c:	defffd04 	addi	sp,sp,-12
    1320:	dfc00215 	stw	ra,8(sp)
    1324:	df000115 	stw	fp,4(sp)
    1328:	dc000015 	stw	r16,0(sp)
    132c:	df000104 	addi	fp,sp,4
	if(state[1] == 'U') { // "RUN"
    1330:	d0a6e643 	ldbu	r2,-25703(gp)
    1334:	10803fcc 	andi	r2,r2,255
    1338:	1080201c 	xori	r2,r2,128
    133c:	10bfe004 	addi	r2,r2,-128
    1340:	10801558 	cmpnei	r2,r2,85
    1344:	1000141e 	bne	r2,zero,1398 <DispAll+0x7c>
		DispChN(0); // display by the ChN
    1348:	0009883a 	mov	r4,zero
    134c:	000115c0 	call	115c <DispChN>
		if(Category == 0) {
    1350:	d0a6e417 	ldw	r2,-25712(gp)
    1354:	1000081e 	bne	r2,zero,1378 <DispAll+0x5c>
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xF);
    1358:	04002034 	movhi	r16,128
    135c:	84080404 	addi	r16,r16,8208
    1360:	010003c4 	movi	r4,15
    1364:	00002c00 	call	2c0 <Seg7Enc>
    1368:	80800015 	stw	r2,0(r16)
			DispPeriod(0); // display by the variable
    136c:	0009883a 	mov	r4,zero
    1370:	00005a00 	call	5a0 <DispPeriod>
		DispChN(0); // display by the ChN
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
		DispDuty(1); // display by the state
	}

}
    1374:	00006806 	br	1518 <DispAll+0x1fc>
		DispChN(0); // display by the ChN
		if(Category == 0) {
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xF);
			DispPeriod(0); // display by the variable
		} else {
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
    1378:	04002034 	movhi	r16,128
    137c:	84080404 	addi	r16,r16,8208
    1380:	01000344 	movi	r4,13
    1384:	00002c00 	call	2c0 <Seg7Enc>
    1388:	80800015 	stw	r2,0(r16)
			DispDuty(0); // display by the variable
    138c:	0009883a 	mov	r4,zero
    1390:	0000ebc0 	call	ebc <DispDuty>
		DispChN(0); // display by the ChN
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
		DispDuty(1); // display by the state
	}

}
    1394:	00006006 	br	1518 <DispAll+0x1fc>
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
			DispDuty(0); // display by the variable
		}
	}

	else if(state[1] == 'N') { // "PNx"
    1398:	d0a6e643 	ldbu	r2,-25703(gp)
    139c:	10803fcc 	andi	r2,r2,255
    13a0:	1080201c 	xori	r2,r2,128
    13a4:	10bfe004 	addi	r2,r2,-128
    13a8:	10801398 	cmpnei	r2,r2,78
    13ac:	1000141e 	bne	r2,zero,1400 <DispAll+0xe4>
		DispChN(1); // display by the state[2]
    13b0:	01000044 	movi	r4,1
    13b4:	000115c0 	call	115c <DispChN>
		if(Category == 0) {
    13b8:	d0a6e417 	ldw	r2,-25712(gp)
    13bc:	1000081e 	bne	r2,zero,13e0 <DispAll+0xc4>
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xF);
    13c0:	04002034 	movhi	r16,128
    13c4:	84080404 	addi	r16,r16,8208
    13c8:	010003c4 	movi	r4,15
    13cc:	00002c00 	call	2c0 <Seg7Enc>
    13d0:	80800015 	stw	r2,0(r16)
			DispPeriod(0); // display by the variable
    13d4:	0009883a 	mov	r4,zero
    13d8:	00005a00 	call	5a0 <DispPeriod>
		DispChN(0); // display by the ChN
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
		DispDuty(1); // display by the state
	}

}
    13dc:	00004e06 	br	1518 <DispAll+0x1fc>
		DispChN(1); // display by the state[2]
		if(Category == 0) {
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xF);
			DispPeriod(0); // display by the variable
		} else {
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
    13e0:	04002034 	movhi	r16,128
    13e4:	84080404 	addi	r16,r16,8208
    13e8:	01000344 	movi	r4,13
    13ec:	00002c00 	call	2c0 <Seg7Enc>
    13f0:	80800015 	stw	r2,0(r16)
			DispDuty(0); // display by the variable
    13f4:	0009883a 	mov	r4,zero
    13f8:	0000ebc0 	call	ebc <DispDuty>
		DispChN(0); // display by the ChN
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
		DispDuty(1); // display by the state
	}

}
    13fc:	00004606 	br	1518 <DispAll+0x1fc>
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
			DispDuty(0); // display by the variable
		}
	}

	else if(state[1] == 'C') { // "xCx"
    1400:	d0a6e643 	ldbu	r2,-25703(gp)
    1404:	10803fcc 	andi	r2,r2,255
    1408:	1080201c 	xori	r2,r2,128
    140c:	10bfe004 	addi	r2,r2,-128
    1410:	108010d8 	cmpnei	r2,r2,67
    1414:	1000211e 	bne	r2,zero,149c <DispAll+0x180>
		DispChN(0); // display by the ChN
    1418:	0009883a 	mov	r4,zero
    141c:	000115c0 	call	115c <DispChN>
		if(state[2] == '0') {
    1420:	d0a6e683 	ldbu	r2,-25702(gp)
    1424:	10803fcc 	andi	r2,r2,255
    1428:	1080201c 	xori	r2,r2,128
    142c:	10bfe004 	addi	r2,r2,-128
    1430:	10800c18 	cmpnei	r2,r2,48
    1434:	1000061e 	bne	r2,zero,1450 <DispAll+0x134>
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xF);
    1438:	04002034 	movhi	r16,128
    143c:	84080404 	addi	r16,r16,8208
    1440:	010003c4 	movi	r4,15
    1444:	00002c00 	call	2c0 <Seg7Enc>
    1448:	80800015 	stw	r2,0(r16)
    144c:	00000b06 	br	147c <DispAll+0x160>
		} else if(state[2] == '1') {
    1450:	d0a6e683 	ldbu	r2,-25702(gp)
    1454:	10803fcc 	andi	r2,r2,255
    1458:	1080201c 	xori	r2,r2,128
    145c:	10bfe004 	addi	r2,r2,-128
    1460:	10800c58 	cmpnei	r2,r2,49
    1464:	1000051e 	bne	r2,zero,147c <DispAll+0x160>
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
    1468:	04002034 	movhi	r16,128
    146c:	84080404 	addi	r16,r16,8208
    1470:	01000344 	movi	r4,13
    1474:	00002c00 	call	2c0 <Seg7Enc>
    1478:	80800015 	stw	r2,0(r16)
		}
		if(Category == 0) DispPeriod(0); // display by the variable
    147c:	d0a6e417 	ldw	r2,-25712(gp)
    1480:	1000031e 	bne	r2,zero,1490 <DispAll+0x174>
    1484:	0009883a 	mov	r4,zero
    1488:	00005a00 	call	5a0 <DispPeriod>
		DispChN(0); // display by the ChN
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
		DispDuty(1); // display by the state
	}

}
    148c:	00002206 	br	1518 <DispAll+0x1fc>
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xF);
		} else if(state[2] == '1') {
			*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
		}
		if(Category == 0) DispPeriod(0); // display by the variable
		else DispDuty(0); // display by the variable
    1490:	0009883a 	mov	r4,zero
    1494:	0000ebc0 	call	ebc <DispDuty>
		DispChN(0); // display by the ChN
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
		DispDuty(1); // display by the state
	}

}
    1498:	00001f06 	br	1518 <DispAll+0x1fc>
		}
		if(Category == 0) DispPeriod(0); // display by the variable
		else DispDuty(0); // display by the variable
	}

	else if(state[1] == 'F') { // "xFx"
    149c:	d0a6e643 	ldbu	r2,-25703(gp)
    14a0:	10803fcc 	andi	r2,r2,255
    14a4:	1080201c 	xori	r2,r2,128
    14a8:	10bfe004 	addi	r2,r2,-128
    14ac:	10801198 	cmpnei	r2,r2,70
    14b0:	10000a1e 	bne	r2,zero,14dc <DispAll+0x1c0>
		DispChN(0); // display by the ChN
    14b4:	0009883a 	mov	r4,zero
    14b8:	000115c0 	call	115c <DispChN>
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xF);
    14bc:	04002034 	movhi	r16,128
    14c0:	84080404 	addi	r16,r16,8208
    14c4:	010003c4 	movi	r4,15
    14c8:	00002c00 	call	2c0 <Seg7Enc>
    14cc:	80800015 	stw	r2,0(r16)
		DispPeriod(1); // display by the state
    14d0:	01000044 	movi	r4,1
    14d4:	00005a00 	call	5a0 <DispPeriod>
		DispChN(0); // display by the ChN
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
		DispDuty(1); // display by the state
	}

}
    14d8:	00000f06 	br	1518 <DispAll+0x1fc>
		DispChN(0); // display by the ChN
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xF);
		DispPeriod(1); // display by the state
	}

	else if(state[1] == 'd') { // "xdx"
    14dc:	d0a6e643 	ldbu	r2,-25703(gp)
    14e0:	10803fcc 	andi	r2,r2,255
    14e4:	1080201c 	xori	r2,r2,128
    14e8:	10bfe004 	addi	r2,r2,-128
    14ec:	10801918 	cmpnei	r2,r2,100
    14f0:	1000091e 	bne	r2,zero,1518 <DispAll+0x1fc>
		DispChN(0); // display by the ChN
    14f4:	0009883a 	mov	r4,zero
    14f8:	000115c0 	call	115c <DispChN>
		*(volatile unsigned long *)HEX2_BASE = Seg7Enc(0xd);
    14fc:	04002034 	movhi	r16,128
    1500:	84080404 	addi	r16,r16,8208
    1504:	01000344 	movi	r4,13
    1508:	00002c00 	call	2c0 <Seg7Enc>
    150c:	80800015 	stw	r2,0(r16)
		DispDuty(1); // display by the state
    1510:	01000044 	movi	r4,1
    1514:	0000ebc0 	call	ebc <DispDuty>
	}

}
    1518:	0001883a 	nop
    151c:	e6ffff04 	addi	sp,fp,-4
    1520:	dfc00217 	ldw	ra,8(sp)
    1524:	df000117 	ldw	fp,4(sp)
    1528:	dc000017 	ldw	r16,0(sp)
    152c:	dec00304 	addi	sp,sp,12
    1530:	f800283a 	ret

00001534 <uart_print_help>:

void uart_print_help() {
    1534:	defffe04 	addi	sp,sp,-8
    1538:	dfc00115 	stw	ra,4(sp)
    153c:	df000015 	stw	fp,0(sp)
    1540:	d839883a 	mov	fp,sp

	alt_putstr("\r\n");
    1544:	01000074 	movhi	r4,1
    1548:	2126dc04 	addi	r4,r4,-25744
    154c:	000328c0 	call	328c <alt_putstr>
	alt_putstr("==============  This is a Help ===============  \r\n");
    1550:	01000074 	movhi	r4,1
    1554:	2126dd04 	addi	r4,r4,-25740
    1558:	000328c0 	call	328c <alt_putstr>
	alt_putstr("=  a : AAAA \r\n");
    155c:	01000074 	movhi	r4,1
    1560:	2126ea04 	addi	r4,r4,-25688
    1564:	000328c0 	call	328c <alt_putstr>
	alt_putstr("=  b : BBBB \r\n");
    1568:	01000074 	movhi	r4,1
    156c:	2126ee04 	addi	r4,r4,-25672
    1570:	000328c0 	call	328c <alt_putstr>
	alt_putstr("=  r : Read \r\n");
    1574:	01000074 	movhi	r4,1
    1578:	2126f204 	addi	r4,r4,-25656
    157c:	000328c0 	call	328c <alt_putstr>
	alt_putstr("=  w : Write \r\n");
    1580:	01000074 	movhi	r4,1
    1584:	2126f604 	addi	r4,r4,-25640
    1588:	000328c0 	call	328c <alt_putstr>
	alt_putstr("==============  End of Help    ===============  \r\n");
    158c:	01000074 	movhi	r4,1
    1590:	2126fa04 	addi	r4,r4,-25624
    1594:	000328c0 	call	328c <alt_putstr>
	alt_putstr("\r\n");
    1598:	01000074 	movhi	r4,1
    159c:	2126dc04 	addi	r4,r4,-25744
    15a0:	000328c0 	call	328c <alt_putstr>

}
    15a4:	0001883a 	nop
    15a8:	e037883a 	mov	sp,fp
    15ac:	dfc00117 	ldw	ra,4(sp)
    15b0:	df000017 	ldw	fp,0(sp)
    15b4:	dec00204 	addi	sp,sp,8
    15b8:	f800283a 	ret

000015bc <uart_rx_char>:

void uart_rx_char() {
    15bc:	defffd04 	addi	sp,sp,-12
    15c0:	dfc00215 	stw	ra,8(sp)
    15c4:	df000115 	stw	fp,4(sp)
    15c8:	df000104 	addi	fp,sp,4
	char 		onechar;

		alt_putstr("You enter a character \r\n");
    15cc:	01000074 	movhi	r4,1
    15d0:	21270704 	addi	r4,r4,-25572
    15d4:	000328c0 	call	328c <alt_putstr>
		onechar = alt_getchar();
    15d8:	00030f00 	call	30f0 <alt_getchar>
    15dc:	e0bfff05 	stb	r2,-4(fp)

		if(onechar == 'p'){
    15e0:	e0bfff07 	ldb	r2,-4(fp)
    15e4:	10801c18 	cmpnei	r2,r2,112
    15e8:	1000041e 	bne	r2,zero,15fc <uart_rx_char+0x40>
			alt_putstr("ABCDPPPP0123\r\n");
    15ec:	01000074 	movhi	r4,1
    15f0:	21270e04 	addi	r4,r4,-25544
    15f4:	000328c0 	call	328c <alt_putstr>
			alt_putstr("nnn\r\n");
		}
		else if(onechar == '\r' ){
			alt_putstr("rrr\r\n");
		}
}
    15f8:	00002306 	br	1688 <uart_rx_char+0xcc>
		onechar = alt_getchar();

		if(onechar == 'p'){
			alt_putstr("ABCDPPPP0123\r\n");
		}
		else if(onechar == 'a'){
    15fc:	e0bfff07 	ldb	r2,-4(fp)
    1600:	10801858 	cmpnei	r2,r2,97
    1604:	1000041e 	bne	r2,zero,1618 <uart_rx_char+0x5c>
			alt_putstr("AAAAaaaaaa\r\n");
    1608:	01000074 	movhi	r4,1
    160c:	21271204 	addi	r4,r4,-25528
    1610:	000328c0 	call	328c <alt_putstr>
			alt_putstr("nnn\r\n");
		}
		else if(onechar == '\r' ){
			alt_putstr("rrr\r\n");
		}
}
    1614:	00001c06 	br	1688 <uart_rx_char+0xcc>
			alt_putstr("ABCDPPPP0123\r\n");
		}
		else if(onechar == 'a'){
			alt_putstr("AAAAaaaaaa\r\n");
		}
		else if(onechar == 'b'){
    1618:	e0bfff07 	ldb	r2,-4(fp)
    161c:	10801898 	cmpnei	r2,r2,98
    1620:	1000041e 	bne	r2,zero,1634 <uart_rx_char+0x78>
			alt_putstr("BBBBbbbbbb\r\n");
    1624:	01000074 	movhi	r4,1
    1628:	21271604 	addi	r4,r4,-25512
    162c:	000328c0 	call	328c <alt_putstr>
			alt_putstr("nnn\r\n");
		}
		else if(onechar == '\r' ){
			alt_putstr("rrr\r\n");
		}
}
    1630:	00001506 	br	1688 <uart_rx_char+0xcc>
			alt_putstr("AAAAaaaaaa\r\n");
		}
		else if(onechar == 'b'){
			alt_putstr("BBBBbbbbbb\r\n");
		}
		else if(onechar == 'h' || onechar == '?'){
    1634:	e0bfff07 	ldb	r2,-4(fp)
    1638:	10801a20 	cmpeqi	r2,r2,104
    163c:	1000031e 	bne	r2,zero,164c <uart_rx_char+0x90>
    1640:	e0bfff07 	ldb	r2,-4(fp)
    1644:	10800fd8 	cmpnei	r2,r2,63
    1648:	1000021e 	bne	r2,zero,1654 <uart_rx_char+0x98>
			uart_print_help();
    164c:	00015340 	call	1534 <uart_print_help>
			alt_putstr("nnn\r\n");
		}
		else if(onechar == '\r' ){
			alt_putstr("rrr\r\n");
		}
}
    1650:	00000d06 	br	1688 <uart_rx_char+0xcc>
			alt_putstr("BBBBbbbbbb\r\n");
		}
		else if(onechar == 'h' || onechar == '?'){
			uart_print_help();
		}
		else if(onechar == '\n' ){
    1654:	e0bfff07 	ldb	r2,-4(fp)
    1658:	10800298 	cmpnei	r2,r2,10
    165c:	1000041e 	bne	r2,zero,1670 <uart_rx_char+0xb4>
			alt_putstr("nnn\r\n");
    1660:	01000074 	movhi	r4,1
    1664:	21271a04 	addi	r4,r4,-25496
    1668:	000328c0 	call	328c <alt_putstr>
		}
		else if(onechar == '\r' ){
			alt_putstr("rrr\r\n");
		}
}
    166c:	00000606 	br	1688 <uart_rx_char+0xcc>
			uart_print_help();
		}
		else if(onechar == '\n' ){
			alt_putstr("nnn\r\n");
		}
		else if(onechar == '\r' ){
    1670:	e0bfff07 	ldb	r2,-4(fp)
    1674:	10800358 	cmpnei	r2,r2,13
    1678:	1000031e 	bne	r2,zero,1688 <uart_rx_char+0xcc>
			alt_putstr("rrr\r\n");
    167c:	01000074 	movhi	r4,1
    1680:	21271c04 	addi	r4,r4,-25488
    1684:	000328c0 	call	328c <alt_putstr>
		}
}
    1688:	0001883a 	nop
    168c:	e037883a 	mov	sp,fp
    1690:	dfc00117 	ldw	ra,4(sp)
    1694:	df000017 	ldw	fp,0(sp)
    1698:	dec00204 	addi	sp,sp,8
    169c:	f800283a 	ret

000016a0 <main>:


int main()
{
    16a0:	defff704 	addi	sp,sp,-36
    16a4:	dfc00815 	stw	ra,32(sp)
    16a8:	df000715 	stw	fp,28(sp)
    16ac:	dc000615 	stw	r16,24(sp)
    16b0:	df000704 	addi	fp,sp,28
	unsigned long reg1, reg1old, reg1tmp, reg2tmp, reg3tmp;
	int i;

	for(i = 0; i < 8; i++) {
    16b4:	e03ffa15 	stw	zero,-24(fp)
    16b8:	00001d06 	br	1730 <main+0x90>
		Period[i] = 50000000;
    16bc:	00800074 	movhi	r2,1
    16c0:	10b53e04 	addi	r2,r2,-11016
    16c4:	e0fffa17 	ldw	r3,-24(fp)
    16c8:	18c7883a 	add	r3,r3,r3
    16cc:	18c7883a 	add	r3,r3,r3
    16d0:	10c7883a 	add	r3,r2,r3
    16d4:	0080bef4 	movhi	r2,763
    16d8:	10bc2004 	addi	r2,r2,-3968
    16dc:	18800015 	stw	r2,0(r3)
		Decode[i] = 25000000;
    16e0:	00800074 	movhi	r2,1
    16e4:	10b52e04 	addi	r2,r2,-11080
    16e8:	e0fffa17 	ldw	r3,-24(fp)
    16ec:	18c7883a 	add	r3,r3,r3
    16f0:	18c7883a 	add	r3,r3,r3
    16f4:	10c7883a 	add	r3,r2,r3
    16f8:	00805f74 	movhi	r2,381
    16fc:	109e1004 	addi	r2,r2,30784
    1700:	18800015 	stw	r2,0(r3)
		Duty[i] = 5;
    1704:	00800074 	movhi	r2,1
    1708:	10b53604 	addi	r2,r2,-11048
    170c:	e0fffa17 	ldw	r3,-24(fp)
    1710:	18c7883a 	add	r3,r3,r3
    1714:	18c7883a 	add	r3,r3,r3
    1718:	10c5883a 	add	r2,r2,r3
    171c:	00c00144 	movi	r3,5
    1720:	10c00015 	stw	r3,0(r2)
int main()
{
	unsigned long reg1, reg1old, reg1tmp, reg2tmp, reg3tmp;
	int i;

	for(i = 0; i < 8; i++) {
    1724:	e0bffa17 	ldw	r2,-24(fp)
    1728:	10800044 	addi	r2,r2,1
    172c:	e0bffa15 	stw	r2,-24(fp)
    1730:	e0bffa17 	ldw	r2,-24(fp)
    1734:	10800210 	cmplti	r2,r2,8
    1738:	103fe01e 	bne	r2,zero,16bc <__alt_mem_epcs_flash_controller_0+0xff8006bc>
		Period[i] = 50000000;
		Decode[i] = 25000000;
		Duty[i] = 5;
	}
	*(volatile unsigned long *)PERIOD1_BASE = Period[1];
    173c:	00802034 	movhi	r2,128
    1740:	10882804 	addi	r2,r2,8352
    1744:	00c00074 	movhi	r3,1
    1748:	18f53e04 	addi	r3,r3,-11016
    174c:	18c00117 	ldw	r3,4(r3)
    1750:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)DECODE1_BASE = Decode[1];
    1754:	00802034 	movhi	r2,128
    1758:	10881804 	addi	r2,r2,8288
    175c:	00c00074 	movhi	r3,1
    1760:	18f52e04 	addi	r3,r3,-11080
    1764:	18c00117 	ldw	r3,4(r3)
    1768:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)PERIOD2_BASE = Period[2];
    176c:	00802034 	movhi	r2,128
    1770:	10882404 	addi	r2,r2,8336
    1774:	00c00074 	movhi	r3,1
    1778:	18f53e04 	addi	r3,r3,-11016
    177c:	18c00217 	ldw	r3,8(r3)
    1780:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)DECODE2_BASE = Decode[2];
    1784:	00802034 	movhi	r2,128
    1788:	10881404 	addi	r2,r2,8272
    178c:	00c00074 	movhi	r3,1
    1790:	18f52e04 	addi	r3,r3,-11080
    1794:	18c00217 	ldw	r3,8(r3)
    1798:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)PERIOD3_BASE = Period[3];
    179c:	00802034 	movhi	r2,128
    17a0:	10882004 	addi	r2,r2,8320
    17a4:	00c00074 	movhi	r3,1
    17a8:	18f53e04 	addi	r3,r3,-11016
    17ac:	18c00317 	ldw	r3,12(r3)
    17b0:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)DECODE3_BASE = Decode[3];
    17b4:	00802034 	movhi	r2,128
    17b8:	10881004 	addi	r2,r2,8256
    17bc:	00c00074 	movhi	r3,1
    17c0:	18f52e04 	addi	r3,r3,-11080
    17c4:	18c00317 	ldw	r3,12(r3)
    17c8:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)PERIOD4_BASE = Period[4];
    17cc:	00802034 	movhi	r2,128
    17d0:	10881c04 	addi	r2,r2,8304
    17d4:	00c00074 	movhi	r3,1
    17d8:	18f53e04 	addi	r3,r3,-11016
    17dc:	18c00417 	ldw	r3,16(r3)
    17e0:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)DECODE4_BASE = Decode[4];
    17e4:	00802034 	movhi	r2,128
    17e8:	10880c04 	addi	r2,r2,8240
    17ec:	00c00074 	movhi	r3,1
    17f0:	18f52e04 	addi	r3,r3,-11080
    17f4:	18c00417 	ldw	r3,16(r3)
    17f8:	10c00015 	stw	r3,0(r2)

	state[0] = 'R';	state[1] = 'U';	state[2] = 'N';
    17fc:	00801484 	movi	r2,82
    1800:	d0a6e605 	stb	r2,-25704(gp)
    1804:	00801544 	movi	r2,85
    1808:	d0a6e645 	stb	r2,-25703(gp)
    180c:	00801384 	movi	r2,78
    1810:	d0a6e685 	stb	r2,-25702(gp)
	DispAll();
    1814:	000131c0 	call	131c <DispAll>

	regval = 0;  // UART rx buffer clear
    1818:	d026e715 	stw	zero,-25700(gp)

	alt_putstr("Nios UART Test by JBL ... \r\n");
    181c:	01000074 	movhi	r4,1
    1820:	21271e04 	addi	r4,r4,-25480
    1824:	000328c0 	call	328c <alt_putstr>
	while (1) {
		//alt_putstr("Nios UART Test by JBL ... \r\n");



    	reg1old = reg1;
    1828:	e0bff917 	ldw	r2,-28(fp)
    182c:	e0bffb15 	stw	r2,-20(fp)
      	reg1tmp = *(volatile unsigned long *)PUSH_BASE;
    1830:	00802034 	movhi	r2,128
    1834:	10882c04 	addi	r2,r2,8368
    1838:	10800017 	ldw	r2,0(r2)
    183c:	e0bffc15 	stw	r2,-16(fp)
    	_wait(10000);
    1840:	0109c404 	movi	r4,10000
    1844:	000026c0 	call	26c <_wait>
      	reg2tmp = *(volatile unsigned long *)PUSH_BASE;
    1848:	00802034 	movhi	r2,128
    184c:	10882c04 	addi	r2,r2,8368
    1850:	10800017 	ldw	r2,0(r2)
    1854:	e0bffd15 	stw	r2,-12(fp)
    	_wait(10000);
    1858:	0109c404 	movi	r4,10000
    185c:	000026c0 	call	26c <_wait>
     	reg3tmp = *(volatile unsigned long *)PUSH_BASE;
    1860:	00802034 	movhi	r2,128
    1864:	10882c04 	addi	r2,r2,8368
    1868:	10800017 	ldw	r2,0(r2)
    186c:	e0bffe15 	stw	r2,-8(fp)
    	_wait(10000);
    1870:	0109c404 	movi	r4,10000
    1874:	000026c0 	call	26c <_wait>
    	reg1 = *(volatile unsigned long *)PUSH_BASE;
    1878:	00802034 	movhi	r2,128
    187c:	10882c04 	addi	r2,r2,8368
    1880:	10800017 	ldw	r2,0(r2)
    1884:	e0bff915 	stw	r2,-28(fp)
    	if(reg1 == reg1tmp && reg1 == reg2tmp && reg1 == reg3tmp) {
    1888:	e0fff917 	ldw	r3,-28(fp)
    188c:	e0bffc17 	ldw	r2,-16(fp)
    1890:	1880061e 	bne	r3,r2,18ac <main+0x20c>
    1894:	e0fff917 	ldw	r3,-28(fp)
    1898:	e0bffd17 	ldw	r2,-12(fp)
    189c:	1880031e 	bne	r3,r2,18ac <main+0x20c>
    18a0:	e0fff917 	ldw	r3,-28(fp)
    18a4:	e0bffe17 	ldw	r2,-8(fp)
    18a8:	18804826 	beq	r3,r2,19cc <main+0x32c>
    	} else {
    		reg1 = reg1old;
    18ac:	e0bffb17 	ldw	r2,-20(fp)
    18b0:	e0bff915 	stw	r2,-28(fp)
		alt_putstr("push button Event \r\n");
    18b4:	01000074 	movhi	r4,1
    18b8:	21272604 	addi	r4,r4,-25448
    18bc:	000328c0 	call	328c <alt_putstr>
    		if((reg1 & 0x0F) == 0x01) {
    18c0:	e0bff917 	ldw	r2,-28(fp)
    18c4:	108003cc 	andi	r2,r2,15
    18c8:	10800058 	cmpnei	r2,r2,1
    18cc:	1000041e 	bne	r2,zero,18e0 <main+0x240>
			alt_putstr("push button One \r\n");
    18d0:	01000074 	movhi	r4,1
    18d4:	21272c04 	addi	r4,r4,-25424
    18d8:	000328c0 	call	328c <alt_putstr>
    18dc:	00003b06 	br	19cc <main+0x32c>
		}
		else if((reg1 & 0x0F) == 0x02) {
    18e0:	e0bff917 	ldw	r2,-28(fp)
    18e4:	108003cc 	andi	r2,r2,15
    18e8:	10800098 	cmpnei	r2,r2,2
    18ec:	1000041e 	bne	r2,zero,1900 <main+0x260>
			alt_putstr("push button Two \r\n");
    18f0:	01000074 	movhi	r4,1
    18f4:	21273104 	addi	r4,r4,-25404
    18f8:	000328c0 	call	328c <alt_putstr>
    18fc:	00003306 	br	19cc <main+0x32c>
		}
		else if((reg1 & 0x0F) == 0x04) {
    1900:	e0bff917 	ldw	r2,-28(fp)
    1904:	108003cc 	andi	r2,r2,15
    1908:	10800118 	cmpnei	r2,r2,4
    190c:	1000041e 	bne	r2,zero,1920 <main+0x280>
			alt_putstr("push button Three \r\n");
    1910:	01000074 	movhi	r4,1
    1914:	21273604 	addi	r4,r4,-25384
    1918:	000328c0 	call	328c <alt_putstr>
    191c:	00002b06 	br	19cc <main+0x32c>
		}
		else if((reg1 & 0x0F) == 0x08) {
    1920:	e0bff917 	ldw	r2,-28(fp)
    1924:	108003cc 	andi	r2,r2,15
    1928:	10800218 	cmpnei	r2,r2,8
    192c:	1000041e 	bne	r2,zero,1940 <main+0x2a0>
			alt_putstr("push button Four \r\n");
    1930:	01000074 	movhi	r4,1
    1934:	21273c04 	addi	r4,r4,-25360
    1938:	000328c0 	call	328c <alt_putstr>
    193c:	00002306 	br	19cc <main+0x32c>
		}
		else if((reg1 & 0x0F) == 0x0E) {
    1940:	e0bff917 	ldw	r2,-28(fp)
    1944:	108003cc 	andi	r2,r2,15
    1948:	10800398 	cmpnei	r2,r2,14
    194c:	1000041e 	bne	r2,zero,1960 <main+0x2c0>
			alt_putstr("push button E \r\n");
    1950:	01000074 	movhi	r4,1
    1954:	21274104 	addi	r4,r4,-25340
    1958:	000328c0 	call	328c <alt_putstr>
    195c:	00001b06 	br	19cc <main+0x32c>
		}
		else if((reg1 & 0x0F) == 0x0D) {
    1960:	e0bff917 	ldw	r2,-28(fp)
    1964:	108003cc 	andi	r2,r2,15
    1968:	10800358 	cmpnei	r2,r2,13
    196c:	1000041e 	bne	r2,zero,1980 <main+0x2e0>
			alt_putstr("push button D \r\n");
    1970:	01000074 	movhi	r4,1
    1974:	21274604 	addi	r4,r4,-25320
    1978:	000328c0 	call	328c <alt_putstr>
    197c:	00001306 	br	19cc <main+0x32c>
		}
		else if((reg1 & 0x0F) == 0x0B) {
    1980:	e0bff917 	ldw	r2,-28(fp)
    1984:	108003cc 	andi	r2,r2,15
    1988:	108002d8 	cmpnei	r2,r2,11
    198c:	1000041e 	bne	r2,zero,19a0 <main+0x300>
			alt_putstr("push button B \r\n");
    1990:	01000074 	movhi	r4,1
    1994:	21274b04 	addi	r4,r4,-25300
    1998:	000328c0 	call	328c <alt_putstr>
    199c:	00000b06 	br	19cc <main+0x32c>
		}
		else if((reg1 & 0x0F) == 0x07) {
    19a0:	e0bff917 	ldw	r2,-28(fp)
    19a4:	108003cc 	andi	r2,r2,15
    19a8:	108001d8 	cmpnei	r2,r2,7
    19ac:	1000041e 	bne	r2,zero,19c0 <main+0x320>
			alt_putstr("push button 7 \r\n");
    19b0:	01000074 	movhi	r4,1
    19b4:	21275004 	addi	r4,r4,-25280
    19b8:	000328c0 	call	328c <alt_putstr>
    19bc:	00000306 	br	19cc <main+0x32c>
		}
		else{
			alt_putstr("push button What ?? \r\n");
    19c0:	01000074 	movhi	r4,1
    19c4:	21275504 	addi	r4,r4,-25260
    19c8:	000328c0 	call	328c <alt_putstr>
		}
    	}

    	if(reg1 != reg1old) {
    19cc:	e0fff917 	ldw	r3,-28(fp)
    19d0:	e0bffb17 	ldw	r2,-20(fp)
    19d4:	18800326 	beq	r3,r2,19e4 <main+0x344>
    		_wait(200000);
    19d8:	010000f4 	movhi	r4,3
    19dc:	21035004 	addi	r4,r4,3392
    19e0:	000026c0 	call	26c <_wait>
    	}

    	if((reg1 & 0x03) == 0x01) { // button2걁멗묖�{�^깛걂궕돓궠귢궫
    19e4:	e0bff917 	ldw	r2,-28(fp)
    19e8:	108000cc 	andi	r2,r2,3
    19ec:	10800058 	cmpnei	r2,r2,1
    19f0:	1001251e 	bne	r2,zero,1e88 <main+0x7e8>
    		if(state[1] == 'N') { // "PNx", Pwm ChN selection
    19f4:	d0a6e643 	ldbu	r2,-25703(gp)
    19f8:	10803fcc 	andi	r2,r2,255
    19fc:	1080201c 	xori	r2,r2,128
    1a00:	10bfe004 	addi	r2,r2,-128
    1a04:	10801398 	cmpnei	r2,r2,78
    1a08:	1000241e 	bne	r2,zero,1a9c <main+0x3fc>
    			if(state[2] == '0') {
    1a0c:	d0a6e683 	ldbu	r2,-25702(gp)
    1a10:	10803fcc 	andi	r2,r2,255
    1a14:	1080201c 	xori	r2,r2,128
    1a18:	10bfe004 	addi	r2,r2,-128
    1a1c:	10800c18 	cmpnei	r2,r2,48
    1a20:	1000031e 	bne	r2,zero,1a30 <main+0x390>
    				state[2] = '1';
    1a24:	00800c44 	movi	r2,49
    1a28:	d0a6e685 	stb	r2,-25702(gp)
    1a2c:	00010d06 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '1') {
    1a30:	d0a6e683 	ldbu	r2,-25702(gp)
    1a34:	10803fcc 	andi	r2,r2,255
    1a38:	1080201c 	xori	r2,r2,128
    1a3c:	10bfe004 	addi	r2,r2,-128
    1a40:	10800c58 	cmpnei	r2,r2,49
    1a44:	1000031e 	bne	r2,zero,1a54 <main+0x3b4>
    				state[2] = '2';
    1a48:	00800c84 	movi	r2,50
    1a4c:	d0a6e685 	stb	r2,-25702(gp)
    1a50:	00010406 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '2') {
    1a54:	d0a6e683 	ldbu	r2,-25702(gp)
    1a58:	10803fcc 	andi	r2,r2,255
    1a5c:	1080201c 	xori	r2,r2,128
    1a60:	10bfe004 	addi	r2,r2,-128
    1a64:	10800c98 	cmpnei	r2,r2,50
    1a68:	1000031e 	bne	r2,zero,1a78 <main+0x3d8>
    				state[2] = '3';
    1a6c:	00800cc4 	movi	r2,51
    1a70:	d0a6e685 	stb	r2,-25702(gp)
    1a74:	0000fb06 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '3') {
    1a78:	d0a6e683 	ldbu	r2,-25702(gp)
    1a7c:	10803fcc 	andi	r2,r2,255
    1a80:	1080201c 	xori	r2,r2,128
    1a84:	10bfe004 	addi	r2,r2,-128
    1a88:	10800cd8 	cmpnei	r2,r2,51
    1a8c:	1000f51e 	bne	r2,zero,1e64 <main+0x7c4>
    				state[2] = '0';
    1a90:	00800c04 	movi	r2,48
    1a94:	d0a6e685 	stb	r2,-25702(gp)
    1a98:	0000f206 	br	1e64 <main+0x7c4>
    			}
      		}

    		else if(state[1] == 'C') { // "xCx", Category selection
    1a9c:	d0a6e643 	ldbu	r2,-25703(gp)
    1aa0:	10803fcc 	andi	r2,r2,255
    1aa4:	1080201c 	xori	r2,r2,128
    1aa8:	10bfe004 	addi	r2,r2,-128
    1aac:	108010d8 	cmpnei	r2,r2,67
    1ab0:	1000121e 	bne	r2,zero,1afc <main+0x45c>
    			if(state[2] == '0') {
    1ab4:	d0a6e683 	ldbu	r2,-25702(gp)
    1ab8:	10803fcc 	andi	r2,r2,255
    1abc:	1080201c 	xori	r2,r2,128
    1ac0:	10bfe004 	addi	r2,r2,-128
    1ac4:	10800c18 	cmpnei	r2,r2,48
    1ac8:	1000031e 	bne	r2,zero,1ad8 <main+0x438>
    				state[2] = '1';
    1acc:	00800c44 	movi	r2,49
    1ad0:	d0a6e685 	stb	r2,-25702(gp)
    1ad4:	0000e306 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '1') {
    1ad8:	d0a6e683 	ldbu	r2,-25702(gp)
    1adc:	10803fcc 	andi	r2,r2,255
    1ae0:	1080201c 	xori	r2,r2,128
    1ae4:	10bfe004 	addi	r2,r2,-128
    1ae8:	10800c58 	cmpnei	r2,r2,49
    1aec:	1000dd1e 	bne	r2,zero,1e64 <main+0x7c4>
    				state[2] = '0';
    1af0:	00800c04 	movi	r2,48
    1af4:	d0a6e685 	stb	r2,-25702(gp)
    1af8:	0000da06 	br	1e64 <main+0x7c4>
    			}
    		}

    		else if(state[1] == 'F') { // "xFx", Frequency selection
    1afc:	d0a6e643 	ldbu	r2,-25703(gp)
    1b00:	10803fcc 	andi	r2,r2,255
    1b04:	1080201c 	xori	r2,r2,128
    1b08:	10bfe004 	addi	r2,r2,-128
    1b0c:	10801198 	cmpnei	r2,r2,70
    1b10:	1000a21e 	bne	r2,zero,1d9c <main+0x6fc>
    			if(state[2] == '0') {
    1b14:	d0a6e683 	ldbu	r2,-25702(gp)
    1b18:	10803fcc 	andi	r2,r2,255
    1b1c:	1080201c 	xori	r2,r2,128
    1b20:	10bfe004 	addi	r2,r2,-128
    1b24:	10800c18 	cmpnei	r2,r2,48
    1b28:	1000031e 	bne	r2,zero,1b38 <main+0x498>
    				state[2] = '1';
    1b2c:	00800c44 	movi	r2,49
    1b30:	d0a6e685 	stb	r2,-25702(gp)
    1b34:	0000cb06 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '1') {
    1b38:	d0a6e683 	ldbu	r2,-25702(gp)
    1b3c:	10803fcc 	andi	r2,r2,255
    1b40:	1080201c 	xori	r2,r2,128
    1b44:	10bfe004 	addi	r2,r2,-128
    1b48:	10800c58 	cmpnei	r2,r2,49
    1b4c:	1000031e 	bne	r2,zero,1b5c <main+0x4bc>
    				state[2] = '2';
    1b50:	00800c84 	movi	r2,50
    1b54:	d0a6e685 	stb	r2,-25702(gp)
    1b58:	0000c206 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '2') {
    1b5c:	d0a6e683 	ldbu	r2,-25702(gp)
    1b60:	10803fcc 	andi	r2,r2,255
    1b64:	1080201c 	xori	r2,r2,128
    1b68:	10bfe004 	addi	r2,r2,-128
    1b6c:	10800c98 	cmpnei	r2,r2,50
    1b70:	1000031e 	bne	r2,zero,1b80 <main+0x4e0>
    				state[2] = '3';
    1b74:	00800cc4 	movi	r2,51
    1b78:	d0a6e685 	stb	r2,-25702(gp)
    1b7c:	0000b906 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '3') {
    1b80:	d0a6e683 	ldbu	r2,-25702(gp)
    1b84:	10803fcc 	andi	r2,r2,255
    1b88:	1080201c 	xori	r2,r2,128
    1b8c:	10bfe004 	addi	r2,r2,-128
    1b90:	10800cd8 	cmpnei	r2,r2,51
    1b94:	1000031e 	bne	r2,zero,1ba4 <main+0x504>
    				state[2] = '4';
    1b98:	00800d04 	movi	r2,52
    1b9c:	d0a6e685 	stb	r2,-25702(gp)
    1ba0:	0000b006 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '4') {
    1ba4:	d0a6e683 	ldbu	r2,-25702(gp)
    1ba8:	10803fcc 	andi	r2,r2,255
    1bac:	1080201c 	xori	r2,r2,128
    1bb0:	10bfe004 	addi	r2,r2,-128
    1bb4:	10800d18 	cmpnei	r2,r2,52
    1bb8:	1000031e 	bne	r2,zero,1bc8 <main+0x528>
    				state[2] = '5';
    1bbc:	00800d44 	movi	r2,53
    1bc0:	d0a6e685 	stb	r2,-25702(gp)
    1bc4:	0000a706 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '5') {
    1bc8:	d0a6e683 	ldbu	r2,-25702(gp)
    1bcc:	10803fcc 	andi	r2,r2,255
    1bd0:	1080201c 	xori	r2,r2,128
    1bd4:	10bfe004 	addi	r2,r2,-128
    1bd8:	10800d58 	cmpnei	r2,r2,53
    1bdc:	1000031e 	bne	r2,zero,1bec <main+0x54c>
    				state[2] = '6';
    1be0:	00800d84 	movi	r2,54
    1be4:	d0a6e685 	stb	r2,-25702(gp)
    1be8:	00009e06 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '6') {
    1bec:	d0a6e683 	ldbu	r2,-25702(gp)
    1bf0:	10803fcc 	andi	r2,r2,255
    1bf4:	1080201c 	xori	r2,r2,128
    1bf8:	10bfe004 	addi	r2,r2,-128
    1bfc:	10800d98 	cmpnei	r2,r2,54
    1c00:	1000031e 	bne	r2,zero,1c10 <main+0x570>
    				state[2] = '7';
    1c04:	00800dc4 	movi	r2,55
    1c08:	d0a6e685 	stb	r2,-25702(gp)
    1c0c:	00009506 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '7') {
    1c10:	d0a6e683 	ldbu	r2,-25702(gp)
    1c14:	10803fcc 	andi	r2,r2,255
    1c18:	1080201c 	xori	r2,r2,128
    1c1c:	10bfe004 	addi	r2,r2,-128
    1c20:	10800dd8 	cmpnei	r2,r2,55
    1c24:	1000031e 	bne	r2,zero,1c34 <main+0x594>
    				state[2] = '8';
    1c28:	00800e04 	movi	r2,56
    1c2c:	d0a6e685 	stb	r2,-25702(gp)
    1c30:	00008c06 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '8') {
    1c34:	d0a6e683 	ldbu	r2,-25702(gp)
    1c38:	10803fcc 	andi	r2,r2,255
    1c3c:	1080201c 	xori	r2,r2,128
    1c40:	10bfe004 	addi	r2,r2,-128
    1c44:	10800e18 	cmpnei	r2,r2,56
    1c48:	1000031e 	bne	r2,zero,1c58 <main+0x5b8>
    				state[2] = '9';
    1c4c:	00800e44 	movi	r2,57
    1c50:	d0a6e685 	stb	r2,-25702(gp)
    1c54:	00008306 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '9') {
    1c58:	d0a6e683 	ldbu	r2,-25702(gp)
    1c5c:	10803fcc 	andi	r2,r2,255
    1c60:	1080201c 	xori	r2,r2,128
    1c64:	10bfe004 	addi	r2,r2,-128
    1c68:	10800e58 	cmpnei	r2,r2,57
    1c6c:	1000031e 	bne	r2,zero,1c7c <main+0x5dc>
    				state[2] = 'a';
    1c70:	00801844 	movi	r2,97
    1c74:	d0a6e685 	stb	r2,-25702(gp)
    1c78:	00007a06 	br	1e64 <main+0x7c4>
    			} else if(state[2] == 'a') {
    1c7c:	d0a6e683 	ldbu	r2,-25702(gp)
    1c80:	10803fcc 	andi	r2,r2,255
    1c84:	1080201c 	xori	r2,r2,128
    1c88:	10bfe004 	addi	r2,r2,-128
    1c8c:	10801858 	cmpnei	r2,r2,97
    1c90:	1000031e 	bne	r2,zero,1ca0 <main+0x600>
    				state[2] = 'b';
    1c94:	00801884 	movi	r2,98
    1c98:	d0a6e685 	stb	r2,-25702(gp)
    1c9c:	00007106 	br	1e64 <main+0x7c4>
    			} else if(state[2] == 'b') {
    1ca0:	d0a6e683 	ldbu	r2,-25702(gp)
    1ca4:	10803fcc 	andi	r2,r2,255
    1ca8:	1080201c 	xori	r2,r2,128
    1cac:	10bfe004 	addi	r2,r2,-128
    1cb0:	10801898 	cmpnei	r2,r2,98
    1cb4:	1000031e 	bne	r2,zero,1cc4 <main+0x624>
    				state[2] = 'c';
    1cb8:	008018c4 	movi	r2,99
    1cbc:	d0a6e685 	stb	r2,-25702(gp)
    1cc0:	00006806 	br	1e64 <main+0x7c4>
    			} else if(state[2] == 'c') {
    1cc4:	d0a6e683 	ldbu	r2,-25702(gp)
    1cc8:	10803fcc 	andi	r2,r2,255
    1ccc:	1080201c 	xori	r2,r2,128
    1cd0:	10bfe004 	addi	r2,r2,-128
    1cd4:	108018d8 	cmpnei	r2,r2,99
    1cd8:	1000031e 	bne	r2,zero,1ce8 <main+0x648>
    				state[2] = 'd';
    1cdc:	00801904 	movi	r2,100
    1ce0:	d0a6e685 	stb	r2,-25702(gp)
    1ce4:	00005f06 	br	1e64 <main+0x7c4>
    			} else if(state[2] == 'd') {
    1ce8:	d0a6e683 	ldbu	r2,-25702(gp)
    1cec:	10803fcc 	andi	r2,r2,255
    1cf0:	1080201c 	xori	r2,r2,128
    1cf4:	10bfe004 	addi	r2,r2,-128
    1cf8:	10801918 	cmpnei	r2,r2,100
    1cfc:	1000031e 	bne	r2,zero,1d0c <main+0x66c>
    				state[2] = 'e';
    1d00:	00801944 	movi	r2,101
    1d04:	d0a6e685 	stb	r2,-25702(gp)
    1d08:	00005606 	br	1e64 <main+0x7c4>
    			} else if(state[2] == 'e') {
    1d0c:	d0a6e683 	ldbu	r2,-25702(gp)
    1d10:	10803fcc 	andi	r2,r2,255
    1d14:	1080201c 	xori	r2,r2,128
    1d18:	10bfe004 	addi	r2,r2,-128
    1d1c:	10801958 	cmpnei	r2,r2,101
    1d20:	1000031e 	bne	r2,zero,1d30 <main+0x690>
    				state[2] = 'f';
    1d24:	00801984 	movi	r2,102
    1d28:	d0a6e685 	stb	r2,-25702(gp)
    1d2c:	00004d06 	br	1e64 <main+0x7c4>
    			} else if(state[2] == 'f') {
    1d30:	d0a6e683 	ldbu	r2,-25702(gp)
    1d34:	10803fcc 	andi	r2,r2,255
    1d38:	1080201c 	xori	r2,r2,128
    1d3c:	10bfe004 	addi	r2,r2,-128
    1d40:	10801998 	cmpnei	r2,r2,102
    1d44:	1000031e 	bne	r2,zero,1d54 <main+0x6b4>
    				state[2] = 'g';
    1d48:	008019c4 	movi	r2,103
    1d4c:	d0a6e685 	stb	r2,-25702(gp)
    1d50:	00004406 	br	1e64 <main+0x7c4>
    			} else if(state[2] == 'g') {
    1d54:	d0a6e683 	ldbu	r2,-25702(gp)
    1d58:	10803fcc 	andi	r2,r2,255
    1d5c:	1080201c 	xori	r2,r2,128
    1d60:	10bfe004 	addi	r2,r2,-128
    1d64:	108019d8 	cmpnei	r2,r2,103
    1d68:	1000031e 	bne	r2,zero,1d78 <main+0x6d8>
    				state[2] = 'h';
    1d6c:	00801a04 	movi	r2,104
    1d70:	d0a6e685 	stb	r2,-25702(gp)
    1d74:	00003b06 	br	1e64 <main+0x7c4>
    			} else if(state[2] == 'h') {
    1d78:	d0a6e683 	ldbu	r2,-25702(gp)
    1d7c:	10803fcc 	andi	r2,r2,255
    1d80:	1080201c 	xori	r2,r2,128
    1d84:	10bfe004 	addi	r2,r2,-128
    1d88:	10801a18 	cmpnei	r2,r2,104
    1d8c:	1000351e 	bne	r2,zero,1e64 <main+0x7c4>
    				state[2] = '0';
    1d90:	00800c04 	movi	r2,48
    1d94:	d0a6e685 	stb	r2,-25702(gp)
    1d98:	00003206 	br	1e64 <main+0x7c4>
    			}
    		}

    		else if(state[1] == 'd') { // "xdx", Frequency selection
    1d9c:	d0a6e643 	ldbu	r2,-25703(gp)
    1da0:	10803fcc 	andi	r2,r2,255
    1da4:	1080201c 	xori	r2,r2,128
    1da8:	10bfe004 	addi	r2,r2,-128
    1dac:	10801918 	cmpnei	r2,r2,100
    1db0:	10002c1e 	bne	r2,zero,1e64 <main+0x7c4>
    			if(state[2] == '0') {
    1db4:	d0a6e683 	ldbu	r2,-25702(gp)
    1db8:	10803fcc 	andi	r2,r2,255
    1dbc:	1080201c 	xori	r2,r2,128
    1dc0:	10bfe004 	addi	r2,r2,-128
    1dc4:	10800c18 	cmpnei	r2,r2,48
    1dc8:	1000031e 	bne	r2,zero,1dd8 <main+0x738>
    				state[2] = '1';
    1dcc:	00800c44 	movi	r2,49
    1dd0:	d0a6e685 	stb	r2,-25702(gp)
    1dd4:	00002306 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '1') {
    1dd8:	d0a6e683 	ldbu	r2,-25702(gp)
    1ddc:	10803fcc 	andi	r2,r2,255
    1de0:	1080201c 	xori	r2,r2,128
    1de4:	10bfe004 	addi	r2,r2,-128
    1de8:	10800c58 	cmpnei	r2,r2,49
    1dec:	1000031e 	bne	r2,zero,1dfc <main+0x75c>
    				state[2] = '2';
    1df0:	00800c84 	movi	r2,50
    1df4:	d0a6e685 	stb	r2,-25702(gp)
    1df8:	00001a06 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '2') {
    1dfc:	d0a6e683 	ldbu	r2,-25702(gp)
    1e00:	10803fcc 	andi	r2,r2,255
    1e04:	1080201c 	xori	r2,r2,128
    1e08:	10bfe004 	addi	r2,r2,-128
    1e0c:	10800c98 	cmpnei	r2,r2,50
    1e10:	1000031e 	bne	r2,zero,1e20 <main+0x780>
    				state[2] = '3';
    1e14:	00800cc4 	movi	r2,51
    1e18:	d0a6e685 	stb	r2,-25702(gp)
    1e1c:	00001106 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '3') {
    1e20:	d0a6e683 	ldbu	r2,-25702(gp)
    1e24:	10803fcc 	andi	r2,r2,255
    1e28:	1080201c 	xori	r2,r2,128
    1e2c:	10bfe004 	addi	r2,r2,-128
    1e30:	10800cd8 	cmpnei	r2,r2,51
    1e34:	1000031e 	bne	r2,zero,1e44 <main+0x7a4>
    				state[2] = '4';
    1e38:	00800d04 	movi	r2,52
    1e3c:	d0a6e685 	stb	r2,-25702(gp)
    1e40:	00000806 	br	1e64 <main+0x7c4>
    			} else if(state[2] == '4') {
    1e44:	d0a6e683 	ldbu	r2,-25702(gp)
    1e48:	10803fcc 	andi	r2,r2,255
    1e4c:	1080201c 	xori	r2,r2,128
    1e50:	10bfe004 	addi	r2,r2,-128
    1e54:	10800d18 	cmpnei	r2,r2,52
    1e58:	1000021e 	bne	r2,zero,1e64 <main+0x7c4>
    				state[2] = '0';
    1e5c:	00800c04 	movi	r2,48
    1e60:	d0a6e685 	stb	r2,-25702(gp)
    			}
    		}

    		DispAll();
    1e64:	000131c0 	call	131c <DispAll>
			if(pn == 17) pn = 0;
    1e68:	d0a6e017 	ldw	r2,-25728(gp)
    1e6c:	10800458 	cmpnei	r2,r2,17
    1e70:	1000021e 	bne	r2,zero,1e7c <main+0x7dc>
    1e74:	d026e015 	stw	zero,-25728(gp)
    1e78:	00000306 	br	1e88 <main+0x7e8>
			else pn++;
    1e7c:	d0a6e017 	ldw	r2,-25728(gp)
    1e80:	10800044 	addi	r2,r2,1
    1e84:	d0a6e015 	stw	r2,-25728(gp)
    	}

    	if((reg1 & 0x03) == 0x02) { // button1걁뙂믦�{�^깛걂궕돓궠귢궫
    1e88:	e0bff917 	ldw	r2,-28(fp)
    1e8c:	108000cc 	andi	r2,r2,3
    1e90:	10800098 	cmpnei	r2,r2,2
    1e94:	1003df1e 	bne	r2,zero,2e14 <main+0x1774>
    		if(state[1] == 'U') { // "RUN", free-run state
    1e98:	d0a6e643 	ldbu	r2,-25703(gp)
    1e9c:	10803fcc 	andi	r2,r2,255
    1ea0:	1080201c 	xori	r2,r2,128
    1ea4:	10bfe004 	addi	r2,r2,-128
    1ea8:	10801558 	cmpnei	r2,r2,85
    1eac:	1000211e 	bne	r2,zero,1f34 <main+0x894>
				state[0] = 'P';	state[1] = 'N';
    1eb0:	00801404 	movi	r2,80
    1eb4:	d0a6e605 	stb	r2,-25704(gp)
    1eb8:	00801384 	movi	r2,78
    1ebc:	d0a6e645 	stb	r2,-25703(gp)
				if(ChN == 0) state[2] = '0';
    1ec0:	d0a6e517 	ldw	r2,-25708(gp)
    1ec4:	1000031e 	bne	r2,zero,1ed4 <main+0x834>
    1ec8:	00800c04 	movi	r2,48
    1ecc:	d0a6e685 	stb	r2,-25702(gp)
    1ed0:	0003cf06 	br	2e10 <main+0x1770>
				else if(ChN == 1) state[2] = '1';
    1ed4:	d0a6e517 	ldw	r2,-25708(gp)
    1ed8:	10800058 	cmpnei	r2,r2,1
    1edc:	1000031e 	bne	r2,zero,1eec <main+0x84c>
    1ee0:	00800c44 	movi	r2,49
    1ee4:	d0a6e685 	stb	r2,-25702(gp)
    1ee8:	0003c906 	br	2e10 <main+0x1770>
				else if(ChN == 2) state[2] = '2';
    1eec:	d0a6e517 	ldw	r2,-25708(gp)
    1ef0:	10800098 	cmpnei	r2,r2,2
    1ef4:	1000031e 	bne	r2,zero,1f04 <main+0x864>
    1ef8:	00800c84 	movi	r2,50
    1efc:	d0a6e685 	stb	r2,-25702(gp)
    1f00:	0003c306 	br	2e10 <main+0x1770>
				else if(ChN == 3) state[2] = '3';
    1f04:	d0a6e517 	ldw	r2,-25708(gp)
    1f08:	108000d8 	cmpnei	r2,r2,3
    1f0c:	1000031e 	bne	r2,zero,1f1c <main+0x87c>
    1f10:	00800cc4 	movi	r2,51
    1f14:	d0a6e685 	stb	r2,-25702(gp)
    1f18:	0003bd06 	br	2e10 <main+0x1770>
				else if(ChN == 4) state[2] = '4';
    1f1c:	d0a6e517 	ldw	r2,-25708(gp)
    1f20:	10800118 	cmpnei	r2,r2,4
    1f24:	1003ba1e 	bne	r2,zero,2e10 <main+0x1770>
    1f28:	00800d04 	movi	r2,52
    1f2c:	d0a6e685 	stb	r2,-25702(gp)
    1f30:	0003b706 	br	2e10 <main+0x1770>
      		}

    		else if(state[1] == 'N') { // "PNx", Pwm number selection
    1f34:	d0a6e643 	ldbu	r2,-25703(gp)
    1f38:	10803fcc 	andi	r2,r2,255
    1f3c:	1080201c 	xori	r2,r2,128
    1f40:	10bfe004 	addi	r2,r2,-128
    1f44:	10801398 	cmpnei	r2,r2,78
    1f48:	1000381e 	bne	r2,zero,202c <main+0x98c>
    			if(state[2] == '0') ChN = 0;
    1f4c:	d0a6e683 	ldbu	r2,-25702(gp)
    1f50:	10803fcc 	andi	r2,r2,255
    1f54:	1080201c 	xori	r2,r2,128
    1f58:	10bfe004 	addi	r2,r2,-128
    1f5c:	10800c18 	cmpnei	r2,r2,48
    1f60:	1000021e 	bne	r2,zero,1f6c <main+0x8cc>
    1f64:	d026e515 	stw	zero,-25708(gp)
    1f68:	00002306 	br	1ff8 <main+0x958>
    			else if(state[2] == '1') ChN = 1;
    1f6c:	d0a6e683 	ldbu	r2,-25702(gp)
    1f70:	10803fcc 	andi	r2,r2,255
    1f74:	1080201c 	xori	r2,r2,128
    1f78:	10bfe004 	addi	r2,r2,-128
    1f7c:	10800c58 	cmpnei	r2,r2,49
    1f80:	1000031e 	bne	r2,zero,1f90 <main+0x8f0>
    1f84:	00800044 	movi	r2,1
    1f88:	d0a6e515 	stw	r2,-25708(gp)
    1f8c:	00001a06 	br	1ff8 <main+0x958>
    			else if(state[2] == '2') ChN = 2;
    1f90:	d0a6e683 	ldbu	r2,-25702(gp)
    1f94:	10803fcc 	andi	r2,r2,255
    1f98:	1080201c 	xori	r2,r2,128
    1f9c:	10bfe004 	addi	r2,r2,-128
    1fa0:	10800c98 	cmpnei	r2,r2,50
    1fa4:	1000031e 	bne	r2,zero,1fb4 <main+0x914>
    1fa8:	00800084 	movi	r2,2
    1fac:	d0a6e515 	stw	r2,-25708(gp)
    1fb0:	00001106 	br	1ff8 <main+0x958>
    			else if(state[2] == '3') ChN = 3;
    1fb4:	d0a6e683 	ldbu	r2,-25702(gp)
    1fb8:	10803fcc 	andi	r2,r2,255
    1fbc:	1080201c 	xori	r2,r2,128
    1fc0:	10bfe004 	addi	r2,r2,-128
    1fc4:	10800cd8 	cmpnei	r2,r2,51
    1fc8:	1000031e 	bne	r2,zero,1fd8 <main+0x938>
    1fcc:	008000c4 	movi	r2,3
    1fd0:	d0a6e515 	stw	r2,-25708(gp)
    1fd4:	00000806 	br	1ff8 <main+0x958>
    			else if(state[2] == '4') ChN = 4;
    1fd8:	d0a6e683 	ldbu	r2,-25702(gp)
    1fdc:	10803fcc 	andi	r2,r2,255
    1fe0:	1080201c 	xori	r2,r2,128
    1fe4:	10bfe004 	addi	r2,r2,-128
    1fe8:	10800d18 	cmpnei	r2,r2,52
    1fec:	1000021e 	bne	r2,zero,1ff8 <main+0x958>
    1ff0:	00800104 	movi	r2,4
    1ff4:	d0a6e515 	stw	r2,-25708(gp)
				state[0] = 48+ChN;
    1ff8:	d0a6e517 	ldw	r2,-25708(gp)
    1ffc:	10800c04 	addi	r2,r2,48
    2000:	d0a6e605 	stb	r2,-25704(gp)
				state[1] = 'C';
    2004:	008010c4 	movi	r2,67
    2008:	d0a6e645 	stb	r2,-25703(gp)
    			if(Category == 0) state[2] = '0';
    200c:	d0a6e417 	ldw	r2,-25712(gp)
    2010:	1000031e 	bne	r2,zero,2020 <main+0x980>
    2014:	00800c04 	movi	r2,48
    2018:	d0a6e685 	stb	r2,-25702(gp)
    201c:	00037c06 	br	2e10 <main+0x1770>
    			else state[2] = '1';
    2020:	00800c44 	movi	r2,49
    2024:	d0a6e685 	stb	r2,-25702(gp)
    2028:	00037906 	br	2e10 <main+0x1770>
      		}

    		else if(state[1] == 'C') { // "xCx", Category selection
    202c:	d0a6e643 	ldbu	r2,-25703(gp)
    2030:	10803fcc 	andi	r2,r2,255
    2034:	1080201c 	xori	r2,r2,128
    2038:	10bfe004 	addi	r2,r2,-128
    203c:	108010d8 	cmpnei	r2,r2,67
    2040:	1001301e 	bne	r2,zero,2504 <main+0xe64>
    			if(state[2] == '0') {
    2044:	d0a6e683 	ldbu	r2,-25702(gp)
    2048:	10803fcc 	andi	r2,r2,255
    204c:	1080201c 	xori	r2,r2,128
    2050:	10bfe004 	addi	r2,r2,-128
    2054:	10800c18 	cmpnei	r2,r2,48
    2058:	1000e71e 	bne	r2,zero,23f8 <main+0xd58>
    				Category = 0;
    205c:	d026e415 	stw	zero,-25712(gp)
    				state[0] = 48+ChN;
    2060:	d0a6e517 	ldw	r2,-25708(gp)
    2064:	10800c04 	addi	r2,r2,48
    2068:	d0a6e605 	stb	r2,-25704(gp)
    				state[1] = 'F';
    206c:	00801184 	movi	r2,70
    2070:	d0a6e645 	stb	r2,-25703(gp)
    				if(Period[ChN] == 50000000) state[2] = '0';
    2074:	d0e6e517 	ldw	r3,-25708(gp)
    2078:	00800074 	movhi	r2,1
    207c:	10b53e04 	addi	r2,r2,-11016
    2080:	18c7883a 	add	r3,r3,r3
    2084:	18c7883a 	add	r3,r3,r3
    2088:	10c5883a 	add	r2,r2,r3
    208c:	10c00017 	ldw	r3,0(r2)
    2090:	0080bef4 	movhi	r2,763
    2094:	10bc2004 	addi	r2,r2,-3968
    2098:	1880031e 	bne	r3,r2,20a8 <main+0xa08>
    209c:	00800c04 	movi	r2,48
    20a0:	d0a6e685 	stb	r2,-25702(gp)
    20a4:	00035a06 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 25000000) state[2] = '1';
    20a8:	d0e6e517 	ldw	r3,-25708(gp)
    20ac:	00800074 	movhi	r2,1
    20b0:	10b53e04 	addi	r2,r2,-11016
    20b4:	18c7883a 	add	r3,r3,r3
    20b8:	18c7883a 	add	r3,r3,r3
    20bc:	10c5883a 	add	r2,r2,r3
    20c0:	10c00017 	ldw	r3,0(r2)
    20c4:	00805f74 	movhi	r2,381
    20c8:	109e1004 	addi	r2,r2,30784
    20cc:	1880031e 	bne	r3,r2,20dc <main+0xa3c>
    20d0:	00800c44 	movi	r2,49
    20d4:	d0a6e685 	stb	r2,-25702(gp)
    20d8:	00034d06 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 10000000) state[2] = '2';
    20dc:	d0e6e517 	ldw	r3,-25708(gp)
    20e0:	00800074 	movhi	r2,1
    20e4:	10b53e04 	addi	r2,r2,-11016
    20e8:	18c7883a 	add	r3,r3,r3
    20ec:	18c7883a 	add	r3,r3,r3
    20f0:	10c5883a 	add	r2,r2,r3
    20f4:	10c00017 	ldw	r3,0(r2)
    20f8:	00802674 	movhi	r2,153
    20fc:	10a5a004 	addi	r2,r2,-27008
    2100:	1880031e 	bne	r3,r2,2110 <main+0xa70>
    2104:	00800c84 	movi	r2,50
    2108:	d0a6e685 	stb	r2,-25702(gp)
    210c:	00034006 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 5000000) state[2] = '3';
    2110:	d0e6e517 	ldw	r3,-25708(gp)
    2114:	00800074 	movhi	r2,1
    2118:	10b53e04 	addi	r2,r2,-11016
    211c:	18c7883a 	add	r3,r3,r3
    2120:	18c7883a 	add	r3,r3,r3
    2124:	10c5883a 	add	r2,r2,r3
    2128:	10c00017 	ldw	r3,0(r2)
    212c:	00801334 	movhi	r2,76
    2130:	1092d004 	addi	r2,r2,19264
    2134:	1880031e 	bne	r3,r2,2144 <main+0xaa4>
    2138:	00800cc4 	movi	r2,51
    213c:	d0a6e685 	stb	r2,-25702(gp)
    2140:	00033306 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 2500000) state[2] = '4';
    2144:	d0e6e517 	ldw	r3,-25708(gp)
    2148:	00800074 	movhi	r2,1
    214c:	10b53e04 	addi	r2,r2,-11016
    2150:	18c7883a 	add	r3,r3,r3
    2154:	18c7883a 	add	r3,r3,r3
    2158:	10c5883a 	add	r2,r2,r3
    215c:	10c00017 	ldw	r3,0(r2)
    2160:	008009b4 	movhi	r2,38
    2164:	10896804 	addi	r2,r2,9632
    2168:	1880031e 	bne	r3,r2,2178 <main+0xad8>
    216c:	00800d04 	movi	r2,52
    2170:	d0a6e685 	stb	r2,-25702(gp)
    2174:	00032606 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 1000000) state[2] = '5';
    2178:	d0e6e517 	ldw	r3,-25708(gp)
    217c:	00800074 	movhi	r2,1
    2180:	10b53e04 	addi	r2,r2,-11016
    2184:	18c7883a 	add	r3,r3,r3
    2188:	18c7883a 	add	r3,r3,r3
    218c:	10c5883a 	add	r2,r2,r3
    2190:	10c00017 	ldw	r3,0(r2)
    2194:	008003f4 	movhi	r2,15
    2198:	10909004 	addi	r2,r2,16960
    219c:	1880031e 	bne	r3,r2,21ac <main+0xb0c>
    21a0:	00800d44 	movi	r2,53
    21a4:	d0a6e685 	stb	r2,-25702(gp)
    21a8:	00031906 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 500000) state[2] = '6';
    21ac:	d0e6e517 	ldw	r3,-25708(gp)
    21b0:	00800074 	movhi	r2,1
    21b4:	10b53e04 	addi	r2,r2,-11016
    21b8:	18c7883a 	add	r3,r3,r3
    21bc:	18c7883a 	add	r3,r3,r3
    21c0:	10c5883a 	add	r2,r2,r3
    21c4:	10c00017 	ldw	r3,0(r2)
    21c8:	00800234 	movhi	r2,8
    21cc:	10a84804 	addi	r2,r2,-24288
    21d0:	1880031e 	bne	r3,r2,21e0 <main+0xb40>
    21d4:	00800d84 	movi	r2,54
    21d8:	d0a6e685 	stb	r2,-25702(gp)
    21dc:	00030c06 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 250000) state[2] = '7';
    21e0:	d0e6e517 	ldw	r3,-25708(gp)
    21e4:	00800074 	movhi	r2,1
    21e8:	10b53e04 	addi	r2,r2,-11016
    21ec:	18c7883a 	add	r3,r3,r3
    21f0:	18c7883a 	add	r3,r3,r3
    21f4:	10c5883a 	add	r2,r2,r3
    21f8:	10c00017 	ldw	r3,0(r2)
    21fc:	00800134 	movhi	r2,4
    2200:	10b42404 	addi	r2,r2,-12144
    2204:	1880031e 	bne	r3,r2,2214 <main+0xb74>
    2208:	00800dc4 	movi	r2,55
    220c:	d0a6e685 	stb	r2,-25702(gp)
    2210:	0002ff06 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 100000) state[2] = '8';
    2214:	d0e6e517 	ldw	r3,-25708(gp)
    2218:	00800074 	movhi	r2,1
    221c:	10b53e04 	addi	r2,r2,-11016
    2220:	18c7883a 	add	r3,r3,r3
    2224:	18c7883a 	add	r3,r3,r3
    2228:	10c5883a 	add	r2,r2,r3
    222c:	10c00017 	ldw	r3,0(r2)
    2230:	008000b4 	movhi	r2,2
    2234:	10a1a804 	addi	r2,r2,-31072
    2238:	1880031e 	bne	r3,r2,2248 <main+0xba8>
    223c:	00800e04 	movi	r2,56
    2240:	d0a6e685 	stb	r2,-25702(gp)
    2244:	0002f206 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 50000) state[2] = '9';
    2248:	d0e6e517 	ldw	r3,-25708(gp)
    224c:	00800074 	movhi	r2,1
    2250:	10b53e04 	addi	r2,r2,-11016
    2254:	18c7883a 	add	r3,r3,r3
    2258:	18c7883a 	add	r3,r3,r3
    225c:	10c5883a 	add	r2,r2,r3
    2260:	10c00017 	ldw	r3,0(r2)
    2264:	00b0d414 	movui	r2,50000
    2268:	1880031e 	bne	r3,r2,2278 <main+0xbd8>
    226c:	00800e44 	movi	r2,57
    2270:	d0a6e685 	stb	r2,-25702(gp)
    2274:	0002e606 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 25000) state[2] = 'a';
    2278:	d0e6e517 	ldw	r3,-25708(gp)
    227c:	00800074 	movhi	r2,1
    2280:	10b53e04 	addi	r2,r2,-11016
    2284:	18c7883a 	add	r3,r3,r3
    2288:	18c7883a 	add	r3,r3,r3
    228c:	10c5883a 	add	r2,r2,r3
    2290:	10800017 	ldw	r2,0(r2)
    2294:	10986a18 	cmpnei	r2,r2,25000
    2298:	1000031e 	bne	r2,zero,22a8 <main+0xc08>
    229c:	00801844 	movi	r2,97
    22a0:	d0a6e685 	stb	r2,-25702(gp)
    22a4:	0002da06 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 10000) state[2] = 'b';
    22a8:	d0e6e517 	ldw	r3,-25708(gp)
    22ac:	00800074 	movhi	r2,1
    22b0:	10b53e04 	addi	r2,r2,-11016
    22b4:	18c7883a 	add	r3,r3,r3
    22b8:	18c7883a 	add	r3,r3,r3
    22bc:	10c5883a 	add	r2,r2,r3
    22c0:	10800017 	ldw	r2,0(r2)
    22c4:	1089c418 	cmpnei	r2,r2,10000
    22c8:	1000031e 	bne	r2,zero,22d8 <main+0xc38>
    22cc:	00801884 	movi	r2,98
    22d0:	d0a6e685 	stb	r2,-25702(gp)
    22d4:	0002ce06 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 5000) state[2] = 'c';
    22d8:	d0e6e517 	ldw	r3,-25708(gp)
    22dc:	00800074 	movhi	r2,1
    22e0:	10b53e04 	addi	r2,r2,-11016
    22e4:	18c7883a 	add	r3,r3,r3
    22e8:	18c7883a 	add	r3,r3,r3
    22ec:	10c5883a 	add	r2,r2,r3
    22f0:	10800017 	ldw	r2,0(r2)
    22f4:	1084e218 	cmpnei	r2,r2,5000
    22f8:	1000031e 	bne	r2,zero,2308 <main+0xc68>
    22fc:	008018c4 	movi	r2,99
    2300:	d0a6e685 	stb	r2,-25702(gp)
    2304:	0002c206 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 2500) state[2] = 'd';
    2308:	d0e6e517 	ldw	r3,-25708(gp)
    230c:	00800074 	movhi	r2,1
    2310:	10b53e04 	addi	r2,r2,-11016
    2314:	18c7883a 	add	r3,r3,r3
    2318:	18c7883a 	add	r3,r3,r3
    231c:	10c5883a 	add	r2,r2,r3
    2320:	10800017 	ldw	r2,0(r2)
    2324:	10827118 	cmpnei	r2,r2,2500
    2328:	1000031e 	bne	r2,zero,2338 <main+0xc98>
    232c:	00801904 	movi	r2,100
    2330:	d0a6e685 	stb	r2,-25702(gp)
    2334:	0002b606 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 1000) state[2] = 'e';
    2338:	d0e6e517 	ldw	r3,-25708(gp)
    233c:	00800074 	movhi	r2,1
    2340:	10b53e04 	addi	r2,r2,-11016
    2344:	18c7883a 	add	r3,r3,r3
    2348:	18c7883a 	add	r3,r3,r3
    234c:	10c5883a 	add	r2,r2,r3
    2350:	10800017 	ldw	r2,0(r2)
    2354:	1080fa18 	cmpnei	r2,r2,1000
    2358:	1000031e 	bne	r2,zero,2368 <main+0xcc8>
    235c:	00801944 	movi	r2,101
    2360:	d0a6e685 	stb	r2,-25702(gp)
    2364:	0002aa06 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 500) state[2] = 'f';
    2368:	d0e6e517 	ldw	r3,-25708(gp)
    236c:	00800074 	movhi	r2,1
    2370:	10b53e04 	addi	r2,r2,-11016
    2374:	18c7883a 	add	r3,r3,r3
    2378:	18c7883a 	add	r3,r3,r3
    237c:	10c5883a 	add	r2,r2,r3
    2380:	10800017 	ldw	r2,0(r2)
    2384:	10807d18 	cmpnei	r2,r2,500
    2388:	1000031e 	bne	r2,zero,2398 <main+0xcf8>
    238c:	00801984 	movi	r2,102
    2390:	d0a6e685 	stb	r2,-25702(gp)
    2394:	00029e06 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 250) state[2] = 'g';
    2398:	d0e6e517 	ldw	r3,-25708(gp)
    239c:	00800074 	movhi	r2,1
    23a0:	10b53e04 	addi	r2,r2,-11016
    23a4:	18c7883a 	add	r3,r3,r3
    23a8:	18c7883a 	add	r3,r3,r3
    23ac:	10c5883a 	add	r2,r2,r3
    23b0:	10800017 	ldw	r2,0(r2)
    23b4:	10803e98 	cmpnei	r2,r2,250
    23b8:	1000031e 	bne	r2,zero,23c8 <main+0xd28>
    23bc:	008019c4 	movi	r2,103
    23c0:	d0a6e685 	stb	r2,-25702(gp)
    23c4:	00029206 	br	2e10 <main+0x1770>
    				else if(Period[ChN] == 100) state[2] = 'h';
    23c8:	d0e6e517 	ldw	r3,-25708(gp)
    23cc:	00800074 	movhi	r2,1
    23d0:	10b53e04 	addi	r2,r2,-11016
    23d4:	18c7883a 	add	r3,r3,r3
    23d8:	18c7883a 	add	r3,r3,r3
    23dc:	10c5883a 	add	r2,r2,r3
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	10801918 	cmpnei	r2,r2,100
    23e8:	1002891e 	bne	r2,zero,2e10 <main+0x1770>
    23ec:	00801a04 	movi	r2,104
    23f0:	d0a6e685 	stb	r2,-25702(gp)
    23f4:	00028606 	br	2e10 <main+0x1770>
    			} else {
    				Category = 1;
    23f8:	00800044 	movi	r2,1
    23fc:	d0a6e415 	stw	r2,-25712(gp)
    				state[0] = 48+ChN;
    2400:	d0a6e517 	ldw	r2,-25708(gp)
    2404:	10800c04 	addi	r2,r2,48
    2408:	d0a6e605 	stb	r2,-25704(gp)
    				state[1] = 'd';
    240c:	00801904 	movi	r2,100
    2410:	d0a6e645 	stb	r2,-25703(gp)
    				if(Duty[ChN] == 1) state[2] = '0';
    2414:	d0e6e517 	ldw	r3,-25708(gp)
    2418:	00800074 	movhi	r2,1
    241c:	10b53604 	addi	r2,r2,-11048
    2420:	18c7883a 	add	r3,r3,r3
    2424:	18c7883a 	add	r3,r3,r3
    2428:	10c5883a 	add	r2,r2,r3
    242c:	10800017 	ldw	r2,0(r2)
    2430:	10800058 	cmpnei	r2,r2,1
    2434:	1000031e 	bne	r2,zero,2444 <main+0xda4>
    2438:	00800c04 	movi	r2,48
    243c:	d0a6e685 	stb	r2,-25702(gp)
    2440:	00027306 	br	2e10 <main+0x1770>
    				else if(Duty[ChN] == 2) state[2] = '1';
    2444:	d0e6e517 	ldw	r3,-25708(gp)
    2448:	00800074 	movhi	r2,1
    244c:	10b53604 	addi	r2,r2,-11048
    2450:	18c7883a 	add	r3,r3,r3
    2454:	18c7883a 	add	r3,r3,r3
    2458:	10c5883a 	add	r2,r2,r3
    245c:	10800017 	ldw	r2,0(r2)
    2460:	10800098 	cmpnei	r2,r2,2
    2464:	1000031e 	bne	r2,zero,2474 <main+0xdd4>
    2468:	00800c44 	movi	r2,49
    246c:	d0a6e685 	stb	r2,-25702(gp)
    2470:	00026706 	br	2e10 <main+0x1770>
    				else if(Duty[ChN] == 3) state[2] = '2';
    2474:	d0e6e517 	ldw	r3,-25708(gp)
    2478:	00800074 	movhi	r2,1
    247c:	10b53604 	addi	r2,r2,-11048
    2480:	18c7883a 	add	r3,r3,r3
    2484:	18c7883a 	add	r3,r3,r3
    2488:	10c5883a 	add	r2,r2,r3
    248c:	10800017 	ldw	r2,0(r2)
    2490:	108000d8 	cmpnei	r2,r2,3
    2494:	1000031e 	bne	r2,zero,24a4 <main+0xe04>
    2498:	00800c84 	movi	r2,50
    249c:	d0a6e685 	stb	r2,-25702(gp)
    24a0:	00025b06 	br	2e10 <main+0x1770>
    				else if(Duty[ChN] == 4) state[2] = '3';
    24a4:	d0e6e517 	ldw	r3,-25708(gp)
    24a8:	00800074 	movhi	r2,1
    24ac:	10b53604 	addi	r2,r2,-11048
    24b0:	18c7883a 	add	r3,r3,r3
    24b4:	18c7883a 	add	r3,r3,r3
    24b8:	10c5883a 	add	r2,r2,r3
    24bc:	10800017 	ldw	r2,0(r2)
    24c0:	10800118 	cmpnei	r2,r2,4
    24c4:	1000031e 	bne	r2,zero,24d4 <main+0xe34>
    24c8:	00800cc4 	movi	r2,51
    24cc:	d0a6e685 	stb	r2,-25702(gp)
    24d0:	00024f06 	br	2e10 <main+0x1770>
    				else if(Duty[ChN] == 5) state[2] = '4';
    24d4:	d0e6e517 	ldw	r3,-25708(gp)
    24d8:	00800074 	movhi	r2,1
    24dc:	10b53604 	addi	r2,r2,-11048
    24e0:	18c7883a 	add	r3,r3,r3
    24e4:	18c7883a 	add	r3,r3,r3
    24e8:	10c5883a 	add	r2,r2,r3
    24ec:	10800017 	ldw	r2,0(r2)
    24f0:	10800158 	cmpnei	r2,r2,5
    24f4:	1002461e 	bne	r2,zero,2e10 <main+0x1770>
    24f8:	00800d04 	movi	r2,52
    24fc:	d0a6e685 	stb	r2,-25702(gp)
    2500:	00024306 	br	2e10 <main+0x1770>
    			}
      		}

    		else if(state[1] == 'F') { // "xFx", Category selection
    2504:	d0a6e643 	ldbu	r2,-25703(gp)
    2508:	10803fcc 	andi	r2,r2,255
    250c:	1080201c 	xori	r2,r2,128
    2510:	10bfe004 	addi	r2,r2,-128
    2514:	10801198 	cmpnei	r2,r2,70
    2518:	1001961e 	bne	r2,zero,2b74 <main+0x14d4>
				if(state[2] == '0') {
    251c:	d0a6e683 	ldbu	r2,-25702(gp)
    2520:	10803fcc 	andi	r2,r2,255
    2524:	1080201c 	xori	r2,r2,128
    2528:	10bfe004 	addi	r2,r2,-128
    252c:	10800c18 	cmpnei	r2,r2,48
    2530:	10000a1e 	bne	r2,zero,255c <main+0xebc>
					Period[ChN] = 50000000; // 1Hz
    2534:	d0e6e517 	ldw	r3,-25708(gp)
    2538:	00800074 	movhi	r2,1
    253c:	10b53e04 	addi	r2,r2,-11016
    2540:	18c7883a 	add	r3,r3,r3
    2544:	18c7883a 	add	r3,r3,r3
    2548:	10c7883a 	add	r3,r2,r3
    254c:	0080bef4 	movhi	r2,763
    2550:	10bc2004 	addi	r2,r2,-3968
    2554:	18800015 	stw	r2,0(r3)
    2558:	00010606 	br	2974 <main+0x12d4>
				} else if(state[2] == '1') {
    255c:	d0a6e683 	ldbu	r2,-25702(gp)
    2560:	10803fcc 	andi	r2,r2,255
    2564:	1080201c 	xori	r2,r2,128
    2568:	10bfe004 	addi	r2,r2,-128
    256c:	10800c58 	cmpnei	r2,r2,49
    2570:	10000a1e 	bne	r2,zero,259c <main+0xefc>
						Period[ChN] = 25000000; // 2Hz
    2574:	d0e6e517 	ldw	r3,-25708(gp)
    2578:	00800074 	movhi	r2,1
    257c:	10b53e04 	addi	r2,r2,-11016
    2580:	18c7883a 	add	r3,r3,r3
    2584:	18c7883a 	add	r3,r3,r3
    2588:	10c7883a 	add	r3,r2,r3
    258c:	00805f74 	movhi	r2,381
    2590:	109e1004 	addi	r2,r2,30784
    2594:	18800015 	stw	r2,0(r3)
    2598:	0000f606 	br	2974 <main+0x12d4>
				} else if(state[2] == '2') {
    259c:	d0a6e683 	ldbu	r2,-25702(gp)
    25a0:	10803fcc 	andi	r2,r2,255
    25a4:	1080201c 	xori	r2,r2,128
    25a8:	10bfe004 	addi	r2,r2,-128
    25ac:	10800c98 	cmpnei	r2,r2,50
    25b0:	10000a1e 	bne	r2,zero,25dc <main+0xf3c>
						Period[ChN] = 10000000; // 5Hz
    25b4:	d0e6e517 	ldw	r3,-25708(gp)
    25b8:	00800074 	movhi	r2,1
    25bc:	10b53e04 	addi	r2,r2,-11016
    25c0:	18c7883a 	add	r3,r3,r3
    25c4:	18c7883a 	add	r3,r3,r3
    25c8:	10c7883a 	add	r3,r2,r3
    25cc:	00802674 	movhi	r2,153
    25d0:	10a5a004 	addi	r2,r2,-27008
    25d4:	18800015 	stw	r2,0(r3)
    25d8:	0000e606 	br	2974 <main+0x12d4>
				} else if(state[2] == '3') {
    25dc:	d0a6e683 	ldbu	r2,-25702(gp)
    25e0:	10803fcc 	andi	r2,r2,255
    25e4:	1080201c 	xori	r2,r2,128
    25e8:	10bfe004 	addi	r2,r2,-128
    25ec:	10800cd8 	cmpnei	r2,r2,51
    25f0:	10000a1e 	bne	r2,zero,261c <main+0xf7c>
						Period[ChN] = 5000000; // 10Hz
    25f4:	d0e6e517 	ldw	r3,-25708(gp)
    25f8:	00800074 	movhi	r2,1
    25fc:	10b53e04 	addi	r2,r2,-11016
    2600:	18c7883a 	add	r3,r3,r3
    2604:	18c7883a 	add	r3,r3,r3
    2608:	10c7883a 	add	r3,r2,r3
    260c:	00801334 	movhi	r2,76
    2610:	1092d004 	addi	r2,r2,19264
    2614:	18800015 	stw	r2,0(r3)
    2618:	0000d606 	br	2974 <main+0x12d4>
				} else if(state[2] == '4') {
    261c:	d0a6e683 	ldbu	r2,-25702(gp)
    2620:	10803fcc 	andi	r2,r2,255
    2624:	1080201c 	xori	r2,r2,128
    2628:	10bfe004 	addi	r2,r2,-128
    262c:	10800d18 	cmpnei	r2,r2,52
    2630:	10000a1e 	bne	r2,zero,265c <main+0xfbc>
						Period[ChN] = 2500000; // 20Hz
    2634:	d0e6e517 	ldw	r3,-25708(gp)
    2638:	00800074 	movhi	r2,1
    263c:	10b53e04 	addi	r2,r2,-11016
    2640:	18c7883a 	add	r3,r3,r3
    2644:	18c7883a 	add	r3,r3,r3
    2648:	10c7883a 	add	r3,r2,r3
    264c:	008009b4 	movhi	r2,38
    2650:	10896804 	addi	r2,r2,9632
    2654:	18800015 	stw	r2,0(r3)
    2658:	0000c606 	br	2974 <main+0x12d4>
				} else if(state[2] == '5') {
    265c:	d0a6e683 	ldbu	r2,-25702(gp)
    2660:	10803fcc 	andi	r2,r2,255
    2664:	1080201c 	xori	r2,r2,128
    2668:	10bfe004 	addi	r2,r2,-128
    266c:	10800d58 	cmpnei	r2,r2,53
    2670:	10000a1e 	bne	r2,zero,269c <main+0xffc>
						Period[ChN] = 1000000; // 50Hz
    2674:	d0e6e517 	ldw	r3,-25708(gp)
    2678:	00800074 	movhi	r2,1
    267c:	10b53e04 	addi	r2,r2,-11016
    2680:	18c7883a 	add	r3,r3,r3
    2684:	18c7883a 	add	r3,r3,r3
    2688:	10c7883a 	add	r3,r2,r3
    268c:	008003f4 	movhi	r2,15
    2690:	10909004 	addi	r2,r2,16960
    2694:	18800015 	stw	r2,0(r3)
    2698:	0000b606 	br	2974 <main+0x12d4>
				} else if(state[2] == '6') {
    269c:	d0a6e683 	ldbu	r2,-25702(gp)
    26a0:	10803fcc 	andi	r2,r2,255
    26a4:	1080201c 	xori	r2,r2,128
    26a8:	10bfe004 	addi	r2,r2,-128
    26ac:	10800d98 	cmpnei	r2,r2,54
    26b0:	10000a1e 	bne	r2,zero,26dc <main+0x103c>
						Period[ChN] = 500000; // 100Hz
    26b4:	d0e6e517 	ldw	r3,-25708(gp)
    26b8:	00800074 	movhi	r2,1
    26bc:	10b53e04 	addi	r2,r2,-11016
    26c0:	18c7883a 	add	r3,r3,r3
    26c4:	18c7883a 	add	r3,r3,r3
    26c8:	10c7883a 	add	r3,r2,r3
    26cc:	00800234 	movhi	r2,8
    26d0:	10a84804 	addi	r2,r2,-24288
    26d4:	18800015 	stw	r2,0(r3)
    26d8:	0000a606 	br	2974 <main+0x12d4>
				} else if(state[2] == '7') {
    26dc:	d0a6e683 	ldbu	r2,-25702(gp)
    26e0:	10803fcc 	andi	r2,r2,255
    26e4:	1080201c 	xori	r2,r2,128
    26e8:	10bfe004 	addi	r2,r2,-128
    26ec:	10800dd8 	cmpnei	r2,r2,55
    26f0:	10000a1e 	bne	r2,zero,271c <main+0x107c>
						Period[ChN] = 250000; // 200Hz
    26f4:	d0e6e517 	ldw	r3,-25708(gp)
    26f8:	00800074 	movhi	r2,1
    26fc:	10b53e04 	addi	r2,r2,-11016
    2700:	18c7883a 	add	r3,r3,r3
    2704:	18c7883a 	add	r3,r3,r3
    2708:	10c7883a 	add	r3,r2,r3
    270c:	00800134 	movhi	r2,4
    2710:	10b42404 	addi	r2,r2,-12144
    2714:	18800015 	stw	r2,0(r3)
    2718:	00009606 	br	2974 <main+0x12d4>
				} else if(state[2] == '8') {
    271c:	d0a6e683 	ldbu	r2,-25702(gp)
    2720:	10803fcc 	andi	r2,r2,255
    2724:	1080201c 	xori	r2,r2,128
    2728:	10bfe004 	addi	r2,r2,-128
    272c:	10800e18 	cmpnei	r2,r2,56
    2730:	10000a1e 	bne	r2,zero,275c <main+0x10bc>
						Period[ChN] = 100000; // 500Hz
    2734:	d0e6e517 	ldw	r3,-25708(gp)
    2738:	00800074 	movhi	r2,1
    273c:	10b53e04 	addi	r2,r2,-11016
    2740:	18c7883a 	add	r3,r3,r3
    2744:	18c7883a 	add	r3,r3,r3
    2748:	10c7883a 	add	r3,r2,r3
    274c:	008000b4 	movhi	r2,2
    2750:	10a1a804 	addi	r2,r2,-31072
    2754:	18800015 	stw	r2,0(r3)
    2758:	00008606 	br	2974 <main+0x12d4>
				} else if(state[2] == '9') {
    275c:	d0a6e683 	ldbu	r2,-25702(gp)
    2760:	10803fcc 	andi	r2,r2,255
    2764:	1080201c 	xori	r2,r2,128
    2768:	10bfe004 	addi	r2,r2,-128
    276c:	10800e58 	cmpnei	r2,r2,57
    2770:	1000091e 	bne	r2,zero,2798 <main+0x10f8>
						Period[ChN] = 50000; // 1kHz
    2774:	d0e6e517 	ldw	r3,-25708(gp)
    2778:	00800074 	movhi	r2,1
    277c:	10b53e04 	addi	r2,r2,-11016
    2780:	18c7883a 	add	r3,r3,r3
    2784:	18c7883a 	add	r3,r3,r3
    2788:	10c5883a 	add	r2,r2,r3
    278c:	00f0d414 	movui	r3,50000
    2790:	10c00015 	stw	r3,0(r2)
    2794:	00007706 	br	2974 <main+0x12d4>
				} else if(state[2] == 'a') {
    2798:	d0a6e683 	ldbu	r2,-25702(gp)
    279c:	10803fcc 	andi	r2,r2,255
    27a0:	1080201c 	xori	r2,r2,128
    27a4:	10bfe004 	addi	r2,r2,-128
    27a8:	10801858 	cmpnei	r2,r2,97
    27ac:	1000091e 	bne	r2,zero,27d4 <main+0x1134>
						Period[ChN] = 25000; // 2kHz
    27b0:	d0e6e517 	ldw	r3,-25708(gp)
    27b4:	00800074 	movhi	r2,1
    27b8:	10b53e04 	addi	r2,r2,-11016
    27bc:	18c7883a 	add	r3,r3,r3
    27c0:	18c7883a 	add	r3,r3,r3
    27c4:	10c5883a 	add	r2,r2,r3
    27c8:	00d86a04 	movi	r3,25000
    27cc:	10c00015 	stw	r3,0(r2)
    27d0:	00006806 	br	2974 <main+0x12d4>
				} else if(state[2] == 'b') {
    27d4:	d0a6e683 	ldbu	r2,-25702(gp)
    27d8:	10803fcc 	andi	r2,r2,255
    27dc:	1080201c 	xori	r2,r2,128
    27e0:	10bfe004 	addi	r2,r2,-128
    27e4:	10801898 	cmpnei	r2,r2,98
    27e8:	1000091e 	bne	r2,zero,2810 <main+0x1170>
						Period[ChN] = 10000; // 5kHz
    27ec:	d0e6e517 	ldw	r3,-25708(gp)
    27f0:	00800074 	movhi	r2,1
    27f4:	10b53e04 	addi	r2,r2,-11016
    27f8:	18c7883a 	add	r3,r3,r3
    27fc:	18c7883a 	add	r3,r3,r3
    2800:	10c5883a 	add	r2,r2,r3
    2804:	00c9c404 	movi	r3,10000
    2808:	10c00015 	stw	r3,0(r2)
    280c:	00005906 	br	2974 <main+0x12d4>
				} else if(state[2] == 'c') {
    2810:	d0a6e683 	ldbu	r2,-25702(gp)
    2814:	10803fcc 	andi	r2,r2,255
    2818:	1080201c 	xori	r2,r2,128
    281c:	10bfe004 	addi	r2,r2,-128
    2820:	108018d8 	cmpnei	r2,r2,99
    2824:	1000091e 	bne	r2,zero,284c <main+0x11ac>
						Period[ChN] = 5000; // 10kHz
    2828:	d0e6e517 	ldw	r3,-25708(gp)
    282c:	00800074 	movhi	r2,1
    2830:	10b53e04 	addi	r2,r2,-11016
    2834:	18c7883a 	add	r3,r3,r3
    2838:	18c7883a 	add	r3,r3,r3
    283c:	10c5883a 	add	r2,r2,r3
    2840:	00c4e204 	movi	r3,5000
    2844:	10c00015 	stw	r3,0(r2)
    2848:	00004a06 	br	2974 <main+0x12d4>
				} else if(state[2] == 'd') {
    284c:	d0a6e683 	ldbu	r2,-25702(gp)
    2850:	10803fcc 	andi	r2,r2,255
    2854:	1080201c 	xori	r2,r2,128
    2858:	10bfe004 	addi	r2,r2,-128
    285c:	10801918 	cmpnei	r2,r2,100
    2860:	1000091e 	bne	r2,zero,2888 <main+0x11e8>
						Period[ChN] = 2500; // 20kHz
    2864:	d0e6e517 	ldw	r3,-25708(gp)
    2868:	00800074 	movhi	r2,1
    286c:	10b53e04 	addi	r2,r2,-11016
    2870:	18c7883a 	add	r3,r3,r3
    2874:	18c7883a 	add	r3,r3,r3
    2878:	10c5883a 	add	r2,r2,r3
    287c:	00c27104 	movi	r3,2500
    2880:	10c00015 	stw	r3,0(r2)
    2884:	00003b06 	br	2974 <main+0x12d4>
				} else if(state[2] == 'e') {
    2888:	d0a6e683 	ldbu	r2,-25702(gp)
    288c:	10803fcc 	andi	r2,r2,255
    2890:	1080201c 	xori	r2,r2,128
    2894:	10bfe004 	addi	r2,r2,-128
    2898:	10801958 	cmpnei	r2,r2,101
    289c:	1000091e 	bne	r2,zero,28c4 <main+0x1224>
						Period[ChN] = 1000; // 50kHz
    28a0:	d0e6e517 	ldw	r3,-25708(gp)
    28a4:	00800074 	movhi	r2,1
    28a8:	10b53e04 	addi	r2,r2,-11016
    28ac:	18c7883a 	add	r3,r3,r3
    28b0:	18c7883a 	add	r3,r3,r3
    28b4:	10c5883a 	add	r2,r2,r3
    28b8:	00c0fa04 	movi	r3,1000
    28bc:	10c00015 	stw	r3,0(r2)
    28c0:	00002c06 	br	2974 <main+0x12d4>
				} else if(state[2] == 'f') {
    28c4:	d0a6e683 	ldbu	r2,-25702(gp)
    28c8:	10803fcc 	andi	r2,r2,255
    28cc:	1080201c 	xori	r2,r2,128
    28d0:	10bfe004 	addi	r2,r2,-128
    28d4:	10801998 	cmpnei	r2,r2,102
    28d8:	1000091e 	bne	r2,zero,2900 <main+0x1260>
						Period[ChN] = 500; // 100kHz
    28dc:	d0e6e517 	ldw	r3,-25708(gp)
    28e0:	00800074 	movhi	r2,1
    28e4:	10b53e04 	addi	r2,r2,-11016
    28e8:	18c7883a 	add	r3,r3,r3
    28ec:	18c7883a 	add	r3,r3,r3
    28f0:	10c5883a 	add	r2,r2,r3
    28f4:	00c07d04 	movi	r3,500
    28f8:	10c00015 	stw	r3,0(r2)
    28fc:	00001d06 	br	2974 <main+0x12d4>
				} else if(state[2] == 'g') {
    2900:	d0a6e683 	ldbu	r2,-25702(gp)
    2904:	10803fcc 	andi	r2,r2,255
    2908:	1080201c 	xori	r2,r2,128
    290c:	10bfe004 	addi	r2,r2,-128
    2910:	108019d8 	cmpnei	r2,r2,103
    2914:	1000091e 	bne	r2,zero,293c <main+0x129c>
						Period[ChN] = 250; // 200kHz
    2918:	d0e6e517 	ldw	r3,-25708(gp)
    291c:	00800074 	movhi	r2,1
    2920:	10b53e04 	addi	r2,r2,-11016
    2924:	18c7883a 	add	r3,r3,r3
    2928:	18c7883a 	add	r3,r3,r3
    292c:	10c5883a 	add	r2,r2,r3
    2930:	00c03e84 	movi	r3,250
    2934:	10c00015 	stw	r3,0(r2)
    2938:	00000e06 	br	2974 <main+0x12d4>
				} else if(state[2] == 'h') {
    293c:	d0a6e683 	ldbu	r2,-25702(gp)
    2940:	10803fcc 	andi	r2,r2,255
    2944:	1080201c 	xori	r2,r2,128
    2948:	10bfe004 	addi	r2,r2,-128
    294c:	10801a18 	cmpnei	r2,r2,104
    2950:	1000081e 	bne	r2,zero,2974 <main+0x12d4>
						Period[ChN] = 100; // 500kHz
    2954:	d0e6e517 	ldw	r3,-25708(gp)
    2958:	00800074 	movhi	r2,1
    295c:	10b53e04 	addi	r2,r2,-11016
    2960:	18c7883a 	add	r3,r3,r3
    2964:	18c7883a 	add	r3,r3,r3
    2968:	10c5883a 	add	r2,r2,r3
    296c:	00c01904 	movi	r3,100
    2970:	10c00015 	stw	r3,0(r2)
				}
				Decode[ChN] = Period[ChN] * Duty[ChN] / 10;
    2974:	d426e517 	ldw	r16,-25708(gp)
    2978:	d0e6e517 	ldw	r3,-25708(gp)
    297c:	00800074 	movhi	r2,1
    2980:	10b53e04 	addi	r2,r2,-11016
    2984:	18c7883a 	add	r3,r3,r3
    2988:	18c7883a 	add	r3,r3,r3
    298c:	10c5883a 	add	r2,r2,r3
    2990:	11000017 	ldw	r4,0(r2)
    2994:	d0e6e517 	ldw	r3,-25708(gp)
    2998:	00800074 	movhi	r2,1
    299c:	10b53604 	addi	r2,r2,-11048
    29a0:	18c7883a 	add	r3,r3,r3
    29a4:	18c7883a 	add	r3,r3,r3
    29a8:	10c5883a 	add	r2,r2,r3
    29ac:	10800017 	ldw	r2,0(r2)
    29b0:	100b883a 	mov	r5,r2
    29b4:	00030c80 	call	30c8 <__mulsi3>
    29b8:	01400284 	movi	r5,10
    29bc:	1009883a 	mov	r4,r2
    29c0:	000300c0 	call	300c <__udivsi3>
    29c4:	1009883a 	mov	r4,r2
    29c8:	00800074 	movhi	r2,1
    29cc:	10b52e04 	addi	r2,r2,-11080
    29d0:	8407883a 	add	r3,r16,r16
    29d4:	18c7883a 	add	r3,r3,r3
    29d8:	10c5883a 	add	r2,r2,r3
    29dc:	11000015 	stw	r4,0(r2)
				if(ChN == 0) {
    29e0:	d0a6e517 	ldw	r2,-25708(gp)
    29e4:	1000151e 	bne	r2,zero,2a3c <main+0x139c>
					*(volatile unsigned long *)PERIOD1_BASE = Period[ChN];
    29e8:	00802034 	movhi	r2,128
    29ec:	10882804 	addi	r2,r2,8352
    29f0:	d126e517 	ldw	r4,-25708(gp)
    29f4:	00c00074 	movhi	r3,1
    29f8:	18f53e04 	addi	r3,r3,-11016
    29fc:	2109883a 	add	r4,r4,r4
    2a00:	2109883a 	add	r4,r4,r4
    2a04:	1907883a 	add	r3,r3,r4
    2a08:	18c00017 	ldw	r3,0(r3)
    2a0c:	10c00015 	stw	r3,0(r2)
					*(volatile unsigned long *)DECODE1_BASE = Decode[ChN];
    2a10:	00802034 	movhi	r2,128
    2a14:	10881804 	addi	r2,r2,8288
    2a18:	d126e517 	ldw	r4,-25708(gp)
    2a1c:	00c00074 	movhi	r3,1
    2a20:	18f52e04 	addi	r3,r3,-11080
    2a24:	2109883a 	add	r4,r4,r4
    2a28:	2109883a 	add	r4,r4,r4
    2a2c:	1907883a 	add	r3,r3,r4
    2a30:	18c00017 	ldw	r3,0(r3)
    2a34:	10c00015 	stw	r3,0(r2)
    2a38:	00004706 	br	2b58 <main+0x14b8>
				} else if(ChN == 1) {
    2a3c:	d0a6e517 	ldw	r2,-25708(gp)
    2a40:	10800058 	cmpnei	r2,r2,1
    2a44:	1000151e 	bne	r2,zero,2a9c <main+0x13fc>
					*(volatile unsigned long *)PERIOD2_BASE = Period[ChN];
    2a48:	00802034 	movhi	r2,128
    2a4c:	10882404 	addi	r2,r2,8336
    2a50:	d126e517 	ldw	r4,-25708(gp)
    2a54:	00c00074 	movhi	r3,1
    2a58:	18f53e04 	addi	r3,r3,-11016
    2a5c:	2109883a 	add	r4,r4,r4
    2a60:	2109883a 	add	r4,r4,r4
    2a64:	1907883a 	add	r3,r3,r4
    2a68:	18c00017 	ldw	r3,0(r3)
    2a6c:	10c00015 	stw	r3,0(r2)
					*(volatile unsigned long *)DECODE2_BASE = Decode[ChN];
    2a70:	00802034 	movhi	r2,128
    2a74:	10881404 	addi	r2,r2,8272
    2a78:	d126e517 	ldw	r4,-25708(gp)
    2a7c:	00c00074 	movhi	r3,1
    2a80:	18f52e04 	addi	r3,r3,-11080
    2a84:	2109883a 	add	r4,r4,r4
    2a88:	2109883a 	add	r4,r4,r4
    2a8c:	1907883a 	add	r3,r3,r4
    2a90:	18c00017 	ldw	r3,0(r3)
    2a94:	10c00015 	stw	r3,0(r2)
    2a98:	00002f06 	br	2b58 <main+0x14b8>
				} else if(ChN == 2) {
    2a9c:	d0a6e517 	ldw	r2,-25708(gp)
    2aa0:	10800098 	cmpnei	r2,r2,2
    2aa4:	1000151e 	bne	r2,zero,2afc <main+0x145c>
					*(volatile unsigned long *)PERIOD3_BASE = Period[ChN];
    2aa8:	00802034 	movhi	r2,128
    2aac:	10882004 	addi	r2,r2,8320
    2ab0:	d126e517 	ldw	r4,-25708(gp)
    2ab4:	00c00074 	movhi	r3,1
    2ab8:	18f53e04 	addi	r3,r3,-11016
    2abc:	2109883a 	add	r4,r4,r4
    2ac0:	2109883a 	add	r4,r4,r4
    2ac4:	1907883a 	add	r3,r3,r4
    2ac8:	18c00017 	ldw	r3,0(r3)
    2acc:	10c00015 	stw	r3,0(r2)
					*(volatile unsigned long *)DECODE3_BASE = Decode[ChN];
    2ad0:	00802034 	movhi	r2,128
    2ad4:	10881004 	addi	r2,r2,8256
    2ad8:	d126e517 	ldw	r4,-25708(gp)
    2adc:	00c00074 	movhi	r3,1
    2ae0:	18f52e04 	addi	r3,r3,-11080
    2ae4:	2109883a 	add	r4,r4,r4
    2ae8:	2109883a 	add	r4,r4,r4
    2aec:	1907883a 	add	r3,r3,r4
    2af0:	18c00017 	ldw	r3,0(r3)
    2af4:	10c00015 	stw	r3,0(r2)
    2af8:	00001706 	br	2b58 <main+0x14b8>
				} else if(ChN == 3) {
    2afc:	d0a6e517 	ldw	r2,-25708(gp)
    2b00:	108000d8 	cmpnei	r2,r2,3
    2b04:	1000141e 	bne	r2,zero,2b58 <main+0x14b8>
					*(volatile unsigned long *)PERIOD4_BASE = Period[ChN];
    2b08:	00802034 	movhi	r2,128
    2b0c:	10881c04 	addi	r2,r2,8304
    2b10:	d126e517 	ldw	r4,-25708(gp)
    2b14:	00c00074 	movhi	r3,1
    2b18:	18f53e04 	addi	r3,r3,-11016
    2b1c:	2109883a 	add	r4,r4,r4
    2b20:	2109883a 	add	r4,r4,r4
    2b24:	1907883a 	add	r3,r3,r4
    2b28:	18c00017 	ldw	r3,0(r3)
    2b2c:	10c00015 	stw	r3,0(r2)
					*(volatile unsigned long *)DECODE4_BASE = Decode[ChN];
    2b30:	00802034 	movhi	r2,128
    2b34:	10880c04 	addi	r2,r2,8240
    2b38:	d126e517 	ldw	r4,-25708(gp)
    2b3c:	00c00074 	movhi	r3,1
    2b40:	18f52e04 	addi	r3,r3,-11080
    2b44:	2109883a 	add	r4,r4,r4
    2b48:	2109883a 	add	r4,r4,r4
    2b4c:	1907883a 	add	r3,r3,r4
    2b50:	18c00017 	ldw	r3,0(r3)
    2b54:	10c00015 	stw	r3,0(r2)
				}
				state[0] = 'R';	state[1] = 'U';	state[2] = 'N';
    2b58:	00801484 	movi	r2,82
    2b5c:	d0a6e605 	stb	r2,-25704(gp)
    2b60:	00801544 	movi	r2,85
    2b64:	d0a6e645 	stb	r2,-25703(gp)
    2b68:	00801384 	movi	r2,78
    2b6c:	d0a6e685 	stb	r2,-25702(gp)
    2b70:	0000a706 	br	2e10 <main+0x1770>
    		}

	    	else if(state[1] == 'd') { // "xdx", Category selection
    2b74:	d0a6e643 	ldbu	r2,-25703(gp)
    2b78:	10803fcc 	andi	r2,r2,255
    2b7c:	1080201c 	xori	r2,r2,128
    2b80:	10bfe004 	addi	r2,r2,-128
    2b84:	10801918 	cmpnei	r2,r2,100
    2b88:	1000a11e 	bne	r2,zero,2e10 <main+0x1770>
				if(state[2] == '0') {
    2b8c:	d0a6e683 	ldbu	r2,-25702(gp)
    2b90:	10803fcc 	andi	r2,r2,255
    2b94:	1080201c 	xori	r2,r2,128
    2b98:	10bfe004 	addi	r2,r2,-128
    2b9c:	10800c18 	cmpnei	r2,r2,48
    2ba0:	1000091e 	bne	r2,zero,2bc8 <main+0x1528>
					Duty[ChN] = 1;
    2ba4:	d0e6e517 	ldw	r3,-25708(gp)
    2ba8:	00800074 	movhi	r2,1
    2bac:	10b53604 	addi	r2,r2,-11048
    2bb0:	18c7883a 	add	r3,r3,r3
    2bb4:	18c7883a 	add	r3,r3,r3
    2bb8:	10c5883a 	add	r2,r2,r3
    2bbc:	00c00044 	movi	r3,1
    2bc0:	10c00015 	stw	r3,0(r2)
    2bc4:	00003b06 	br	2cb4 <main+0x1614>
				} else if(state[2] == '1') {
    2bc8:	d0a6e683 	ldbu	r2,-25702(gp)
    2bcc:	10803fcc 	andi	r2,r2,255
    2bd0:	1080201c 	xori	r2,r2,128
    2bd4:	10bfe004 	addi	r2,r2,-128
    2bd8:	10800c58 	cmpnei	r2,r2,49
    2bdc:	1000091e 	bne	r2,zero,2c04 <main+0x1564>
					Duty[ChN] = 2;
    2be0:	d0e6e517 	ldw	r3,-25708(gp)
    2be4:	00800074 	movhi	r2,1
    2be8:	10b53604 	addi	r2,r2,-11048
    2bec:	18c7883a 	add	r3,r3,r3
    2bf0:	18c7883a 	add	r3,r3,r3
    2bf4:	10c5883a 	add	r2,r2,r3
    2bf8:	00c00084 	movi	r3,2
    2bfc:	10c00015 	stw	r3,0(r2)
    2c00:	00002c06 	br	2cb4 <main+0x1614>
				} else if(state[2] == '2') {
    2c04:	d0a6e683 	ldbu	r2,-25702(gp)
    2c08:	10803fcc 	andi	r2,r2,255
    2c0c:	1080201c 	xori	r2,r2,128
    2c10:	10bfe004 	addi	r2,r2,-128
    2c14:	10800c98 	cmpnei	r2,r2,50
    2c18:	1000091e 	bne	r2,zero,2c40 <main+0x15a0>
					Duty[ChN] = 3;
    2c1c:	d0e6e517 	ldw	r3,-25708(gp)
    2c20:	00800074 	movhi	r2,1
    2c24:	10b53604 	addi	r2,r2,-11048
    2c28:	18c7883a 	add	r3,r3,r3
    2c2c:	18c7883a 	add	r3,r3,r3
    2c30:	10c5883a 	add	r2,r2,r3
    2c34:	00c000c4 	movi	r3,3
    2c38:	10c00015 	stw	r3,0(r2)
    2c3c:	00001d06 	br	2cb4 <main+0x1614>
				} else if(state[2] == '3') {
    2c40:	d0a6e683 	ldbu	r2,-25702(gp)
    2c44:	10803fcc 	andi	r2,r2,255
    2c48:	1080201c 	xori	r2,r2,128
    2c4c:	10bfe004 	addi	r2,r2,-128
    2c50:	10800cd8 	cmpnei	r2,r2,51
    2c54:	1000091e 	bne	r2,zero,2c7c <main+0x15dc>
					Duty[ChN] = 4;
    2c58:	d0e6e517 	ldw	r3,-25708(gp)
    2c5c:	00800074 	movhi	r2,1
    2c60:	10b53604 	addi	r2,r2,-11048
    2c64:	18c7883a 	add	r3,r3,r3
    2c68:	18c7883a 	add	r3,r3,r3
    2c6c:	10c5883a 	add	r2,r2,r3
    2c70:	00c00104 	movi	r3,4
    2c74:	10c00015 	stw	r3,0(r2)
    2c78:	00000e06 	br	2cb4 <main+0x1614>
				} else if(state[2] == '4') {
    2c7c:	d0a6e683 	ldbu	r2,-25702(gp)
    2c80:	10803fcc 	andi	r2,r2,255
    2c84:	1080201c 	xori	r2,r2,128
    2c88:	10bfe004 	addi	r2,r2,-128
    2c8c:	10800d18 	cmpnei	r2,r2,52
    2c90:	1000081e 	bne	r2,zero,2cb4 <main+0x1614>
					Duty[ChN] = 5;
    2c94:	d0e6e517 	ldw	r3,-25708(gp)
    2c98:	00800074 	movhi	r2,1
    2c9c:	10b53604 	addi	r2,r2,-11048
    2ca0:	18c7883a 	add	r3,r3,r3
    2ca4:	18c7883a 	add	r3,r3,r3
    2ca8:	10c5883a 	add	r2,r2,r3
    2cac:	00c00144 	movi	r3,5
    2cb0:	10c00015 	stw	r3,0(r2)
				} 
				Decode[ChN] = Period[ChN] * Duty[ChN] / 10;
    2cb4:	d426e517 	ldw	r16,-25708(gp)
    2cb8:	d0e6e517 	ldw	r3,-25708(gp)
    2cbc:	00800074 	movhi	r2,1
    2cc0:	10b53e04 	addi	r2,r2,-11016
    2cc4:	18c7883a 	add	r3,r3,r3
    2cc8:	18c7883a 	add	r3,r3,r3
    2ccc:	10c5883a 	add	r2,r2,r3
    2cd0:	11000017 	ldw	r4,0(r2)
    2cd4:	d0e6e517 	ldw	r3,-25708(gp)
    2cd8:	00800074 	movhi	r2,1
    2cdc:	10b53604 	addi	r2,r2,-11048
    2ce0:	18c7883a 	add	r3,r3,r3
    2ce4:	18c7883a 	add	r3,r3,r3
    2ce8:	10c5883a 	add	r2,r2,r3
    2cec:	10800017 	ldw	r2,0(r2)
    2cf0:	100b883a 	mov	r5,r2
    2cf4:	00030c80 	call	30c8 <__mulsi3>
    2cf8:	01400284 	movi	r5,10
    2cfc:	1009883a 	mov	r4,r2
    2d00:	000300c0 	call	300c <__udivsi3>
    2d04:	1009883a 	mov	r4,r2
    2d08:	00800074 	movhi	r2,1
    2d0c:	10b52e04 	addi	r2,r2,-11080
    2d10:	8407883a 	add	r3,r16,r16
    2d14:	18c7883a 	add	r3,r3,r3
    2d18:	10c5883a 	add	r2,r2,r3
    2d1c:	11000015 	stw	r4,0(r2)
				if(ChN == 0) {
    2d20:	d0a6e517 	ldw	r2,-25708(gp)
    2d24:	10000b1e 	bne	r2,zero,2d54 <main+0x16b4>
					*(volatile unsigned long *)DECODE1_BASE = Decode[ChN];
    2d28:	00802034 	movhi	r2,128
    2d2c:	10881804 	addi	r2,r2,8288
    2d30:	d126e517 	ldw	r4,-25708(gp)
    2d34:	00c00074 	movhi	r3,1
    2d38:	18f52e04 	addi	r3,r3,-11080
    2d3c:	2109883a 	add	r4,r4,r4
    2d40:	2109883a 	add	r4,r4,r4
    2d44:	1907883a 	add	r3,r3,r4
    2d48:	18c00017 	ldw	r3,0(r3)
    2d4c:	10c00015 	stw	r3,0(r2)
    2d50:	00002906 	br	2df8 <main+0x1758>
				} else if(ChN == 1) {
    2d54:	d0a6e517 	ldw	r2,-25708(gp)
    2d58:	10800058 	cmpnei	r2,r2,1
    2d5c:	10000b1e 	bne	r2,zero,2d8c <main+0x16ec>
					*(volatile unsigned long *)DECODE2_BASE = Decode[ChN];
    2d60:	00802034 	movhi	r2,128
    2d64:	10881404 	addi	r2,r2,8272
    2d68:	d126e517 	ldw	r4,-25708(gp)
    2d6c:	00c00074 	movhi	r3,1
    2d70:	18f52e04 	addi	r3,r3,-11080
    2d74:	2109883a 	add	r4,r4,r4
    2d78:	2109883a 	add	r4,r4,r4
    2d7c:	1907883a 	add	r3,r3,r4
    2d80:	18c00017 	ldw	r3,0(r3)
    2d84:	10c00015 	stw	r3,0(r2)
    2d88:	00001b06 	br	2df8 <main+0x1758>
				} else if(ChN == 2) {
    2d8c:	d0a6e517 	ldw	r2,-25708(gp)
    2d90:	10800098 	cmpnei	r2,r2,2
    2d94:	10000b1e 	bne	r2,zero,2dc4 <main+0x1724>
					*(volatile unsigned long *)DECODE3_BASE = Decode[ChN];
    2d98:	00802034 	movhi	r2,128
    2d9c:	10881004 	addi	r2,r2,8256
    2da0:	d126e517 	ldw	r4,-25708(gp)
    2da4:	00c00074 	movhi	r3,1
    2da8:	18f52e04 	addi	r3,r3,-11080
    2dac:	2109883a 	add	r4,r4,r4
    2db0:	2109883a 	add	r4,r4,r4
    2db4:	1907883a 	add	r3,r3,r4
    2db8:	18c00017 	ldw	r3,0(r3)
    2dbc:	10c00015 	stw	r3,0(r2)
    2dc0:	00000d06 	br	2df8 <main+0x1758>
				} else if(ChN == 3) {
    2dc4:	d0a6e517 	ldw	r2,-25708(gp)
    2dc8:	108000d8 	cmpnei	r2,r2,3
    2dcc:	10000a1e 	bne	r2,zero,2df8 <main+0x1758>
					*(volatile unsigned long *)DECODE4_BASE = Decode[ChN];
    2dd0:	00802034 	movhi	r2,128
    2dd4:	10880c04 	addi	r2,r2,8240
    2dd8:	d126e517 	ldw	r4,-25708(gp)
    2ddc:	00c00074 	movhi	r3,1
    2de0:	18f52e04 	addi	r3,r3,-11080
    2de4:	2109883a 	add	r4,r4,r4
    2de8:	2109883a 	add	r4,r4,r4
    2dec:	1907883a 	add	r3,r3,r4
    2df0:	18c00017 	ldw	r3,0(r3)
    2df4:	10c00015 	stw	r3,0(r2)
				} 
				state[0] = 'R';	state[1] = 'U';	state[2] = 'N';
    2df8:	00801484 	movi	r2,82
    2dfc:	d0a6e605 	stb	r2,-25704(gp)
    2e00:	00801544 	movi	r2,85
    2e04:	d0a6e645 	stb	r2,-25703(gp)
    2e08:	00801384 	movi	r2,78
    2e0c:	d0a6e685 	stb	r2,-25702(gp)
      		}
    		DispAll();
    2e10:	000131c0 	call	131c <DispAll>
    	}

    	if(state[1] == 'U') { // "RUN"긚긡�[긣궼멣븫�_뱮
    2e14:	d0a6e643 	ldbu	r2,-25703(gp)
    2e18:	10803fcc 	andi	r2,r2,255
    2e1c:	1080201c 	xori	r2,r2,128
    2e20:	10bfe004 	addi	r2,r2,-128
    2e24:	10801558 	cmpnei	r2,r2,85
    2e28:	1000021e 	bne	r2,zero,2e34 <main+0x1794>
   			DispAll();
    2e2c:	000131c0 	call	131c <DispAll>
    2e30:	00002f06 	br	2ef0 <main+0x1850>
    	} else if(state[1] == 'N') { // "PNx"긚긡�[긣궼1뙿뽞�_뽅
    2e34:	d0a6e643 	ldbu	r2,-25703(gp)
    2e38:	10803fcc 	andi	r2,r2,255
    2e3c:	1080201c 	xori	r2,r2,128
    2e40:	10bfe004 	addi	r2,r2,-128
    2e44:	10801398 	cmpnei	r2,r2,78
    2e48:	1000081e 	bne	r2,zero,2e6c <main+0x17cc>
        		if(blinkco < 3) {
    2e4c:	d0a6e317 	ldw	r2,-25716(gp)
    2e50:	108000e8 	cmpgeui	r2,r2,3
    2e54:	1000031e 	bne	r2,zero,2e64 <main+0x17c4>
        			TurnOffSeg(1);
    2e58:	01000044 	movi	r4,1
    2e5c:	00004fc0 	call	4fc <TurnOffSeg>
    2e60:	00002306 	br	2ef0 <main+0x1850>
        		} else {
        			DispAll();
    2e64:	000131c0 	call	131c <DispAll>
    2e68:	00002106 	br	2ef0 <main+0x1850>
        		}
    	} else if(state[1] == 'C') { // "xCx"긚긡�[긣궼2뙿뽞�_뽅
    2e6c:	d0a6e643 	ldbu	r2,-25703(gp)
    2e70:	10803fcc 	andi	r2,r2,255
    2e74:	1080201c 	xori	r2,r2,128
    2e78:	10bfe004 	addi	r2,r2,-128
    2e7c:	108010d8 	cmpnei	r2,r2,67
    2e80:	1000081e 	bne	r2,zero,2ea4 <main+0x1804>
    		if(blinkco < 3) {
    2e84:	d0a6e317 	ldw	r2,-25716(gp)
    2e88:	108000e8 	cmpgeui	r2,r2,3
    2e8c:	1000031e 	bne	r2,zero,2e9c <main+0x17fc>
    			TurnOffSeg(2);
    2e90:	01000084 	movi	r4,2
    2e94:	00004fc0 	call	4fc <TurnOffSeg>
    2e98:	00001506 	br	2ef0 <main+0x1850>
    		} else {
    			DispAll();
    2e9c:	000131c0 	call	131c <DispAll>
    2ea0:	00001306 	br	2ef0 <main+0x1850>
    		}
    	} else if(state[1] == 'F' || state[1] == 'd') { // "xFx"긚긡�[긣궼3,4뙿뽞�_뽅
    2ea4:	d0a6e643 	ldbu	r2,-25703(gp)
    2ea8:	10803fcc 	andi	r2,r2,255
    2eac:	1080201c 	xori	r2,r2,128
    2eb0:	10bfe004 	addi	r2,r2,-128
    2eb4:	108011a0 	cmpeqi	r2,r2,70
    2eb8:	1000061e 	bne	r2,zero,2ed4 <main+0x1834>
    2ebc:	d0a6e643 	ldbu	r2,-25703(gp)
    2ec0:	10803fcc 	andi	r2,r2,255
    2ec4:	1080201c 	xori	r2,r2,128
    2ec8:	10bfe004 	addi	r2,r2,-128
    2ecc:	10801918 	cmpnei	r2,r2,100
    2ed0:	1000071e 	bne	r2,zero,2ef0 <main+0x1850>
    		if(blinkco < 3) {
    2ed4:	d0a6e317 	ldw	r2,-25716(gp)
    2ed8:	108000e8 	cmpgeui	r2,r2,3
    2edc:	1000031e 	bne	r2,zero,2eec <main+0x184c>
    			TurnOffSeg(3);
    2ee0:	010000c4 	movi	r4,3
    2ee4:	00004fc0 	call	4fc <TurnOffSeg>
    2ee8:	00000106 	br	2ef0 <main+0x1850>
    		} else {
    			DispAll();
    2eec:	000131c0 	call	131c <DispAll>
    		}
    	}

    	if(blinkco == 9) {
    2ef0:	d0a6e317 	ldw	r2,-25716(gp)
    2ef4:	10800258 	cmpnei	r2,r2,9
    2ef8:	1000021e 	bne	r2,zero,2f04 <main+0x1864>
    		blinkco = 0;
    2efc:	d026e315 	stw	zero,-25716(gp)
    2f00:	003a4906 	br	1828 <__alt_mem_epcs_flash_controller_0+0xff800828>
    	} else {
    		blinkco++;
    2f04:	d0a6e317 	ldw	r2,-25716(gp)
    2f08:	10800044 	addi	r2,r2,1
    2f0c:	d0a6e315 	stw	r2,-25716(gp)
    	}

	}
    2f10:	003a4506 	br	1828 <__alt_mem_epcs_flash_controller_0+0xff800828>

00002f14 <__divsi3>:
    2f14:	20001b16 	blt	r4,zero,2f84 <__divsi3+0x70>
    2f18:	000f883a 	mov	r7,zero
    2f1c:	28001616 	blt	r5,zero,2f78 <__divsi3+0x64>
    2f20:	200d883a 	mov	r6,r4
    2f24:	29001a2e 	bgeu	r5,r4,2f90 <__divsi3+0x7c>
    2f28:	00800804 	movi	r2,32
    2f2c:	00c00044 	movi	r3,1
    2f30:	00000106 	br	2f38 <__divsi3+0x24>
    2f34:	10000d26 	beq	r2,zero,2f6c <__divsi3+0x58>
    2f38:	294b883a 	add	r5,r5,r5
    2f3c:	10bfffc4 	addi	r2,r2,-1
    2f40:	18c7883a 	add	r3,r3,r3
    2f44:	293ffb36 	bltu	r5,r4,2f34 <__alt_mem_epcs_flash_controller_0+0xff801f34>
    2f48:	0005883a 	mov	r2,zero
    2f4c:	18000726 	beq	r3,zero,2f6c <__divsi3+0x58>
    2f50:	0005883a 	mov	r2,zero
    2f54:	31400236 	bltu	r6,r5,2f60 <__divsi3+0x4c>
    2f58:	314dc83a 	sub	r6,r6,r5
    2f5c:	10c4b03a 	or	r2,r2,r3
    2f60:	1806d07a 	srli	r3,r3,1
    2f64:	280ad07a 	srli	r5,r5,1
    2f68:	183ffa1e 	bne	r3,zero,2f54 <__alt_mem_epcs_flash_controller_0+0xff801f54>
    2f6c:	38000126 	beq	r7,zero,2f74 <__divsi3+0x60>
    2f70:	0085c83a 	sub	r2,zero,r2
    2f74:	f800283a 	ret
    2f78:	014bc83a 	sub	r5,zero,r5
    2f7c:	39c0005c 	xori	r7,r7,1
    2f80:	003fe706 	br	2f20 <__alt_mem_epcs_flash_controller_0+0xff801f20>
    2f84:	0109c83a 	sub	r4,zero,r4
    2f88:	01c00044 	movi	r7,1
    2f8c:	003fe306 	br	2f1c <__alt_mem_epcs_flash_controller_0+0xff801f1c>
    2f90:	00c00044 	movi	r3,1
    2f94:	003fee06 	br	2f50 <__alt_mem_epcs_flash_controller_0+0xff801f50>

00002f98 <__modsi3>:
    2f98:	20001716 	blt	r4,zero,2ff8 <__modsi3+0x60>
    2f9c:	000f883a 	mov	r7,zero
    2fa0:	2005883a 	mov	r2,r4
    2fa4:	28001216 	blt	r5,zero,2ff0 <__modsi3+0x58>
    2fa8:	2900162e 	bgeu	r5,r4,3004 <__modsi3+0x6c>
    2fac:	01800804 	movi	r6,32
    2fb0:	00c00044 	movi	r3,1
    2fb4:	00000106 	br	2fbc <__modsi3+0x24>
    2fb8:	30000a26 	beq	r6,zero,2fe4 <__modsi3+0x4c>
    2fbc:	294b883a 	add	r5,r5,r5
    2fc0:	31bfffc4 	addi	r6,r6,-1
    2fc4:	18c7883a 	add	r3,r3,r3
    2fc8:	293ffb36 	bltu	r5,r4,2fb8 <__alt_mem_epcs_flash_controller_0+0xff801fb8>
    2fcc:	18000526 	beq	r3,zero,2fe4 <__modsi3+0x4c>
    2fd0:	1806d07a 	srli	r3,r3,1
    2fd4:	11400136 	bltu	r2,r5,2fdc <__modsi3+0x44>
    2fd8:	1145c83a 	sub	r2,r2,r5
    2fdc:	280ad07a 	srli	r5,r5,1
    2fe0:	183ffb1e 	bne	r3,zero,2fd0 <__alt_mem_epcs_flash_controller_0+0xff801fd0>
    2fe4:	38000126 	beq	r7,zero,2fec <__modsi3+0x54>
    2fe8:	0085c83a 	sub	r2,zero,r2
    2fec:	f800283a 	ret
    2ff0:	014bc83a 	sub	r5,zero,r5
    2ff4:	003fec06 	br	2fa8 <__alt_mem_epcs_flash_controller_0+0xff801fa8>
    2ff8:	0109c83a 	sub	r4,zero,r4
    2ffc:	01c00044 	movi	r7,1
    3000:	003fe706 	br	2fa0 <__alt_mem_epcs_flash_controller_0+0xff801fa0>
    3004:	00c00044 	movi	r3,1
    3008:	003ff106 	br	2fd0 <__alt_mem_epcs_flash_controller_0+0xff801fd0>

0000300c <__udivsi3>:
    300c:	200d883a 	mov	r6,r4
    3010:	2900152e 	bgeu	r5,r4,3068 <__udivsi3+0x5c>
    3014:	28001416 	blt	r5,zero,3068 <__udivsi3+0x5c>
    3018:	00800804 	movi	r2,32
    301c:	00c00044 	movi	r3,1
    3020:	00000206 	br	302c <__udivsi3+0x20>
    3024:	10000e26 	beq	r2,zero,3060 <__udivsi3+0x54>
    3028:	28000516 	blt	r5,zero,3040 <__udivsi3+0x34>
    302c:	294b883a 	add	r5,r5,r5
    3030:	10bfffc4 	addi	r2,r2,-1
    3034:	18c7883a 	add	r3,r3,r3
    3038:	293ffa36 	bltu	r5,r4,3024 <__alt_mem_epcs_flash_controller_0+0xff802024>
    303c:	18000826 	beq	r3,zero,3060 <__udivsi3+0x54>
    3040:	0005883a 	mov	r2,zero
    3044:	31400236 	bltu	r6,r5,3050 <__udivsi3+0x44>
    3048:	314dc83a 	sub	r6,r6,r5
    304c:	10c4b03a 	or	r2,r2,r3
    3050:	1806d07a 	srli	r3,r3,1
    3054:	280ad07a 	srli	r5,r5,1
    3058:	183ffa1e 	bne	r3,zero,3044 <__alt_mem_epcs_flash_controller_0+0xff802044>
    305c:	f800283a 	ret
    3060:	0005883a 	mov	r2,zero
    3064:	f800283a 	ret
    3068:	00c00044 	movi	r3,1
    306c:	003ff406 	br	3040 <__alt_mem_epcs_flash_controller_0+0xff802040>

00003070 <__umodsi3>:
    3070:	2005883a 	mov	r2,r4
    3074:	2900122e 	bgeu	r5,r4,30c0 <__umodsi3+0x50>
    3078:	28001116 	blt	r5,zero,30c0 <__umodsi3+0x50>
    307c:	01800804 	movi	r6,32
    3080:	00c00044 	movi	r3,1
    3084:	00000206 	br	3090 <__umodsi3+0x20>
    3088:	30000c26 	beq	r6,zero,30bc <__umodsi3+0x4c>
    308c:	28000516 	blt	r5,zero,30a4 <__umodsi3+0x34>
    3090:	294b883a 	add	r5,r5,r5
    3094:	31bfffc4 	addi	r6,r6,-1
    3098:	18c7883a 	add	r3,r3,r3
    309c:	293ffa36 	bltu	r5,r4,3088 <__alt_mem_epcs_flash_controller_0+0xff802088>
    30a0:	18000626 	beq	r3,zero,30bc <__umodsi3+0x4c>
    30a4:	1806d07a 	srli	r3,r3,1
    30a8:	11400136 	bltu	r2,r5,30b0 <__umodsi3+0x40>
    30ac:	1145c83a 	sub	r2,r2,r5
    30b0:	280ad07a 	srli	r5,r5,1
    30b4:	183ffb1e 	bne	r3,zero,30a4 <__alt_mem_epcs_flash_controller_0+0xff8020a4>
    30b8:	f800283a 	ret
    30bc:	f800283a 	ret
    30c0:	00c00044 	movi	r3,1
    30c4:	003ff706 	br	30a4 <__alt_mem_epcs_flash_controller_0+0xff8020a4>

000030c8 <__mulsi3>:
    30c8:	0005883a 	mov	r2,zero
    30cc:	20000726 	beq	r4,zero,30ec <__mulsi3+0x24>
    30d0:	20c0004c 	andi	r3,r4,1
    30d4:	2008d07a 	srli	r4,r4,1
    30d8:	18000126 	beq	r3,zero,30e0 <__mulsi3+0x18>
    30dc:	1145883a 	add	r2,r2,r5
    30e0:	294b883a 	add	r5,r5,r5
    30e4:	203ffa1e 	bne	r4,zero,30d0 <__alt_mem_epcs_flash_controller_0+0xff8020d0>
    30e8:	f800283a 	ret
    30ec:	f800283a 	ret

000030f0 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    30f0:	defffe04 	addi	sp,sp,-8
    30f4:	dfc00115 	stw	ra,4(sp)
    30f8:	df000015 	stw	fp,0(sp)
    30fc:	d839883a 	mov	fp,sp
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
    3100:	d0a00c17 	ldw	r2,-32720(gp)
    3104:	10800117 	ldw	r2,4(r2)
    3108:	1009883a 	mov	r4,r2
    310c:	000682c0 	call	682c <getc>
#endif
#endif
}
    3110:	e037883a 	mov	sp,fp
    3114:	dfc00117 	ldw	ra,4(sp)
    3118:	df000017 	ldw	fp,0(sp)
    311c:	dec00204 	addi	sp,sp,8
    3120:	f800283a 	ret

00003124 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3124:	defffc04 	addi	sp,sp,-16
    3128:	df000315 	stw	fp,12(sp)
    312c:	df000304 	addi	fp,sp,12
    3130:	e13ffd15 	stw	r4,-12(fp)
    3134:	e17ffe15 	stw	r5,-8(fp)
    3138:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    313c:	e0fffe17 	ldw	r3,-8(fp)
    3140:	e0bffd17 	ldw	r2,-12(fp)
    3144:	18800c26 	beq	r3,r2,3178 <alt_load_section+0x54>
  {
    while( to != end )
    3148:	00000806 	br	316c <alt_load_section+0x48>
    {
      *to++ = *from++;
    314c:	e0bffe17 	ldw	r2,-8(fp)
    3150:	10c00104 	addi	r3,r2,4
    3154:	e0fffe15 	stw	r3,-8(fp)
    3158:	e0fffd17 	ldw	r3,-12(fp)
    315c:	19000104 	addi	r4,r3,4
    3160:	e13ffd15 	stw	r4,-12(fp)
    3164:	18c00017 	ldw	r3,0(r3)
    3168:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    316c:	e0fffe17 	ldw	r3,-8(fp)
    3170:	e0bfff17 	ldw	r2,-4(fp)
    3174:	18bff51e 	bne	r3,r2,314c <__alt_mem_epcs_flash_controller_0+0xff80214c>
    {
      *to++ = *from++;
    }
  }
}
    3178:	0001883a 	nop
    317c:	e037883a 	mov	sp,fp
    3180:	df000017 	ldw	fp,0(sp)
    3184:	dec00104 	addi	sp,sp,4
    3188:	f800283a 	ret

0000318c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    318c:	defffe04 	addi	sp,sp,-8
    3190:	dfc00115 	stw	ra,4(sp)
    3194:	df000015 	stw	fp,0(sp)
    3198:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    319c:	01800074 	movhi	r6,1
    31a0:	31ae4104 	addi	r6,r6,-18172
    31a4:	01400074 	movhi	r5,1
    31a8:	29677104 	addi	r5,r5,-25148
    31ac:	01000074 	movhi	r4,1
    31b0:	212e4104 	addi	r4,r4,-18172
    31b4:	00031240 	call	3124 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    31b8:	01800034 	movhi	r6,0
    31bc:	31808c04 	addi	r6,r6,560
    31c0:	01400034 	movhi	r5,0
    31c4:	29400804 	addi	r5,r5,32
    31c8:	01000034 	movhi	r4,0
    31cc:	21000804 	addi	r4,r4,32
    31d0:	00031240 	call	3124 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    31d4:	01800074 	movhi	r6,1
    31d8:	31a77104 	addi	r6,r6,-25148
    31dc:	01400074 	movhi	r5,1
    31e0:	2966dc04 	addi	r5,r5,-25744
    31e4:	01000074 	movhi	r4,1
    31e8:	2126dc04 	addi	r4,r4,-25744
    31ec:	00031240 	call	3124 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    31f0:	00051680 	call	5168 <alt_dcache_flush_all>
  alt_icache_flush_all();
    31f4:	00054100 	call	5410 <alt_icache_flush_all>
}
    31f8:	0001883a 	nop
    31fc:	e037883a 	mov	sp,fp
    3200:	dfc00117 	ldw	ra,4(sp)
    3204:	df000017 	ldw	fp,0(sp)
    3208:	dec00204 	addi	sp,sp,8
    320c:	f800283a 	ret

00003210 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3210:	defffd04 	addi	sp,sp,-12
    3214:	dfc00215 	stw	ra,8(sp)
    3218:	df000115 	stw	fp,4(sp)
    321c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3220:	0009883a 	mov	r4,zero
    3224:	00032fc0 	call	32fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3228:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    322c:	00033340 	call	3334 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3230:	01800074 	movhi	r6,1
    3234:	31a75b04 	addi	r6,r6,-25236
    3238:	01400074 	movhi	r5,1
    323c:	29675b04 	addi	r5,r5,-25236
    3240:	01000074 	movhi	r4,1
    3244:	21275b04 	addi	r4,r4,-25236
    3248:	00057b40 	call	57b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    324c:	00052940 	call	5294 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3250:	01000034 	movhi	r4,0
    3254:	2114bd04 	addi	r4,r4,21236
    3258:	00061f40 	call	61f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    325c:	d0a6e817 	ldw	r2,-25696(gp)
    3260:	d0e6e917 	ldw	r3,-25692(gp)
    3264:	d126ea17 	ldw	r4,-25688(gp)
    3268:	200d883a 	mov	r6,r4
    326c:	180b883a 	mov	r5,r3
    3270:	1009883a 	mov	r4,r2
    3274:	00016a00 	call	16a0 <main>
    3278:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    327c:	01000044 	movi	r4,1
    3280:	00050900 	call	5090 <close>
  exit (result);
    3284:	e13fff17 	ldw	r4,-4(fp)
    3288:	00062080 	call	6208 <exit>

0000328c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    328c:	defffd04 	addi	sp,sp,-12
    3290:	dfc00215 	stw	ra,8(sp)
    3294:	df000115 	stw	fp,4(sp)
    3298:	df000104 	addi	fp,sp,4
    329c:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
    32a0:	d0a00c17 	ldw	r2,-32720(gp)
    32a4:	10800217 	ldw	r2,8(r2)
    32a8:	100b883a 	mov	r5,r2
    32ac:	e13fff17 	ldw	r4,-4(fp)
    32b0:	00062dc0 	call	62dc <fputs>
#endif
#endif
}
    32b4:	e037883a 	mov	sp,fp
    32b8:	dfc00117 	ldw	ra,4(sp)
    32bc:	df000017 	ldw	fp,0(sp)
    32c0:	dec00204 	addi	sp,sp,8
    32c4:	f800283a 	ret

000032c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    32c8:	defffd04 	addi	sp,sp,-12
    32cc:	dfc00215 	stw	ra,8(sp)
    32d0:	df000115 	stw	fp,4(sp)
    32d4:	df000104 	addi	fp,sp,4
    32d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    32dc:	d1600204 	addi	r5,gp,-32760
    32e0:	e13fff17 	ldw	r4,-4(fp)
    32e4:	00051f00 	call	51f0 <alt_dev_llist_insert>
}
    32e8:	e037883a 	mov	sp,fp
    32ec:	dfc00117 	ldw	ra,4(sp)
    32f0:	df000017 	ldw	fp,0(sp)
    32f4:	dec00204 	addi	sp,sp,8
    32f8:	f800283a 	ret

000032fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    32fc:	defffd04 	addi	sp,sp,-12
    3300:	dfc00215 	stw	ra,8(sp)
    3304:	df000115 	stw	fp,4(sp)
    3308:	df000104 	addi	fp,sp,4
    330c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    3310:	0005cdc0 	call	5cdc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3314:	00800044 	movi	r2,1
    3318:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    331c:	0001883a 	nop
    3320:	e037883a 	mov	sp,fp
    3324:	dfc00117 	ldw	ra,4(sp)
    3328:	df000017 	ldw	fp,0(sp)
    332c:	dec00204 	addi	sp,sp,8
    3330:	f800283a 	ret

00003334 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3334:	defffe04 	addi	sp,sp,-8
    3338:	dfc00115 	stw	ra,4(sp)
    333c:	df000015 	stw	fp,0(sp)
    3340:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
    3344:	01000074 	movhi	r4,1
    3348:	21277104 	addi	r4,r4,-25148
    334c:	00033bc0 	call	33bc <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    3350:	01800084 	movi	r6,2
    3354:	000b883a 	mov	r5,zero
    3358:	01000074 	movhi	r4,1
    335c:	2127ae04 	addi	r4,r4,-24904
    3360:	0003fe80 	call	3fe8 <altera_avalon_jtag_uart_init>
    3364:	01000074 	movhi	r4,1
    3368:	2127a404 	addi	r4,r4,-24944
    336c:	00032c80 	call	32c8 <alt_dev_reg>
}
    3370:	0001883a 	nop
    3374:	e037883a 	mov	sp,fp
    3378:	dfc00117 	ldw	ra,4(sp)
    337c:	df000017 	ldw	fp,0(sp)
    3380:	dec00204 	addi	sp,sp,8
    3384:	f800283a 	ret

00003388 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    3388:	defffd04 	addi	sp,sp,-12
    338c:	dfc00215 	stw	ra,8(sp)
    3390:	df000115 	stw	fp,4(sp)
    3394:	df000104 	addi	fp,sp,4
    3398:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    339c:	d1600604 	addi	r5,gp,-32744
    33a0:	e13fff17 	ldw	r4,-4(fp)
    33a4:	00051f00 	call	51f0 <alt_dev_llist_insert>
}
    33a8:	e037883a 	mov	sp,fp
    33ac:	dfc00117 	ldw	ra,4(sp)
    33b0:	df000017 	ldw	fp,0(sp)
    33b4:	dec00204 	addi	sp,sp,8
    33b8:	f800283a 	ret

000033bc <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    33bc:	defffc04 	addi	sp,sp,-16
    33c0:	dfc00315 	stw	ra,12(sp)
    33c4:	df000215 	stw	fp,8(sp)
    33c8:	df000204 	addi	fp,sp,8
    33cc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    33d0:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    33d4:	e13fff17 	ldw	r4,-4(fp)
    33d8:	00034100 	call	3410 <alt_epcs_flash_query>
    33dc:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    33e0:	e0bffe17 	ldw	r2,-8(fp)
    33e4:	1000041e 	bne	r2,zero,33f8 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    33e8:	e0bfff17 	ldw	r2,-4(fp)
    33ec:	1009883a 	mov	r4,r2
    33f0:	00033880 	call	3388 <alt_flash_device_register>
    33f4:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    33f8:	e0bffe17 	ldw	r2,-8(fp)
}
    33fc:	e037883a 	mov	sp,fp
    3400:	dfc00117 	ldw	ra,4(sp)
    3404:	df000017 	ldw	fp,0(sp)
    3408:	dec00204 	addi	sp,sp,8
    340c:	f800283a 	ret

00003410 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    3410:	defffc04 	addi	sp,sp,-16
    3414:	dfc00315 	stw	ra,12(sp)
    3418:	df000215 	stw	fp,8(sp)
    341c:	df000204 	addi	fp,sp,8
    3420:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    3424:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    3428:	e0bfff17 	ldw	r2,-4(fp)
    342c:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
    3430:	e0bfff17 	ldw	r2,-4(fp)
    3434:	10802e17 	ldw	r2,184(r2)
    3438:	1009883a 	mov	r4,r2
    343c:	0004d880 	call	4d88 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
    3440:	10c03fcc 	andi	r3,r2,255
    3444:	e0bfff17 	ldw	r2,-4(fp)
    3448:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    344c:	e0bfff17 	ldw	r2,-4(fp)
    3450:	10803017 	ldw	r2,192(r2)
    3454:	10800598 	cmpnei	r2,r2,22
    3458:	10000a1e 	bne	r2,zero,3484 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    345c:	e0bfff17 	ldw	r2,-4(fp)
    3460:	00c02034 	movhi	r3,128
    3464:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
    3468:	e0bfff17 	ldw	r2,-4(fp)
    346c:	00c02004 	movi	r3,128
    3470:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    3474:	e0bfff17 	ldw	r2,-4(fp)
    3478:	00c00074 	movhi	r3,1
    347c:	10c01015 	stw	r3,64(r2)
    3480:	0000ce06 	br	37bc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    3484:	e0bfff17 	ldw	r2,-4(fp)
    3488:	10803017 	ldw	r2,192(r2)
    348c:	10800518 	cmpnei	r2,r2,20
    3490:	10000a1e 	bne	r2,zero,34bc <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    3494:	e0bfff17 	ldw	r2,-4(fp)
    3498:	00c00834 	movhi	r3,32
    349c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
    34a0:	e0bfff17 	ldw	r2,-4(fp)
    34a4:	00c00804 	movi	r3,32
    34a8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    34ac:	e0bfff17 	ldw	r2,-4(fp)
    34b0:	00c00074 	movhi	r3,1
    34b4:	10c01015 	stw	r3,64(r2)
    34b8:	0000c006 	br	37bc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    34bc:	e0bfff17 	ldw	r2,-4(fp)
    34c0:	10803017 	ldw	r2,192(r2)
    34c4:	108004d8 	cmpnei	r2,r2,19
    34c8:	10000a1e 	bne	r2,zero,34f4 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    34cc:	e0bfff17 	ldw	r2,-4(fp)
    34d0:	00c00434 	movhi	r3,16
    34d4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
    34d8:	e0bfff17 	ldw	r2,-4(fp)
    34dc:	00c00404 	movi	r3,16
    34e0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    34e4:	e0bfff17 	ldw	r2,-4(fp)
    34e8:	00c00074 	movhi	r3,1
    34ec:	10c01015 	stw	r3,64(r2)
    34f0:	0000b206 	br	37bc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    34f4:	e0bfff17 	ldw	r2,-4(fp)
    34f8:	10803017 	ldw	r2,192(r2)
    34fc:	10800498 	cmpnei	r2,r2,18
    3500:	10000a1e 	bne	r2,zero,352c <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    3504:	e0bfff17 	ldw	r2,-4(fp)
    3508:	00c00234 	movhi	r3,8
    350c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
    3510:	e0bfff17 	ldw	r2,-4(fp)
    3514:	00c00204 	movi	r3,8
    3518:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
    351c:	e0bfff17 	ldw	r2,-4(fp)
    3520:	00c00074 	movhi	r3,1
    3524:	10c01015 	stw	r3,64(r2)
    3528:	0000a406 	br	37bc <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    352c:	e0bfff17 	ldw	r2,-4(fp)
    3530:	10803017 	ldw	r2,192(r2)
    3534:	10800418 	cmpnei	r2,r2,16
    3538:	10000a1e 	bne	r2,zero,3564 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    353c:	e0bfff17 	ldw	r2,-4(fp)
    3540:	00c000b4 	movhi	r3,2
    3544:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
    3548:	e0bfff17 	ldw	r2,-4(fp)
    354c:	00c00104 	movi	r3,4
    3550:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
    3554:	e0bfff17 	ldw	r2,-4(fp)
    3558:	00e00014 	movui	r3,32768
    355c:	10c01015 	stw	r3,64(r2)
    3560:	00009606 	br	37bc <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    3564:	e0bfff17 	ldw	r2,-4(fp)
    3568:	10802e17 	ldw	r2,184(r2)
    356c:	1009883a 	mov	r4,r2
    3570:	0004df00 	call	4df0 <epcs_read_device_id>
    3574:	1007883a 	mov	r3,r2
    3578:	e0bfff17 	ldw	r2,-4(fp)
    357c:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
    3580:	e0bfff17 	ldw	r2,-4(fp)
    3584:	10c03017 	ldw	r3,192(r2)
    3588:	00804034 	movhi	r2,256
    358c:	10bfffc4 	addi	r2,r2,-1
    3590:	1886703a 	and	r3,r3,r2
    3594:	00800874 	movhi	r2,33
    3598:	10ae8544 	addi	r2,r2,-17899
    359c:	18800a1e 	bne	r3,r2,35c8 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    35a0:	e0bfff17 	ldw	r2,-4(fp)
    35a4:	00c00834 	movhi	r3,32
    35a8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
    35ac:	e0bfff17 	ldw	r2,-4(fp)
    35b0:	00c00804 	movi	r3,32
    35b4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    35b8:	e0bfff17 	ldw	r2,-4(fp)
    35bc:	00c00074 	movhi	r3,1
    35c0:	10c01015 	stw	r3,64(r2)
    35c4:	00007d06 	br	37bc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
    35c8:	e0bfff17 	ldw	r2,-4(fp)
    35cc:	10c03017 	ldw	r3,192(r2)
    35d0:	00804034 	movhi	r2,256
    35d4:	10bfffc4 	addi	r2,r2,-1
    35d8:	1886703a 	and	r3,r3,r2
    35dc:	00800874 	movhi	r2,33
    35e0:	10ae8584 	addi	r2,r2,-17898
    35e4:	18800a1e 	bne	r3,r2,3610 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
    35e8:	e0bfff17 	ldw	r2,-4(fp)
    35ec:	00c01034 	movhi	r3,64
    35f0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
    35f4:	e0bfff17 	ldw	r2,-4(fp)
    35f8:	00c01004 	movi	r3,64
    35fc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    3600:	e0bfff17 	ldw	r2,-4(fp)
    3604:	00c00074 	movhi	r3,1
    3608:	10c01015 	stw	r3,64(r2)
    360c:	00006b06 	br	37bc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
    3610:	e0bfff17 	ldw	r2,-4(fp)
    3614:	10c03017 	ldw	r3,192(r2)
    3618:	00804034 	movhi	r2,256
    361c:	10bfffc4 	addi	r2,r2,-1
    3620:	1886703a 	and	r3,r3,r2
    3624:	00800874 	movhi	r2,33
    3628:	10ae85c4 	addi	r2,r2,-17897
    362c:	18800a1e 	bne	r3,r2,3658 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    3630:	e0bfff17 	ldw	r2,-4(fp)
    3634:	00c02034 	movhi	r3,128
    3638:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
    363c:	e0bfff17 	ldw	r2,-4(fp)
    3640:	00c02004 	movi	r3,128
    3644:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    3648:	e0bfff17 	ldw	r2,-4(fp)
    364c:	00c00074 	movhi	r3,1
    3650:	10c01015 	stw	r3,64(r2)
    3654:	00005906 	br	37bc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    3658:	e0bfff17 	ldw	r2,-4(fp)
    365c:	10c03017 	ldw	r3,192(r2)
    3660:	00804034 	movhi	r2,256
    3664:	10bfffc4 	addi	r2,r2,-1
    3668:	1886703a 	and	r3,r3,r2
    366c:	00800874 	movhi	r2,33
    3670:	10ae8604 	addi	r2,r2,-17896
    3674:	18800a1e 	bne	r3,r2,36a0 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    3678:	e0bfff17 	ldw	r2,-4(fp)
    367c:	00c04034 	movhi	r3,256
    3680:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    3684:	e0bfff17 	ldw	r2,-4(fp)
    3688:	00c04004 	movi	r3,256
    368c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    3690:	e0bfff17 	ldw	r2,-4(fp)
    3694:	00c00074 	movhi	r3,1
    3698:	10c01015 	stw	r3,64(r2)
    369c:	00004706 	br	37bc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    36a0:	e0bfff17 	ldw	r2,-4(fp)
    36a4:	10803017 	ldw	r2,192(r2)
    36a8:	10803fcc 	andi	r2,r2,255
    36ac:	10800618 	cmpnei	r2,r2,24
    36b0:	10000a1e 	bne	r2,zero,36dc <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    36b4:	e0bfff17 	ldw	r2,-4(fp)
    36b8:	00c04034 	movhi	r3,256
    36bc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
    36c0:	e0bfff17 	ldw	r2,-4(fp)
    36c4:	00c01004 	movi	r3,64
    36c8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
    36cc:	e0bfff17 	ldw	r2,-4(fp)
    36d0:	00c00134 	movhi	r3,4
    36d4:	10c01015 	stw	r3,64(r2)
    36d8:	00003806 	br	37bc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    36dc:	e0bfff17 	ldw	r2,-4(fp)
    36e0:	10803017 	ldw	r2,192(r2)
    36e4:	10803fcc 	andi	r2,r2,255
    36e8:	10800658 	cmpnei	r2,r2,25
    36ec:	10000d1e 	bne	r2,zero,3724 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    36f0:	e0bfff17 	ldw	r2,-4(fp)
    36f4:	00c08034 	movhi	r3,512
    36f8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    36fc:	e0bfff17 	ldw	r2,-4(fp)
    3700:	00c08004 	movi	r3,512
    3704:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    3708:	e0bfff17 	ldw	r2,-4(fp)
    370c:	00c00074 	movhi	r3,1
    3710:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    3714:	e0bfff17 	ldw	r2,-4(fp)
    3718:	00c00044 	movi	r3,1
    371c:	10c03215 	stw	r3,200(r2)
    3720:	00002606 	br	37bc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
    3724:	e0bfff17 	ldw	r2,-4(fp)
    3728:	10803017 	ldw	r2,192(r2)
    372c:	10803fcc 	andi	r2,r2,255
    3730:	10800818 	cmpnei	r2,r2,32
    3734:	10000d1e 	bne	r2,zero,376c <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
    3738:	e0bfff17 	ldw	r2,-4(fp)
    373c:	00c10034 	movhi	r3,1024
    3740:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
    3744:	e0bfff17 	ldw	r2,-4(fp)
    3748:	00c10004 	movi	r3,1024
    374c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    3750:	e0bfff17 	ldw	r2,-4(fp)
    3754:	00c00074 	movhi	r3,1
    3758:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    375c:	e0bfff17 	ldw	r2,-4(fp)
    3760:	00c00044 	movi	r3,1
    3764:	10c03215 	stw	r3,200(r2)
    3768:	00001406 	br	37bc <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
    376c:	e0bfff17 	ldw	r2,-4(fp)
    3770:	10803017 	ldw	r2,192(r2)
    3774:	10803fcc 	andi	r2,r2,255
    3778:	10800858 	cmpnei	r2,r2,33
    377c:	10000d1e 	bne	r2,zero,37b4 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
    3780:	e0bfff17 	ldw	r2,-4(fp)
    3784:	00c20034 	movhi	r3,2048
    3788:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
    378c:	e0bfff17 	ldw	r2,-4(fp)
    3790:	00c20004 	movi	r3,2048
    3794:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    3798:	e0bfff17 	ldw	r2,-4(fp)
    379c:	00c00074 	movhi	r3,1
    37a0:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
    37a4:	e0bfff17 	ldw	r2,-4(fp)
    37a8:	00c00044 	movi	r3,1
    37ac:	10c03215 	stw	r3,200(r2)
    37b0:	00000206 	br	37bc <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    37b4:	00bffb44 	movi	r2,-19
    37b8:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    37bc:	e0bfff17 	ldw	r2,-4(fp)
    37c0:	10800e17 	ldw	r2,56(r2)
    37c4:	1007883a 	mov	r3,r2
    37c8:	e0bfff17 	ldw	r2,-4(fp)
    37cc:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
    37d0:	e0bfff17 	ldw	r2,-4(fp)
    37d4:	00c00044 	movi	r3,1
    37d8:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
    37dc:	e0bfff17 	ldw	r2,-4(fp)
    37e0:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    37e4:	e0bfff17 	ldw	r2,-4(fp)
    37e8:	00c04004 	movi	r3,256
    37ec:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
    37f0:	e0bffe17 	ldw	r2,-8(fp)
}
    37f4:	e037883a 	mov	sp,fp
    37f8:	dfc00117 	ldw	ra,4(sp)
    37fc:	df000017 	ldw	fp,0(sp)
    3800:	dec00204 	addi	sp,sp,8
    3804:	f800283a 	ret

00003808 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    3808:	deffee04 	addi	sp,sp,-72
    380c:	dfc01115 	stw	ra,68(sp)
    3810:	df001015 	stw	fp,64(sp)
    3814:	df001004 	addi	fp,sp,64
    3818:	e13ffc15 	stw	r4,-16(fp)
    381c:	e17ffd15 	stw	r5,-12(fp)
    3820:	e1bffe15 	stw	r6,-8(fp)
    3824:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    3828:	00800804 	movi	r2,32
    382c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
    3830:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
    3834:	00002706 	br	38d4 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    3838:	e0fff117 	ldw	r3,-60(fp)
    383c:	e0bfff17 	ldw	r2,-4(fp)
    3840:	1880012e 	bgeu	r3,r2,3848 <alt_epcs_flash_memcmp+0x40>
    3844:	1805883a 	mov	r2,r3
    3848:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    384c:	e0fffe17 	ldw	r3,-8(fp)
    3850:	e0bff017 	ldw	r2,-64(fp)
    3854:	1885883a 	add	r2,r3,r2
    3858:	e0fff404 	addi	r3,fp,-48
    385c:	e1fff217 	ldw	r7,-56(fp)
    3860:	180d883a 	mov	r6,r3
    3864:	100b883a 	mov	r5,r2
    3868:	e13ffc17 	ldw	r4,-16(fp)
    386c:	0003dec0 	call	3dec <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    3870:	1000020e 	bge	r2,zero,387c <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    3874:	00bfffc4 	movi	r2,-1
    3878:	00001906 	br	38e0 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    387c:	e0bff017 	ldw	r2,-64(fp)
    3880:	e0fffd17 	ldw	r3,-12(fp)
    3884:	1885883a 	add	r2,r3,r2
    3888:	e13ff217 	ldw	r4,-56(fp)
    388c:	e0fff404 	addi	r3,fp,-48
    3890:	200d883a 	mov	r6,r4
    3894:	180b883a 	mov	r5,r3
    3898:	1009883a 	mov	r4,r2
    389c:	00071a40 	call	71a4 <memcmp>
    38a0:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
    38a4:	e0bff317 	ldw	r2,-52(fp)
    38a8:	10000226 	beq	r2,zero,38b4 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
    38ac:	e0bff317 	ldw	r2,-52(fp)
    38b0:	00000b06 	br	38e0 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
    38b4:	e0bff217 	ldw	r2,-56(fp)
    38b8:	e0ffff17 	ldw	r3,-4(fp)
    38bc:	1885c83a 	sub	r2,r3,r2
    38c0:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
    38c4:	e0fff017 	ldw	r3,-64(fp)
    38c8:	e0bff217 	ldw	r2,-56(fp)
    38cc:	1885883a 	add	r2,r3,r2
    38d0:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    38d4:	e0bfff17 	ldw	r2,-4(fp)
    38d8:	103fd71e 	bne	r2,zero,3838 <__alt_mem_epcs_flash_controller_0+0xff802838>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    38dc:	0005883a 	mov	r2,zero
}
    38e0:	e037883a 	mov	sp,fp
    38e4:	dfc00117 	ldw	ra,4(sp)
    38e8:	df000017 	ldw	fp,0(sp)
    38ec:	dec00204 	addi	sp,sp,8
    38f0:	f800283a 	ret

000038f4 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    38f4:	defff404 	addi	sp,sp,-48
    38f8:	dfc00b15 	stw	ra,44(sp)
    38fc:	df000a15 	stw	fp,40(sp)
    3900:	df000a04 	addi	fp,sp,40
    3904:	e13ffc15 	stw	r4,-16(fp)
    3908:	e17ffd15 	stw	r5,-12(fp)
    390c:	e1bffe15 	stw	r6,-8(fp)
    3910:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
    3914:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    3918:	e03ff815 	stw	zero,-32(fp)
    391c:	00008306 	br	3b2c <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    3920:	e0fffc17 	ldw	r3,-16(fp)
    3924:	e0bff817 	ldw	r2,-32(fp)
    3928:	1004913a 	slli	r2,r2,4
    392c:	1885883a 	add	r2,r3,r2
    3930:	10800d04 	addi	r2,r2,52
    3934:	10800017 	ldw	r2,0(r2)
    3938:	e0fffd17 	ldw	r3,-12(fp)
    393c:	18807816 	blt	r3,r2,3b20 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
    3940:	e0fffc17 	ldw	r3,-16(fp)
    3944:	e0bff817 	ldw	r2,-32(fp)
    3948:	1004913a 	slli	r2,r2,4
    394c:	1885883a 	add	r2,r3,r2
    3950:	10800d04 	addi	r2,r2,52
    3954:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
    3958:	e13ffc17 	ldw	r4,-16(fp)
    395c:	e0bff817 	ldw	r2,-32(fp)
    3960:	1004913a 	slli	r2,r2,4
    3964:	2085883a 	add	r2,r4,r2
    3968:	10800e04 	addi	r2,r2,56
    396c:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
    3970:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    3974:	e0fffd17 	ldw	r3,-12(fp)
    3978:	1880690e 	bge	r3,r2,3b20 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    397c:	e0fffc17 	ldw	r3,-16(fp)
    3980:	e0bff817 	ldw	r2,-32(fp)
    3984:	1004913a 	slli	r2,r2,4
    3988:	1885883a 	add	r2,r3,r2
    398c:	10800d04 	addi	r2,r2,52
    3990:	10800017 	ldw	r2,0(r2)
    3994:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    3998:	e03ff915 	stw	zero,-28(fp)
    399c:	00005806 	br	3b00 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
    39a0:	e0fffd17 	ldw	r3,-12(fp)
    39a4:	e0bffa17 	ldw	r2,-24(fp)
    39a8:	18804916 	blt	r3,r2,3ad0 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
    39ac:	e0fffc17 	ldw	r3,-16(fp)
    39b0:	e0bff817 	ldw	r2,-32(fp)
    39b4:	10800104 	addi	r2,r2,4
    39b8:	1004913a 	slli	r2,r2,4
    39bc:	1885883a 	add	r2,r3,r2
    39c0:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
    39c4:	e0bffa17 	ldw	r2,-24(fp)
    39c8:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
    39cc:	e0fffd17 	ldw	r3,-12(fp)
    39d0:	18803f0e 	bge	r3,r2,3ad0 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    39d4:	e0fffc17 	ldw	r3,-16(fp)
    39d8:	e0bff817 	ldw	r2,-32(fp)
    39dc:	10800104 	addi	r2,r2,4
    39e0:	1004913a 	slli	r2,r2,4
    39e4:	1885883a 	add	r2,r3,r2
    39e8:	10c00017 	ldw	r3,0(r2)
    39ec:	e0bffa17 	ldw	r2,-24(fp)
    39f0:	1887883a 	add	r3,r3,r2
    39f4:	e0bffd17 	ldw	r2,-12(fp)
    39f8:	1885c83a 	sub	r2,r3,r2
    39fc:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    3a00:	e0fffb17 	ldw	r3,-20(fp)
    3a04:	e0bfff17 	ldw	r2,-4(fp)
    3a08:	1880010e 	bge	r3,r2,3a10 <alt_epcs_flash_write+0x11c>
    3a0c:	1805883a 	mov	r2,r3
    3a10:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    3a14:	e0bffb17 	ldw	r2,-20(fp)
    3a18:	100f883a 	mov	r7,r2
    3a1c:	e1bffd17 	ldw	r6,-12(fp)
    3a20:	e17ffe17 	ldw	r5,-8(fp)
    3a24:	e13ffc17 	ldw	r4,-16(fp)
    3a28:	00038080 	call	3808 <alt_epcs_flash_memcmp>
    3a2c:	10001226 	beq	r2,zero,3a78 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    3a30:	e0bffc17 	ldw	r2,-16(fp)
    3a34:	10800817 	ldw	r2,32(r2)
    3a38:	e17ffa17 	ldw	r5,-24(fp)
    3a3c:	e13ffc17 	ldw	r4,-16(fp)
    3a40:	103ee83a 	callr	r2
    3a44:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
    3a48:	e0bff717 	ldw	r2,-36(fp)
    3a4c:	10000a1e 	bne	r2,zero,3a78 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
    3a50:	e0bffc17 	ldw	r2,-16(fp)
    3a54:	10800917 	ldw	r2,36(r2)
    3a58:	e0fffb17 	ldw	r3,-20(fp)
    3a5c:	d8c00015 	stw	r3,0(sp)
    3a60:	e1fffe17 	ldw	r7,-8(fp)
    3a64:	e1bffd17 	ldw	r6,-12(fp)
    3a68:	e17ffa17 	ldw	r5,-24(fp)
    3a6c:	e13ffc17 	ldw	r4,-16(fp)
    3a70:	103ee83a 	callr	r2
    3a74:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    3a78:	e0ffff17 	ldw	r3,-4(fp)
    3a7c:	e0bffb17 	ldw	r2,-20(fp)
    3a80:	18802e26 	beq	r3,r2,3b3c <alt_epcs_flash_write+0x248>
    3a84:	e0bff717 	ldw	r2,-36(fp)
    3a88:	10002c1e 	bne	r2,zero,3b3c <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
    3a8c:	e0ffff17 	ldw	r3,-4(fp)
    3a90:	e0bffb17 	ldw	r2,-20(fp)
    3a94:	1885c83a 	sub	r2,r3,r2
    3a98:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    3a9c:	e0fffc17 	ldw	r3,-16(fp)
    3aa0:	e0bff817 	ldw	r2,-32(fp)
    3aa4:	10800104 	addi	r2,r2,4
    3aa8:	1004913a 	slli	r2,r2,4
    3aac:	1885883a 	add	r2,r3,r2
    3ab0:	10c00017 	ldw	r3,0(r2)
    3ab4:	e0bffa17 	ldw	r2,-24(fp)
    3ab8:	1885883a 	add	r2,r3,r2
    3abc:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    3ac0:	e0bffb17 	ldw	r2,-20(fp)
    3ac4:	e0fffe17 	ldw	r3,-8(fp)
    3ac8:	1885883a 	add	r2,r3,r2
    3acc:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    3ad0:	e0fffc17 	ldw	r3,-16(fp)
    3ad4:	e0bff817 	ldw	r2,-32(fp)
    3ad8:	10800104 	addi	r2,r2,4
    3adc:	1004913a 	slli	r2,r2,4
    3ae0:	1885883a 	add	r2,r3,r2
    3ae4:	10800017 	ldw	r2,0(r2)
    3ae8:	e0fffa17 	ldw	r3,-24(fp)
    3aec:	1885883a 	add	r2,r3,r2
    3af0:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    3af4:	e0bff917 	ldw	r2,-28(fp)
    3af8:	10800044 	addi	r2,r2,1
    3afc:	e0bff915 	stw	r2,-28(fp)
    3b00:	e0fffc17 	ldw	r3,-16(fp)
    3b04:	e0bff817 	ldw	r2,-32(fp)
    3b08:	1004913a 	slli	r2,r2,4
    3b0c:	1885883a 	add	r2,r3,r2
    3b10:	10800f04 	addi	r2,r2,60
    3b14:	10800017 	ldw	r2,0(r2)
    3b18:	e0fff917 	ldw	r3,-28(fp)
    3b1c:	18bfa016 	blt	r3,r2,39a0 <__alt_mem_epcs_flash_controller_0+0xff8029a0>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    3b20:	e0bff817 	ldw	r2,-32(fp)
    3b24:	10800044 	addi	r2,r2,1
    3b28:	e0bff815 	stw	r2,-32(fp)
    3b2c:	e0bffc17 	ldw	r2,-16(fp)
    3b30:	10800c17 	ldw	r2,48(r2)
    3b34:	e0fff817 	ldw	r3,-32(fp)
    3b38:	18bf7916 	blt	r3,r2,3920 <__alt_mem_epcs_flash_controller_0+0xff802920>
      }
    }
  }

finished:
  return ret_code;
    3b3c:	e0bff717 	ldw	r2,-36(fp)
}
    3b40:	e037883a 	mov	sp,fp
    3b44:	dfc00117 	ldw	ra,4(sp)
    3b48:	df000017 	ldw	fp,0(sp)
    3b4c:	dec00204 	addi	sp,sp,8
    3b50:	f800283a 	ret

00003b54 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    3b54:	defffa04 	addi	sp,sp,-24
    3b58:	df000515 	stw	fp,20(sp)
    3b5c:	df000504 	addi	fp,sp,20
    3b60:	e13ffd15 	stw	r4,-12(fp)
    3b64:	e17ffe15 	stw	r5,-8(fp)
    3b68:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    3b6c:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    3b70:	e0bffd17 	ldw	r2,-12(fp)
    3b74:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
    3b78:	e0bffc17 	ldw	r2,-16(fp)
    3b7c:	10c00c17 	ldw	r3,48(r2)
    3b80:	e0bfff17 	ldw	r2,-4(fp)
    3b84:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    3b88:	e0bffc17 	ldw	r2,-16(fp)
    3b8c:	10800c17 	ldw	r2,48(r2)
    3b90:	1000031e 	bne	r2,zero,3ba0 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
    3b94:	00bffec4 	movi	r2,-5
    3b98:	e0bffb15 	stw	r2,-20(fp)
    3b9c:	00000b06 	br	3bcc <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    3ba0:	e0bffc17 	ldw	r2,-16(fp)
    3ba4:	10800c17 	ldw	r2,48(r2)
    3ba8:	10800250 	cmplti	r2,r2,9
    3bac:	1000031e 	bne	r2,zero,3bbc <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
    3bb0:	00bffd04 	movi	r2,-12
    3bb4:	e0bffb15 	stw	r2,-20(fp)
    3bb8:	00000406 	br	3bcc <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
    3bbc:	e0bffc17 	ldw	r2,-16(fp)
    3bc0:	10c00d04 	addi	r3,r2,52
    3bc4:	e0bffe17 	ldw	r2,-8(fp)
    3bc8:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    3bcc:	e0bffb17 	ldw	r2,-20(fp)
}
    3bd0:	e037883a 	mov	sp,fp
    3bd4:	df000017 	ldw	fp,0(sp)
    3bd8:	dec00104 	addi	sp,sp,4
    3bdc:	f800283a 	ret

00003be0 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    3be0:	defff904 	addi	sp,sp,-28
    3be4:	df000615 	stw	fp,24(sp)
    3be8:	df000604 	addi	fp,sp,24
    3bec:	e13ffe15 	stw	r4,-8(fp)
    3bf0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    3bf4:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    3bf8:	e0bffe17 	ldw	r2,-8(fp)
    3bfc:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    3c00:	e0bffb17 	ldw	r2,-20(fp)
    3c04:	10800c17 	ldw	r2,48(r2)
    3c08:	10bfffc4 	addi	r2,r2,-1
    3c0c:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    3c10:	e0fffb17 	ldw	r3,-20(fp)
    3c14:	e0bffc17 	ldw	r2,-16(fp)
    3c18:	1004913a 	slli	r2,r2,4
    3c1c:	1885883a 	add	r2,r3,r2
    3c20:	10800d04 	addi	r2,r2,52
    3c24:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    3c28:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    3c2c:	e13ffb17 	ldw	r4,-20(fp)
    3c30:	e0bffc17 	ldw	r2,-16(fp)
    3c34:	1004913a 	slli	r2,r2,4
    3c38:	2085883a 	add	r2,r4,r2
    3c3c:	10800e04 	addi	r2,r2,56
    3c40:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    3c44:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    3c48:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
    3c4c:	e0bfff17 	ldw	r2,-4(fp)
    3c50:	e0fffd17 	ldw	r3,-12(fp)
    3c54:	1880022e 	bgeu	r3,r2,3c60 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    3c58:	00bffec4 	movi	r2,-5
    3c5c:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
    3c60:	e0bffa17 	ldw	r2,-24(fp)
}
    3c64:	e037883a 	mov	sp,fp
    3c68:	df000017 	ldw	fp,0(sp)
    3c6c:	dec00104 	addi	sp,sp,4
    3c70:	f800283a 	ret

00003c74 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    3c74:	defffa04 	addi	sp,sp,-24
    3c78:	dfc00515 	stw	ra,20(sp)
    3c7c:	df000415 	stw	fp,16(sp)
    3c80:	df000404 	addi	fp,sp,16
    3c84:	e13ffe15 	stw	r4,-8(fp)
    3c88:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    3c8c:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    3c90:	e0bffe17 	ldw	r2,-8(fp)
    3c94:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    3c98:	e17fff17 	ldw	r5,-4(fp)
    3c9c:	e13ffe17 	ldw	r4,-8(fp)
    3ca0:	0003be00 	call	3be0 <alt_epcs_test_address>
    3ca4:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
    3ca8:	e0bffc17 	ldw	r2,-16(fp)
    3cac:	10000916 	blt	r2,zero,3cd4 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    3cb0:	e0bffd17 	ldw	r2,-12(fp)
    3cb4:	10c02e17 	ldw	r3,184(r2)
    3cb8:	e13fff17 	ldw	r4,-4(fp)
    3cbc:	e0bffd17 	ldw	r2,-12(fp)
    3cc0:	10803217 	ldw	r2,200(r2)
    3cc4:	100d883a 	mov	r6,r2
    3cc8:	200b883a 	mov	r5,r4
    3ccc:	1809883a 	mov	r4,r3
    3cd0:	00049bc0 	call	49bc <epcs_sector_erase>
  }
  return ret_code;
    3cd4:	e0bffc17 	ldw	r2,-16(fp)
}
    3cd8:	e037883a 	mov	sp,fp
    3cdc:	dfc00117 	ldw	ra,4(sp)
    3ce0:	df000017 	ldw	fp,0(sp)
    3ce4:	dec00204 	addi	sp,sp,8
    3ce8:	f800283a 	ret

00003cec <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    3cec:	defff404 	addi	sp,sp,-48
    3cf0:	dfc00b15 	stw	ra,44(sp)
    3cf4:	df000a15 	stw	fp,40(sp)
    3cf8:	df000a04 	addi	fp,sp,40
    3cfc:	e13ffc15 	stw	r4,-16(fp)
    3d00:	e17ffd15 	stw	r5,-12(fp)
    3d04:	e1bffe15 	stw	r6,-8(fp)
    3d08:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    3d0c:	e0bffc17 	ldw	r2,-16(fp)
    3d10:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    3d14:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    3d18:	e17ffe17 	ldw	r5,-8(fp)
    3d1c:	e13ffc17 	ldw	r4,-16(fp)
    3d20:	0003be00 	call	3be0 <alt_epcs_test_address>
    3d24:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    3d28:	e0bff917 	ldw	r2,-28(fp)
    3d2c:	10002916 	blt	r2,zero,3dd4 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    3d30:	00002606 	br	3dcc <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    3d34:	e0bff817 	ldw	r2,-32(fp)
    3d38:	10c03117 	ldw	r3,196(r2)
    3d3c:	e0bffe17 	ldw	r2,-8(fp)
    3d40:	1887883a 	add	r3,r3,r2
    3d44:	e0bff817 	ldw	r2,-32(fp)
    3d48:	10803117 	ldw	r2,196(r2)
    3d4c:	0085c83a 	sub	r2,zero,r2
    3d50:	1884703a 	and	r2,r3,r2
    3d54:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    3d58:	e0fffa17 	ldw	r3,-24(fp)
    3d5c:	e0bffe17 	ldw	r2,-8(fp)
    3d60:	1885c83a 	sub	r2,r3,r2
    3d64:	e0c00217 	ldw	r3,8(fp)
    3d68:	1880010e 	bge	r3,r2,3d70 <alt_epcs_flash_write_block+0x84>
    3d6c:	1805883a 	mov	r2,r3
    3d70:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    3d74:	e0bff817 	ldw	r2,-32(fp)
    3d78:	11002e17 	ldw	r4,184(r2)
    3d7c:	e0bff717 	ldw	r2,-36(fp)
    3d80:	e0ffff17 	ldw	r3,-4(fp)
    3d84:	1887883a 	add	r3,r3,r2
    3d88:	e0bff817 	ldw	r2,-32(fp)
    3d8c:	10803217 	ldw	r2,200(r2)
    3d90:	d8800015 	stw	r2,0(sp)
    3d94:	e1fffb17 	ldw	r7,-20(fp)
    3d98:	180d883a 	mov	r6,r3
    3d9c:	e17ffe17 	ldw	r5,-8(fp)
    3da0:	0004c6c0 	call	4c6c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    3da4:	e0c00217 	ldw	r3,8(fp)
    3da8:	e0bffb17 	ldw	r2,-20(fp)
    3dac:	1885c83a 	sub	r2,r3,r2
    3db0:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    3db4:	e0fff717 	ldw	r3,-36(fp)
    3db8:	e0bffb17 	ldw	r2,-20(fp)
    3dbc:	1885883a 	add	r2,r3,r2
    3dc0:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    3dc4:	e0bffa17 	ldw	r2,-24(fp)
    3dc8:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    3dcc:	e0800217 	ldw	r2,8(fp)
    3dd0:	103fd81e 	bne	r2,zero,3d34 <__alt_mem_epcs_flash_controller_0+0xff802d34>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    3dd4:	e0bff917 	ldw	r2,-28(fp)
}
    3dd8:	e037883a 	mov	sp,fp
    3ddc:	dfc00117 	ldw	ra,4(sp)
    3de0:	df000017 	ldw	fp,0(sp)
    3de4:	dec00204 	addi	sp,sp,8
    3de8:	f800283a 	ret

00003dec <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    3dec:	defff704 	addi	sp,sp,-36
    3df0:	dfc00815 	stw	ra,32(sp)
    3df4:	df000715 	stw	fp,28(sp)
    3df8:	df000704 	addi	fp,sp,28
    3dfc:	e13ffc15 	stw	r4,-16(fp)
    3e00:	e17ffd15 	stw	r5,-12(fp)
    3e04:	e1bffe15 	stw	r6,-8(fp)
    3e08:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    3e0c:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    3e10:	e0bffc17 	ldw	r2,-16(fp)
    3e14:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    3e18:	e17ffd17 	ldw	r5,-12(fp)
    3e1c:	e13ffc17 	ldw	r4,-16(fp)
    3e20:	0003be00 	call	3be0 <alt_epcs_test_address>
    3e24:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
    3e28:	e0bffa17 	ldw	r2,-24(fp)
    3e2c:	10000f16 	blt	r2,zero,3e6c <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    3e30:	e0bffb17 	ldw	r2,-20(fp)
    3e34:	10c02e17 	ldw	r3,184(r2)
    3e38:	e0bffb17 	ldw	r2,-20(fp)
    3e3c:	10803217 	ldw	r2,200(r2)
    3e40:	d8800015 	stw	r2,0(sp)
    3e44:	e1ffff17 	ldw	r7,-4(fp)
    3e48:	e1bffe17 	ldw	r6,-8(fp)
    3e4c:	e17ffd17 	ldw	r5,-12(fp)
    3e50:	1809883a 	mov	r4,r3
    3e54:	0004ab80 	call	4ab8 <epcs_read_buffer>
    3e58:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    3e5c:	e0fffa17 	ldw	r3,-24(fp)
    3e60:	e0bfff17 	ldw	r2,-4(fp)
    3e64:	1880011e 	bne	r3,r2,3e6c <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    3e68:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
    3e6c:	e0bffa17 	ldw	r2,-24(fp)
}
    3e70:	e037883a 	mov	sp,fp
    3e74:	dfc00117 	ldw	ra,4(sp)
    3e78:	df000017 	ldw	fp,0(sp)
    3e7c:	dec00204 	addi	sp,sp,8
    3e80:	f800283a 	ret

00003e84 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3e84:	defffa04 	addi	sp,sp,-24
    3e88:	dfc00515 	stw	ra,20(sp)
    3e8c:	df000415 	stw	fp,16(sp)
    3e90:	df000404 	addi	fp,sp,16
    3e94:	e13ffd15 	stw	r4,-12(fp)
    3e98:	e17ffe15 	stw	r5,-8(fp)
    3e9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3ea0:	e0bffd17 	ldw	r2,-12(fp)
    3ea4:	10800017 	ldw	r2,0(r2)
    3ea8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3eac:	e0bffc17 	ldw	r2,-16(fp)
    3eb0:	10c00a04 	addi	r3,r2,40
    3eb4:	e0bffd17 	ldw	r2,-12(fp)
    3eb8:	10800217 	ldw	r2,8(r2)
    3ebc:	100f883a 	mov	r7,r2
    3ec0:	e1bfff17 	ldw	r6,-4(fp)
    3ec4:	e17ffe17 	ldw	r5,-8(fp)
    3ec8:	1809883a 	mov	r4,r3
    3ecc:	00044ac0 	call	44ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3ed0:	e037883a 	mov	sp,fp
    3ed4:	dfc00117 	ldw	ra,4(sp)
    3ed8:	df000017 	ldw	fp,0(sp)
    3edc:	dec00204 	addi	sp,sp,8
    3ee0:	f800283a 	ret

00003ee4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3ee4:	defffa04 	addi	sp,sp,-24
    3ee8:	dfc00515 	stw	ra,20(sp)
    3eec:	df000415 	stw	fp,16(sp)
    3ef0:	df000404 	addi	fp,sp,16
    3ef4:	e13ffd15 	stw	r4,-12(fp)
    3ef8:	e17ffe15 	stw	r5,-8(fp)
    3efc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3f00:	e0bffd17 	ldw	r2,-12(fp)
    3f04:	10800017 	ldw	r2,0(r2)
    3f08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3f0c:	e0bffc17 	ldw	r2,-16(fp)
    3f10:	10c00a04 	addi	r3,r2,40
    3f14:	e0bffd17 	ldw	r2,-12(fp)
    3f18:	10800217 	ldw	r2,8(r2)
    3f1c:	100f883a 	mov	r7,r2
    3f20:	e1bfff17 	ldw	r6,-4(fp)
    3f24:	e17ffe17 	ldw	r5,-8(fp)
    3f28:	1809883a 	mov	r4,r3
    3f2c:	00046c80 	call	46c8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3f30:	e037883a 	mov	sp,fp
    3f34:	dfc00117 	ldw	ra,4(sp)
    3f38:	df000017 	ldw	fp,0(sp)
    3f3c:	dec00204 	addi	sp,sp,8
    3f40:	f800283a 	ret

00003f44 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3f44:	defffc04 	addi	sp,sp,-16
    3f48:	dfc00315 	stw	ra,12(sp)
    3f4c:	df000215 	stw	fp,8(sp)
    3f50:	df000204 	addi	fp,sp,8
    3f54:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3f58:	e0bfff17 	ldw	r2,-4(fp)
    3f5c:	10800017 	ldw	r2,0(r2)
    3f60:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3f64:	e0bffe17 	ldw	r2,-8(fp)
    3f68:	10c00a04 	addi	r3,r2,40
    3f6c:	e0bfff17 	ldw	r2,-4(fp)
    3f70:	10800217 	ldw	r2,8(r2)
    3f74:	100b883a 	mov	r5,r2
    3f78:	1809883a 	mov	r4,r3
    3f7c:	00043540 	call	4354 <altera_avalon_jtag_uart_close>
}
    3f80:	e037883a 	mov	sp,fp
    3f84:	dfc00117 	ldw	ra,4(sp)
    3f88:	df000017 	ldw	fp,0(sp)
    3f8c:	dec00204 	addi	sp,sp,8
    3f90:	f800283a 	ret

00003f94 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3f94:	defffa04 	addi	sp,sp,-24
    3f98:	dfc00515 	stw	ra,20(sp)
    3f9c:	df000415 	stw	fp,16(sp)
    3fa0:	df000404 	addi	fp,sp,16
    3fa4:	e13ffd15 	stw	r4,-12(fp)
    3fa8:	e17ffe15 	stw	r5,-8(fp)
    3fac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3fb0:	e0bffd17 	ldw	r2,-12(fp)
    3fb4:	10800017 	ldw	r2,0(r2)
    3fb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3fbc:	e0bffc17 	ldw	r2,-16(fp)
    3fc0:	10800a04 	addi	r2,r2,40
    3fc4:	e1bfff17 	ldw	r6,-4(fp)
    3fc8:	e17ffe17 	ldw	r5,-8(fp)
    3fcc:	1009883a 	mov	r4,r2
    3fd0:	00043bc0 	call	43bc <altera_avalon_jtag_uart_ioctl>
}
    3fd4:	e037883a 	mov	sp,fp
    3fd8:	dfc00117 	ldw	ra,4(sp)
    3fdc:	df000017 	ldw	fp,0(sp)
    3fe0:	dec00204 	addi	sp,sp,8
    3fe4:	f800283a 	ret

00003fe8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    3fe8:	defffa04 	addi	sp,sp,-24
    3fec:	dfc00515 	stw	ra,20(sp)
    3ff0:	df000415 	stw	fp,16(sp)
    3ff4:	df000404 	addi	fp,sp,16
    3ff8:	e13ffd15 	stw	r4,-12(fp)
    3ffc:	e17ffe15 	stw	r5,-8(fp)
    4000:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4004:	e0bffd17 	ldw	r2,-12(fp)
    4008:	00c00044 	movi	r3,1
    400c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    4010:	e0bffd17 	ldw	r2,-12(fp)
    4014:	10800017 	ldw	r2,0(r2)
    4018:	10800104 	addi	r2,r2,4
    401c:	1007883a 	mov	r3,r2
    4020:	e0bffd17 	ldw	r2,-12(fp)
    4024:	10800817 	ldw	r2,32(r2)
    4028:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    402c:	e0bffe17 	ldw	r2,-8(fp)
    4030:	e0ffff17 	ldw	r3,-4(fp)
    4034:	d8000015 	stw	zero,0(sp)
    4038:	e1fffd17 	ldw	r7,-12(fp)
    403c:	01800034 	movhi	r6,0
    4040:	31902a04 	addi	r6,r6,16552
    4044:	180b883a 	mov	r5,r3
    4048:	1009883a 	mov	r4,r2
    404c:	00054300 	call	5430 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    4050:	e0bffd17 	ldw	r2,-12(fp)
    4054:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    4058:	e0bffd17 	ldw	r2,-12(fp)
    405c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4060:	d0e6ec17 	ldw	r3,-25680(gp)
    4064:	e1fffd17 	ldw	r7,-12(fp)
    4068:	01800034 	movhi	r6,0
    406c:	3190ad04 	addi	r6,r6,17076
    4070:	180b883a 	mov	r5,r3
    4074:	1009883a 	mov	r4,r2
    4078:	0004f280 	call	4f28 <alt_alarm_start>
    407c:	1000040e 	bge	r2,zero,4090 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    4080:	e0fffd17 	ldw	r3,-12(fp)
    4084:	00a00034 	movhi	r2,32768
    4088:	10bfffc4 	addi	r2,r2,-1
    408c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    4090:	0001883a 	nop
    4094:	e037883a 	mov	sp,fp
    4098:	dfc00117 	ldw	ra,4(sp)
    409c:	df000017 	ldw	fp,0(sp)
    40a0:	dec00204 	addi	sp,sp,8
    40a4:	f800283a 	ret

000040a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    40a8:	defff804 	addi	sp,sp,-32
    40ac:	df000715 	stw	fp,28(sp)
    40b0:	df000704 	addi	fp,sp,28
    40b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    40b8:	e0bfff17 	ldw	r2,-4(fp)
    40bc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    40c0:	e0bffb17 	ldw	r2,-20(fp)
    40c4:	10800017 	ldw	r2,0(r2)
    40c8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    40cc:	e0bffc17 	ldw	r2,-16(fp)
    40d0:	10800104 	addi	r2,r2,4
    40d4:	10800037 	ldwio	r2,0(r2)
    40d8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    40dc:	e0bffd17 	ldw	r2,-12(fp)
    40e0:	1080c00c 	andi	r2,r2,768
    40e4:	10006d26 	beq	r2,zero,429c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    40e8:	e0bffd17 	ldw	r2,-12(fp)
    40ec:	1080400c 	andi	r2,r2,256
    40f0:	10003526 	beq	r2,zero,41c8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    40f4:	00800074 	movhi	r2,1
    40f8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    40fc:	e0bffb17 	ldw	r2,-20(fp)
    4100:	10800a17 	ldw	r2,40(r2)
    4104:	10800044 	addi	r2,r2,1
    4108:	1081ffcc 	andi	r2,r2,2047
    410c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    4110:	e0bffb17 	ldw	r2,-20(fp)
    4114:	10c00b17 	ldw	r3,44(r2)
    4118:	e0bffe17 	ldw	r2,-8(fp)
    411c:	18801526 	beq	r3,r2,4174 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4120:	e0bffc17 	ldw	r2,-16(fp)
    4124:	10800037 	ldwio	r2,0(r2)
    4128:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    412c:	e0bff917 	ldw	r2,-28(fp)
    4130:	10a0000c 	andi	r2,r2,32768
    4134:	10001126 	beq	r2,zero,417c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    4138:	e0bffb17 	ldw	r2,-20(fp)
    413c:	10800a17 	ldw	r2,40(r2)
    4140:	e0fff917 	ldw	r3,-28(fp)
    4144:	1809883a 	mov	r4,r3
    4148:	e0fffb17 	ldw	r3,-20(fp)
    414c:	1885883a 	add	r2,r3,r2
    4150:	10800e04 	addi	r2,r2,56
    4154:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4158:	e0bffb17 	ldw	r2,-20(fp)
    415c:	10800a17 	ldw	r2,40(r2)
    4160:	10800044 	addi	r2,r2,1
    4164:	10c1ffcc 	andi	r3,r2,2047
    4168:	e0bffb17 	ldw	r2,-20(fp)
    416c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    4170:	003fe206 	br	40fc <__alt_mem_epcs_flash_controller_0+0xff8030fc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    4174:	0001883a 	nop
    4178:	00000106 	br	4180 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    417c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    4180:	e0bff917 	ldw	r2,-28(fp)
    4184:	10bfffec 	andhi	r2,r2,65535
    4188:	10000f26 	beq	r2,zero,41c8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    418c:	e0bffb17 	ldw	r2,-20(fp)
    4190:	10c00817 	ldw	r3,32(r2)
    4194:	00bfff84 	movi	r2,-2
    4198:	1886703a 	and	r3,r3,r2
    419c:	e0bffb17 	ldw	r2,-20(fp)
    41a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    41a4:	e0bffc17 	ldw	r2,-16(fp)
    41a8:	10800104 	addi	r2,r2,4
    41ac:	1007883a 	mov	r3,r2
    41b0:	e0bffb17 	ldw	r2,-20(fp)
    41b4:	10800817 	ldw	r2,32(r2)
    41b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    41bc:	e0bffc17 	ldw	r2,-16(fp)
    41c0:	10800104 	addi	r2,r2,4
    41c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    41c8:	e0bffd17 	ldw	r2,-12(fp)
    41cc:	1080800c 	andi	r2,r2,512
    41d0:	103fbe26 	beq	r2,zero,40cc <__alt_mem_epcs_flash_controller_0+0xff8030cc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    41d4:	e0bffd17 	ldw	r2,-12(fp)
    41d8:	1004d43a 	srli	r2,r2,16
    41dc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    41e0:	00001406 	br	4234 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    41e4:	e0bffc17 	ldw	r2,-16(fp)
    41e8:	e0fffb17 	ldw	r3,-20(fp)
    41ec:	18c00d17 	ldw	r3,52(r3)
    41f0:	e13ffb17 	ldw	r4,-20(fp)
    41f4:	20c7883a 	add	r3,r4,r3
    41f8:	18c20e04 	addi	r3,r3,2104
    41fc:	18c00003 	ldbu	r3,0(r3)
    4200:	18c03fcc 	andi	r3,r3,255
    4204:	18c0201c 	xori	r3,r3,128
    4208:	18ffe004 	addi	r3,r3,-128
    420c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4210:	e0bffb17 	ldw	r2,-20(fp)
    4214:	10800d17 	ldw	r2,52(r2)
    4218:	10800044 	addi	r2,r2,1
    421c:	10c1ffcc 	andi	r3,r2,2047
    4220:	e0bffb17 	ldw	r2,-20(fp)
    4224:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    4228:	e0bffa17 	ldw	r2,-24(fp)
    422c:	10bfffc4 	addi	r2,r2,-1
    4230:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    4234:	e0bffa17 	ldw	r2,-24(fp)
    4238:	10000526 	beq	r2,zero,4250 <altera_avalon_jtag_uart_irq+0x1a8>
    423c:	e0bffb17 	ldw	r2,-20(fp)
    4240:	10c00d17 	ldw	r3,52(r2)
    4244:	e0bffb17 	ldw	r2,-20(fp)
    4248:	10800c17 	ldw	r2,48(r2)
    424c:	18bfe51e 	bne	r3,r2,41e4 <__alt_mem_epcs_flash_controller_0+0xff8031e4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    4250:	e0bffa17 	ldw	r2,-24(fp)
    4254:	103f9d26 	beq	r2,zero,40cc <__alt_mem_epcs_flash_controller_0+0xff8030cc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4258:	e0bffb17 	ldw	r2,-20(fp)
    425c:	10c00817 	ldw	r3,32(r2)
    4260:	00bfff44 	movi	r2,-3
    4264:	1886703a 	and	r3,r3,r2
    4268:	e0bffb17 	ldw	r2,-20(fp)
    426c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4270:	e0bffb17 	ldw	r2,-20(fp)
    4274:	10800017 	ldw	r2,0(r2)
    4278:	10800104 	addi	r2,r2,4
    427c:	1007883a 	mov	r3,r2
    4280:	e0bffb17 	ldw	r2,-20(fp)
    4284:	10800817 	ldw	r2,32(r2)
    4288:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    428c:	e0bffc17 	ldw	r2,-16(fp)
    4290:	10800104 	addi	r2,r2,4
    4294:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    4298:	003f8c06 	br	40cc <__alt_mem_epcs_flash_controller_0+0xff8030cc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    429c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    42a0:	0001883a 	nop
    42a4:	e037883a 	mov	sp,fp
    42a8:	df000017 	ldw	fp,0(sp)
    42ac:	dec00104 	addi	sp,sp,4
    42b0:	f800283a 	ret

000042b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    42b4:	defff804 	addi	sp,sp,-32
    42b8:	df000715 	stw	fp,28(sp)
    42bc:	df000704 	addi	fp,sp,28
    42c0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    42c4:	e0bffb17 	ldw	r2,-20(fp)
    42c8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    42cc:	e0bff917 	ldw	r2,-28(fp)
    42d0:	10800017 	ldw	r2,0(r2)
    42d4:	10800104 	addi	r2,r2,4
    42d8:	10800037 	ldwio	r2,0(r2)
    42dc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    42e0:	e0bffa17 	ldw	r2,-24(fp)
    42e4:	1081000c 	andi	r2,r2,1024
    42e8:	10000b26 	beq	r2,zero,4318 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    42ec:	e0bff917 	ldw	r2,-28(fp)
    42f0:	10800017 	ldw	r2,0(r2)
    42f4:	10800104 	addi	r2,r2,4
    42f8:	1007883a 	mov	r3,r2
    42fc:	e0bff917 	ldw	r2,-28(fp)
    4300:	10800817 	ldw	r2,32(r2)
    4304:	10810014 	ori	r2,r2,1024
    4308:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    430c:	e0bff917 	ldw	r2,-28(fp)
    4310:	10000915 	stw	zero,36(r2)
    4314:	00000a06 	br	4340 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    4318:	e0bff917 	ldw	r2,-28(fp)
    431c:	10c00917 	ldw	r3,36(r2)
    4320:	00a00034 	movhi	r2,32768
    4324:	10bfff04 	addi	r2,r2,-4
    4328:	10c00536 	bltu	r2,r3,4340 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    432c:	e0bff917 	ldw	r2,-28(fp)
    4330:	10800917 	ldw	r2,36(r2)
    4334:	10c00044 	addi	r3,r2,1
    4338:	e0bff917 	ldw	r2,-28(fp)
    433c:	10c00915 	stw	r3,36(r2)
    4340:	d0a6ec17 	ldw	r2,-25680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    4344:	e037883a 	mov	sp,fp
    4348:	df000017 	ldw	fp,0(sp)
    434c:	dec00104 	addi	sp,sp,4
    4350:	f800283a 	ret

00004354 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    4354:	defffd04 	addi	sp,sp,-12
    4358:	df000215 	stw	fp,8(sp)
    435c:	df000204 	addi	fp,sp,8
    4360:	e13ffe15 	stw	r4,-8(fp)
    4364:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4368:	00000506 	br	4380 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    436c:	e0bfff17 	ldw	r2,-4(fp)
    4370:	1090000c 	andi	r2,r2,16384
    4374:	10000226 	beq	r2,zero,4380 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    4378:	00bffd44 	movi	r2,-11
    437c:	00000b06 	br	43ac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4380:	e0bffe17 	ldw	r2,-8(fp)
    4384:	10c00d17 	ldw	r3,52(r2)
    4388:	e0bffe17 	ldw	r2,-8(fp)
    438c:	10800c17 	ldw	r2,48(r2)
    4390:	18800526 	beq	r3,r2,43a8 <altera_avalon_jtag_uart_close+0x54>
    4394:	e0bffe17 	ldw	r2,-8(fp)
    4398:	10c00917 	ldw	r3,36(r2)
    439c:	e0bffe17 	ldw	r2,-8(fp)
    43a0:	10800117 	ldw	r2,4(r2)
    43a4:	18bff136 	bltu	r3,r2,436c <__alt_mem_epcs_flash_controller_0+0xff80336c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    43a8:	0005883a 	mov	r2,zero
}
    43ac:	e037883a 	mov	sp,fp
    43b0:	df000017 	ldw	fp,0(sp)
    43b4:	dec00104 	addi	sp,sp,4
    43b8:	f800283a 	ret

000043bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    43bc:	defffa04 	addi	sp,sp,-24
    43c0:	df000515 	stw	fp,20(sp)
    43c4:	df000504 	addi	fp,sp,20
    43c8:	e13ffd15 	stw	r4,-12(fp)
    43cc:	e17ffe15 	stw	r5,-8(fp)
    43d0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    43d4:	00bff9c4 	movi	r2,-25
    43d8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    43dc:	e0bffe17 	ldw	r2,-8(fp)
    43e0:	10da8060 	cmpeqi	r3,r2,27137
    43e4:	1800031e 	bne	r3,zero,43f4 <altera_avalon_jtag_uart_ioctl+0x38>
    43e8:	109a80a0 	cmpeqi	r2,r2,27138
    43ec:	1000181e 	bne	r2,zero,4450 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    43f0:	00002906 	br	4498 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    43f4:	e0bffd17 	ldw	r2,-12(fp)
    43f8:	10c00117 	ldw	r3,4(r2)
    43fc:	00a00034 	movhi	r2,32768
    4400:	10bfffc4 	addi	r2,r2,-1
    4404:	18802126 	beq	r3,r2,448c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    4408:	e0bfff17 	ldw	r2,-4(fp)
    440c:	10800017 	ldw	r2,0(r2)
    4410:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    4414:	e0bffc17 	ldw	r2,-16(fp)
    4418:	10800090 	cmplti	r2,r2,2
    441c:	1000061e 	bne	r2,zero,4438 <altera_avalon_jtag_uart_ioctl+0x7c>
    4420:	e0fffc17 	ldw	r3,-16(fp)
    4424:	00a00034 	movhi	r2,32768
    4428:	10bfffc4 	addi	r2,r2,-1
    442c:	18800226 	beq	r3,r2,4438 <altera_avalon_jtag_uart_ioctl+0x7c>
    4430:	e0bffc17 	ldw	r2,-16(fp)
    4434:	00000206 	br	4440 <altera_avalon_jtag_uart_ioctl+0x84>
    4438:	00a00034 	movhi	r2,32768
    443c:	10bfff84 	addi	r2,r2,-2
    4440:	e0fffd17 	ldw	r3,-12(fp)
    4444:	18800115 	stw	r2,4(r3)
      rc = 0;
    4448:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    444c:	00000f06 	br	448c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    4450:	e0bffd17 	ldw	r2,-12(fp)
    4454:	10c00117 	ldw	r3,4(r2)
    4458:	00a00034 	movhi	r2,32768
    445c:	10bfffc4 	addi	r2,r2,-1
    4460:	18800c26 	beq	r3,r2,4494 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    4464:	e0bffd17 	ldw	r2,-12(fp)
    4468:	10c00917 	ldw	r3,36(r2)
    446c:	e0bffd17 	ldw	r2,-12(fp)
    4470:	10800117 	ldw	r2,4(r2)
    4474:	1885803a 	cmpltu	r2,r3,r2
    4478:	10c03fcc 	andi	r3,r2,255
    447c:	e0bfff17 	ldw	r2,-4(fp)
    4480:	10c00015 	stw	r3,0(r2)
      rc = 0;
    4484:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    4488:	00000206 	br	4494 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    448c:	0001883a 	nop
    4490:	00000106 	br	4498 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    4494:	0001883a 	nop

  default:
    break;
  }

  return rc;
    4498:	e0bffb17 	ldw	r2,-20(fp)
}
    449c:	e037883a 	mov	sp,fp
    44a0:	df000017 	ldw	fp,0(sp)
    44a4:	dec00104 	addi	sp,sp,4
    44a8:	f800283a 	ret

000044ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    44ac:	defff304 	addi	sp,sp,-52
    44b0:	dfc00c15 	stw	ra,48(sp)
    44b4:	df000b15 	stw	fp,44(sp)
    44b8:	df000b04 	addi	fp,sp,44
    44bc:	e13ffc15 	stw	r4,-16(fp)
    44c0:	e17ffd15 	stw	r5,-12(fp)
    44c4:	e1bffe15 	stw	r6,-8(fp)
    44c8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    44cc:	e0bffd17 	ldw	r2,-12(fp)
    44d0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    44d4:	00004706 	br	45f4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    44d8:	e0bffc17 	ldw	r2,-16(fp)
    44dc:	10800a17 	ldw	r2,40(r2)
    44e0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    44e4:	e0bffc17 	ldw	r2,-16(fp)
    44e8:	10800b17 	ldw	r2,44(r2)
    44ec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    44f0:	e0fff717 	ldw	r3,-36(fp)
    44f4:	e0bff817 	ldw	r2,-32(fp)
    44f8:	18800536 	bltu	r3,r2,4510 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    44fc:	e0fff717 	ldw	r3,-36(fp)
    4500:	e0bff817 	ldw	r2,-32(fp)
    4504:	1885c83a 	sub	r2,r3,r2
    4508:	e0bff615 	stw	r2,-40(fp)
    450c:	00000406 	br	4520 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4510:	00c20004 	movi	r3,2048
    4514:	e0bff817 	ldw	r2,-32(fp)
    4518:	1885c83a 	sub	r2,r3,r2
    451c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4520:	e0bff617 	ldw	r2,-40(fp)
    4524:	10001e26 	beq	r2,zero,45a0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    4528:	e0fffe17 	ldw	r3,-8(fp)
    452c:	e0bff617 	ldw	r2,-40(fp)
    4530:	1880022e 	bgeu	r3,r2,453c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    4534:	e0bffe17 	ldw	r2,-8(fp)
    4538:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    453c:	e0bffc17 	ldw	r2,-16(fp)
    4540:	10c00e04 	addi	r3,r2,56
    4544:	e0bff817 	ldw	r2,-32(fp)
    4548:	1885883a 	add	r2,r3,r2
    454c:	e1bff617 	ldw	r6,-40(fp)
    4550:	100b883a 	mov	r5,r2
    4554:	e13ff517 	ldw	r4,-44(fp)
    4558:	00072200 	call	7220 <memcpy>
      ptr   += n;
    455c:	e0fff517 	ldw	r3,-44(fp)
    4560:	e0bff617 	ldw	r2,-40(fp)
    4564:	1885883a 	add	r2,r3,r2
    4568:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    456c:	e0fffe17 	ldw	r3,-8(fp)
    4570:	e0bff617 	ldw	r2,-40(fp)
    4574:	1885c83a 	sub	r2,r3,r2
    4578:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    457c:	e0fff817 	ldw	r3,-32(fp)
    4580:	e0bff617 	ldw	r2,-40(fp)
    4584:	1885883a 	add	r2,r3,r2
    4588:	10c1ffcc 	andi	r3,r2,2047
    458c:	e0bffc17 	ldw	r2,-16(fp)
    4590:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4594:	e0bffe17 	ldw	r2,-8(fp)
    4598:	00bfcf16 	blt	zero,r2,44d8 <__alt_mem_epcs_flash_controller_0+0xff8034d8>
    459c:	00000106 	br	45a4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    45a0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    45a4:	e0fff517 	ldw	r3,-44(fp)
    45a8:	e0bffd17 	ldw	r2,-12(fp)
    45ac:	1880141e 	bne	r3,r2,4600 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    45b0:	e0bfff17 	ldw	r2,-4(fp)
    45b4:	1090000c 	andi	r2,r2,16384
    45b8:	1000131e 	bne	r2,zero,4608 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    45bc:	0001883a 	nop
    45c0:	e0bffc17 	ldw	r2,-16(fp)
    45c4:	10c00a17 	ldw	r3,40(r2)
    45c8:	e0bff717 	ldw	r2,-36(fp)
    45cc:	1880051e 	bne	r3,r2,45e4 <altera_avalon_jtag_uart_read+0x138>
    45d0:	e0bffc17 	ldw	r2,-16(fp)
    45d4:	10c00917 	ldw	r3,36(r2)
    45d8:	e0bffc17 	ldw	r2,-16(fp)
    45dc:	10800117 	ldw	r2,4(r2)
    45e0:	18bff736 	bltu	r3,r2,45c0 <__alt_mem_epcs_flash_controller_0+0xff8035c0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    45e4:	e0bffc17 	ldw	r2,-16(fp)
    45e8:	10c00a17 	ldw	r3,40(r2)
    45ec:	e0bff717 	ldw	r2,-36(fp)
    45f0:	18800726 	beq	r3,r2,4610 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    45f4:	e0bffe17 	ldw	r2,-8(fp)
    45f8:	00bfb716 	blt	zero,r2,44d8 <__alt_mem_epcs_flash_controller_0+0xff8034d8>
    45fc:	00000506 	br	4614 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    4600:	0001883a 	nop
    4604:	00000306 	br	4614 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    4608:	0001883a 	nop
    460c:	00000106 	br	4614 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    4610:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    4614:	e0fff517 	ldw	r3,-44(fp)
    4618:	e0bffd17 	ldw	r2,-12(fp)
    461c:	18801826 	beq	r3,r2,4680 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4620:	0005303a 	rdctl	r2,status
    4624:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4628:	e0fffb17 	ldw	r3,-20(fp)
    462c:	00bfff84 	movi	r2,-2
    4630:	1884703a 	and	r2,r3,r2
    4634:	1001703a 	wrctl	status,r2
  
  return context;
    4638:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    463c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4640:	e0bffc17 	ldw	r2,-16(fp)
    4644:	10800817 	ldw	r2,32(r2)
    4648:	10c00054 	ori	r3,r2,1
    464c:	e0bffc17 	ldw	r2,-16(fp)
    4650:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4654:	e0bffc17 	ldw	r2,-16(fp)
    4658:	10800017 	ldw	r2,0(r2)
    465c:	10800104 	addi	r2,r2,4
    4660:	1007883a 	mov	r3,r2
    4664:	e0bffc17 	ldw	r2,-16(fp)
    4668:	10800817 	ldw	r2,32(r2)
    466c:	18800035 	stwio	r2,0(r3)
    4670:	e0bffa17 	ldw	r2,-24(fp)
    4674:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4678:	e0bff917 	ldw	r2,-28(fp)
    467c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    4680:	e0fff517 	ldw	r3,-44(fp)
    4684:	e0bffd17 	ldw	r2,-12(fp)
    4688:	18800426 	beq	r3,r2,469c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    468c:	e0fff517 	ldw	r3,-44(fp)
    4690:	e0bffd17 	ldw	r2,-12(fp)
    4694:	1885c83a 	sub	r2,r3,r2
    4698:	00000606 	br	46b4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    469c:	e0bfff17 	ldw	r2,-4(fp)
    46a0:	1090000c 	andi	r2,r2,16384
    46a4:	10000226 	beq	r2,zero,46b0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    46a8:	00bffd44 	movi	r2,-11
    46ac:	00000106 	br	46b4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    46b0:	00bffec4 	movi	r2,-5
}
    46b4:	e037883a 	mov	sp,fp
    46b8:	dfc00117 	ldw	ra,4(sp)
    46bc:	df000017 	ldw	fp,0(sp)
    46c0:	dec00204 	addi	sp,sp,8
    46c4:	f800283a 	ret

000046c8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    46c8:	defff304 	addi	sp,sp,-52
    46cc:	dfc00c15 	stw	ra,48(sp)
    46d0:	df000b15 	stw	fp,44(sp)
    46d4:	df000b04 	addi	fp,sp,44
    46d8:	e13ffc15 	stw	r4,-16(fp)
    46dc:	e17ffd15 	stw	r5,-12(fp)
    46e0:	e1bffe15 	stw	r6,-8(fp)
    46e4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    46e8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    46ec:	e0bffd17 	ldw	r2,-12(fp)
    46f0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    46f4:	00003706 	br	47d4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    46f8:	e0bffc17 	ldw	r2,-16(fp)
    46fc:	10800c17 	ldw	r2,48(r2)
    4700:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    4704:	e0bffc17 	ldw	r2,-16(fp)
    4708:	10800d17 	ldw	r2,52(r2)
    470c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    4710:	e0fff917 	ldw	r3,-28(fp)
    4714:	e0bff517 	ldw	r2,-44(fp)
    4718:	1880062e 	bgeu	r3,r2,4734 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    471c:	e0fff517 	ldw	r3,-44(fp)
    4720:	e0bff917 	ldw	r2,-28(fp)
    4724:	1885c83a 	sub	r2,r3,r2
    4728:	10bfffc4 	addi	r2,r2,-1
    472c:	e0bff615 	stw	r2,-40(fp)
    4730:	00000b06 	br	4760 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    4734:	e0bff517 	ldw	r2,-44(fp)
    4738:	10000526 	beq	r2,zero,4750 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    473c:	00c20004 	movi	r3,2048
    4740:	e0bff917 	ldw	r2,-28(fp)
    4744:	1885c83a 	sub	r2,r3,r2
    4748:	e0bff615 	stw	r2,-40(fp)
    474c:	00000406 	br	4760 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4750:	00c1ffc4 	movi	r3,2047
    4754:	e0bff917 	ldw	r2,-28(fp)
    4758:	1885c83a 	sub	r2,r3,r2
    475c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4760:	e0bff617 	ldw	r2,-40(fp)
    4764:	10001e26 	beq	r2,zero,47e0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    4768:	e0fffe17 	ldw	r3,-8(fp)
    476c:	e0bff617 	ldw	r2,-40(fp)
    4770:	1880022e 	bgeu	r3,r2,477c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    4774:	e0bffe17 	ldw	r2,-8(fp)
    4778:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    477c:	e0bffc17 	ldw	r2,-16(fp)
    4780:	10c20e04 	addi	r3,r2,2104
    4784:	e0bff917 	ldw	r2,-28(fp)
    4788:	1885883a 	add	r2,r3,r2
    478c:	e1bff617 	ldw	r6,-40(fp)
    4790:	e17ffd17 	ldw	r5,-12(fp)
    4794:	1009883a 	mov	r4,r2
    4798:	00072200 	call	7220 <memcpy>
      ptr   += n;
    479c:	e0fffd17 	ldw	r3,-12(fp)
    47a0:	e0bff617 	ldw	r2,-40(fp)
    47a4:	1885883a 	add	r2,r3,r2
    47a8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    47ac:	e0fffe17 	ldw	r3,-8(fp)
    47b0:	e0bff617 	ldw	r2,-40(fp)
    47b4:	1885c83a 	sub	r2,r3,r2
    47b8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    47bc:	e0fff917 	ldw	r3,-28(fp)
    47c0:	e0bff617 	ldw	r2,-40(fp)
    47c4:	1885883a 	add	r2,r3,r2
    47c8:	10c1ffcc 	andi	r3,r2,2047
    47cc:	e0bffc17 	ldw	r2,-16(fp)
    47d0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    47d4:	e0bffe17 	ldw	r2,-8(fp)
    47d8:	00bfc716 	blt	zero,r2,46f8 <__alt_mem_epcs_flash_controller_0+0xff8036f8>
    47dc:	00000106 	br	47e4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    47e0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    47e4:	0005303a 	rdctl	r2,status
    47e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    47ec:	e0fffb17 	ldw	r3,-20(fp)
    47f0:	00bfff84 	movi	r2,-2
    47f4:	1884703a 	and	r2,r3,r2
    47f8:	1001703a 	wrctl	status,r2
  
  return context;
    47fc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4800:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4804:	e0bffc17 	ldw	r2,-16(fp)
    4808:	10800817 	ldw	r2,32(r2)
    480c:	10c00094 	ori	r3,r2,2
    4810:	e0bffc17 	ldw	r2,-16(fp)
    4814:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4818:	e0bffc17 	ldw	r2,-16(fp)
    481c:	10800017 	ldw	r2,0(r2)
    4820:	10800104 	addi	r2,r2,4
    4824:	1007883a 	mov	r3,r2
    4828:	e0bffc17 	ldw	r2,-16(fp)
    482c:	10800817 	ldw	r2,32(r2)
    4830:	18800035 	stwio	r2,0(r3)
    4834:	e0bffa17 	ldw	r2,-24(fp)
    4838:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    483c:	e0bff817 	ldw	r2,-32(fp)
    4840:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4844:	e0bffe17 	ldw	r2,-8(fp)
    4848:	0080100e 	bge	zero,r2,488c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    484c:	e0bfff17 	ldw	r2,-4(fp)
    4850:	1090000c 	andi	r2,r2,16384
    4854:	1000101e 	bne	r2,zero,4898 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4858:	0001883a 	nop
    485c:	e0bffc17 	ldw	r2,-16(fp)
    4860:	10c00d17 	ldw	r3,52(r2)
    4864:	e0bff517 	ldw	r2,-44(fp)
    4868:	1880051e 	bne	r3,r2,4880 <altera_avalon_jtag_uart_write+0x1b8>
    486c:	e0bffc17 	ldw	r2,-16(fp)
    4870:	10c00917 	ldw	r3,36(r2)
    4874:	e0bffc17 	ldw	r2,-16(fp)
    4878:	10800117 	ldw	r2,4(r2)
    487c:	18bff736 	bltu	r3,r2,485c <__alt_mem_epcs_flash_controller_0+0xff80385c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    4880:	e0bffc17 	ldw	r2,-16(fp)
    4884:	10800917 	ldw	r2,36(r2)
    4888:	1000051e 	bne	r2,zero,48a0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    488c:	e0bffe17 	ldw	r2,-8(fp)
    4890:	00bfd016 	blt	zero,r2,47d4 <__alt_mem_epcs_flash_controller_0+0xff8037d4>
    4894:	00000306 	br	48a4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    4898:	0001883a 	nop
    489c:	00000106 	br	48a4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    48a0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    48a4:	e0fffd17 	ldw	r3,-12(fp)
    48a8:	e0bff717 	ldw	r2,-36(fp)
    48ac:	18800426 	beq	r3,r2,48c0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    48b0:	e0fffd17 	ldw	r3,-12(fp)
    48b4:	e0bff717 	ldw	r2,-36(fp)
    48b8:	1885c83a 	sub	r2,r3,r2
    48bc:	00000606 	br	48d8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    48c0:	e0bfff17 	ldw	r2,-4(fp)
    48c4:	1090000c 	andi	r2,r2,16384
    48c8:	10000226 	beq	r2,zero,48d4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    48cc:	00bffd44 	movi	r2,-11
    48d0:	00000106 	br	48d8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    48d4:	00bffec4 	movi	r2,-5
}
    48d8:	e037883a 	mov	sp,fp
    48dc:	dfc00117 	ldw	ra,4(sp)
    48e0:	df000017 	ldw	fp,0(sp)
    48e4:	dec00204 	addi	sp,sp,8
    48e8:	f800283a 	ret

000048ec <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    48ec:	defff904 	addi	sp,sp,-28
    48f0:	dfc00615 	stw	ra,24(sp)
    48f4:	df000515 	stw	fp,20(sp)
    48f8:	df000504 	addi	fp,sp,20
    48fc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    4900:	00800144 	movi	r2,5
    4904:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    4908:	d8000215 	stw	zero,8(sp)
    490c:	e0bffe44 	addi	r2,fp,-7
    4910:	d8800115 	stw	r2,4(sp)
    4914:	00800044 	movi	r2,1
    4918:	d8800015 	stw	r2,0(sp)
    491c:	e1fffe04 	addi	r7,fp,-8
    4920:	01800044 	movi	r6,1
    4924:	000b883a 	mov	r5,zero
    4928:	e13fff17 	ldw	r4,-4(fp)
    492c:	0005d000 	call	5d00 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    4930:	e0bffe43 	ldbu	r2,-7(fp)
}
    4934:	e037883a 	mov	sp,fp
    4938:	dfc00117 	ldw	ra,4(sp)
    493c:	df000017 	ldw	fp,0(sp)
    4940:	dec00204 	addi	sp,sp,8
    4944:	f800283a 	ret

00004948 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    4948:	defffd04 	addi	sp,sp,-12
    494c:	dfc00215 	stw	ra,8(sp)
    4950:	df000115 	stw	fp,4(sp)
    4954:	df000104 	addi	fp,sp,4
    4958:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    495c:	e13fff17 	ldw	r4,-4(fp)
    4960:	00048ec0 	call	48ec <epcs_read_status_register>
    4964:	10803fcc 	andi	r2,r2,255
    4968:	1080004c 	andi	r2,r2,1
}
    496c:	e037883a 	mov	sp,fp
    4970:	dfc00117 	ldw	ra,4(sp)
    4974:	df000017 	ldw	fp,0(sp)
    4978:	dec00204 	addi	sp,sp,8
    497c:	f800283a 	ret

00004980 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    4980:	defffd04 	addi	sp,sp,-12
    4984:	dfc00215 	stw	ra,8(sp)
    4988:	df000115 	stw	fp,4(sp)
    498c:	df000104 	addi	fp,sp,4
    4990:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    4994:	0001883a 	nop
    4998:	e13fff17 	ldw	r4,-4(fp)
    499c:	00049480 	call	4948 <epcs_test_wip>
    49a0:	103ffd1e 	bne	r2,zero,4998 <__alt_mem_epcs_flash_controller_0+0xff803998>
  {
  }
}
    49a4:	0001883a 	nop
    49a8:	e037883a 	mov	sp,fp
    49ac:	dfc00117 	ldw	ra,4(sp)
    49b0:	df000017 	ldw	fp,0(sp)
    49b4:	dec00204 	addi	sp,sp,8
    49b8:	f800283a 	ret

000049bc <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    49bc:	defff604 	addi	sp,sp,-40
    49c0:	dfc00915 	stw	ra,36(sp)
    49c4:	df000815 	stw	fp,32(sp)
    49c8:	df000804 	addi	fp,sp,32
    49cc:	e13ffd15 	stw	r4,-12(fp)
    49d0:	e17ffe15 	stw	r5,-8(fp)
    49d4:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    49d8:	e0bfff17 	ldw	r2,-4(fp)
    49dc:	10001226 	beq	r2,zero,4a28 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    49e0:	00bff604 	movi	r2,-40
    49e4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    49e8:	e0bffe17 	ldw	r2,-8(fp)
    49ec:	1004d63a 	srli	r2,r2,24
    49f0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    49f4:	e0bffe17 	ldw	r2,-8(fp)
    49f8:	1004d43a 	srli	r2,r2,16
    49fc:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    4a00:	e0bffe17 	ldw	r2,-8(fp)
    4a04:	1004d23a 	srli	r2,r2,8
    4a08:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    4a0c:	e0bffe17 	ldw	r2,-8(fp)
    4a10:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    4a14:	00800144 	movi	r2,5
    4a18:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    4a1c:	e13ffd17 	ldw	r4,-12(fp)
    4a20:	0004e700 	call	4e70 <epcs_enter_4_bytes_mode>
    4a24:	00000c06 	br	4a58 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
    4a28:	00bff604 	movi	r2,-40
    4a2c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    4a30:	e0bffe17 	ldw	r2,-8(fp)
    4a34:	1004d43a 	srli	r2,r2,16
    4a38:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    4a3c:	e0bffe17 	ldw	r2,-8(fp)
    4a40:	1004d23a 	srli	r2,r2,8
    4a44:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    4a48:	e0bffe17 	ldw	r2,-8(fp)
    4a4c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    4a50:	00800104 	movi	r2,4
    4a54:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    4a58:	e13ffd17 	ldw	r4,-12(fp)
    4a5c:	0004bac0 	call	4bac <epcs_write_enable>

  alt_avalon_spi_command(
    4a60:	e0bffb03 	ldbu	r2,-20(fp)
    4a64:	e0fffb44 	addi	r3,fp,-19
    4a68:	d8000215 	stw	zero,8(sp)
    4a6c:	d8000115 	stw	zero,4(sp)
    4a70:	d8000015 	stw	zero,0(sp)
    4a74:	180f883a 	mov	r7,r3
    4a78:	100d883a 	mov	r6,r2
    4a7c:	000b883a 	mov	r5,zero
    4a80:	e13ffd17 	ldw	r4,-12(fp)
    4a84:	0005d000 	call	5d00 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    4a88:	e13ffd17 	ldw	r4,-12(fp)
    4a8c:	00049800 	call	4980 <epcs_await_wip_released>

  if(four_bytes_mode)
    4a90:	e0bfff17 	ldw	r2,-4(fp)
    4a94:	10000226 	beq	r2,zero,4aa0 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    4a98:	e13ffd17 	ldw	r4,-12(fp)
    4a9c:	0004ecc0 	call	4ecc <epcs_exit_4_bytes_mode>
  }
}
    4aa0:	0001883a 	nop
    4aa4:	e037883a 	mov	sp,fp
    4aa8:	dfc00117 	ldw	ra,4(sp)
    4aac:	df000017 	ldw	fp,0(sp)
    4ab0:	dec00204 	addi	sp,sp,8
    4ab4:	f800283a 	ret

00004ab8 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    4ab8:	defff404 	addi	sp,sp,-48
    4abc:	dfc00b15 	stw	ra,44(sp)
    4ac0:	df000a15 	stw	fp,40(sp)
    4ac4:	df000a04 	addi	fp,sp,40
    4ac8:	e13ffc15 	stw	r4,-16(fp)
    4acc:	e17ffd15 	stw	r5,-12(fp)
    4ad0:	e1bffe15 	stw	r6,-8(fp)
    4ad4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    4ad8:	008000c4 	movi	r2,3
    4adc:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    4ae0:	e0800217 	ldw	r2,8(fp)
    4ae4:	10001026 	beq	r2,zero,4b28 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    4ae8:	e0bffd17 	ldw	r2,-12(fp)
    4aec:	1004d63a 	srli	r2,r2,24
    4af0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    4af4:	e0bffd17 	ldw	r2,-12(fp)
    4af8:	1005d43a 	srai	r2,r2,16
    4afc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    4b00:	e0bffd17 	ldw	r2,-12(fp)
    4b04:	1005d23a 	srai	r2,r2,8
    4b08:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    4b0c:	e0bffd17 	ldw	r2,-12(fp)
    4b10:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    4b14:	00800144 	movi	r2,5
    4b18:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    4b1c:	e13ffc17 	ldw	r4,-16(fp)
    4b20:	0004e700 	call	4e70 <epcs_enter_4_bytes_mode>
    4b24:	00000a06 	br	4b50 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    4b28:	e0bffd17 	ldw	r2,-12(fp)
    4b2c:	1005d43a 	srai	r2,r2,16
    4b30:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    4b34:	e0bffd17 	ldw	r2,-12(fp)
    4b38:	1005d23a 	srai	r2,r2,8
    4b3c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    4b40:	e0bffd17 	ldw	r2,-12(fp)
    4b44:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    4b48:	00800104 	movi	r2,4
    4b4c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    4b50:	e13ffc17 	ldw	r4,-16(fp)
    4b54:	00049800 	call	4980 <epcs_await_wip_released>

  alt_avalon_spi_command(
    4b58:	e0bfff17 	ldw	r2,-4(fp)
    4b5c:	e13ffa04 	addi	r4,fp,-24
    4b60:	d8000215 	stw	zero,8(sp)
    4b64:	e0fffe17 	ldw	r3,-8(fp)
    4b68:	d8c00115 	stw	r3,4(sp)
    4b6c:	d8800015 	stw	r2,0(sp)
    4b70:	200f883a 	mov	r7,r4
    4b74:	e1bff917 	ldw	r6,-28(fp)
    4b78:	000b883a 	mov	r5,zero
    4b7c:	e13ffc17 	ldw	r4,-16(fp)
    4b80:	0005d000 	call	5d00 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    4b84:	e0800217 	ldw	r2,8(fp)
    4b88:	10000226 	beq	r2,zero,4b94 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
    4b8c:	e13ffc17 	ldw	r4,-16(fp)
    4b90:	0004ecc0 	call	4ecc <epcs_exit_4_bytes_mode>
  }

  return length;
    4b94:	e0bfff17 	ldw	r2,-4(fp)
}
    4b98:	e037883a 	mov	sp,fp
    4b9c:	dfc00117 	ldw	ra,4(sp)
    4ba0:	df000017 	ldw	fp,0(sp)
    4ba4:	dec00204 	addi	sp,sp,8
    4ba8:	f800283a 	ret

00004bac <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    4bac:	defff904 	addi	sp,sp,-28
    4bb0:	dfc00615 	stw	ra,24(sp)
    4bb4:	df000515 	stw	fp,20(sp)
    4bb8:	df000504 	addi	fp,sp,20
    4bbc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    4bc0:	00800184 	movi	r2,6
    4bc4:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    4bc8:	d8000215 	stw	zero,8(sp)
    4bcc:	d8000115 	stw	zero,4(sp)
    4bd0:	d8000015 	stw	zero,0(sp)
    4bd4:	e1fffe04 	addi	r7,fp,-8
    4bd8:	01800044 	movi	r6,1
    4bdc:	000b883a 	mov	r5,zero
    4be0:	e13fff17 	ldw	r4,-4(fp)
    4be4:	0005d000 	call	5d00 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    4be8:	0001883a 	nop
    4bec:	e037883a 	mov	sp,fp
    4bf0:	dfc00117 	ldw	ra,4(sp)
    4bf4:	df000017 	ldw	fp,0(sp)
    4bf8:	dec00204 	addi	sp,sp,8
    4bfc:	f800283a 	ret

00004c00 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    4c00:	defff804 	addi	sp,sp,-32
    4c04:	dfc00715 	stw	ra,28(sp)
    4c08:	df000615 	stw	fp,24(sp)
    4c0c:	df000604 	addi	fp,sp,24
    4c10:	e13ffe15 	stw	r4,-8(fp)
    4c14:	2805883a 	mov	r2,r5
    4c18:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    4c1c:	00800044 	movi	r2,1
    4c20:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    4c24:	e0bfff03 	ldbu	r2,-4(fp)
    4c28:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    4c2c:	d8000215 	stw	zero,8(sp)
    4c30:	d8000115 	stw	zero,4(sp)
    4c34:	d8000015 	stw	zero,0(sp)
    4c38:	e1fffd04 	addi	r7,fp,-12
    4c3c:	01800084 	movi	r6,2
    4c40:	000b883a 	mov	r5,zero
    4c44:	e13ffe17 	ldw	r4,-8(fp)
    4c48:	0005d000 	call	5d00 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    4c4c:	e13ffe17 	ldw	r4,-8(fp)
    4c50:	00049800 	call	4980 <epcs_await_wip_released>
}
    4c54:	0001883a 	nop
    4c58:	e037883a 	mov	sp,fp
    4c5c:	dfc00117 	ldw	ra,4(sp)
    4c60:	df000017 	ldw	fp,0(sp)
    4c64:	dec00204 	addi	sp,sp,8
    4c68:	f800283a 	ret

00004c6c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    4c6c:	defff404 	addi	sp,sp,-48
    4c70:	dfc00b15 	stw	ra,44(sp)
    4c74:	df000a15 	stw	fp,40(sp)
    4c78:	df000a04 	addi	fp,sp,40
    4c7c:	e13ffc15 	stw	r4,-16(fp)
    4c80:	e17ffd15 	stw	r5,-12(fp)
    4c84:	e1bffe15 	stw	r6,-8(fp)
    4c88:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    4c8c:	00800084 	movi	r2,2
    4c90:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    4c94:	e0800217 	ldw	r2,8(fp)
    4c98:	10001026 	beq	r2,zero,4cdc <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
    4c9c:	e0bffd17 	ldw	r2,-12(fp)
    4ca0:	1004d63a 	srli	r2,r2,24
    4ca4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    4ca8:	e0bffd17 	ldw	r2,-12(fp)
    4cac:	1005d43a 	srai	r2,r2,16
    4cb0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    4cb4:	e0bffd17 	ldw	r2,-12(fp)
    4cb8:	1005d23a 	srai	r2,r2,8
    4cbc:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    4cc0:	e0bffd17 	ldw	r2,-12(fp)
    4cc4:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    4cc8:	00800144 	movi	r2,5
    4ccc:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    4cd0:	e13ffc17 	ldw	r4,-16(fp)
    4cd4:	0004e700 	call	4e70 <epcs_enter_4_bytes_mode>
    4cd8:	00000a06 	br	4d04 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    4cdc:	e0bffd17 	ldw	r2,-12(fp)
    4ce0:	1005d43a 	srai	r2,r2,16
    4ce4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    4ce8:	e0bffd17 	ldw	r2,-12(fp)
    4cec:	1005d23a 	srai	r2,r2,8
    4cf0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    4cf4:	e0bffd17 	ldw	r2,-12(fp)
    4cf8:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    4cfc:	00800104 	movi	r2,4
    4d00:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    4d04:	e13ffc17 	ldw	r4,-16(fp)
    4d08:	0004bac0 	call	4bac <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    4d0c:	e0fffa04 	addi	r3,fp,-24
    4d10:	00800044 	movi	r2,1
    4d14:	d8800215 	stw	r2,8(sp)
    4d18:	d8000115 	stw	zero,4(sp)
    4d1c:	d8000015 	stw	zero,0(sp)
    4d20:	180f883a 	mov	r7,r3
    4d24:	e1bff917 	ldw	r6,-28(fp)
    4d28:	000b883a 	mov	r5,zero
    4d2c:	e13ffc17 	ldw	r4,-16(fp)
    4d30:	0005d000 	call	5d00 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    4d34:	e0bfff17 	ldw	r2,-4(fp)
    4d38:	d8000215 	stw	zero,8(sp)
    4d3c:	d8000115 	stw	zero,4(sp)
    4d40:	d8000015 	stw	zero,0(sp)
    4d44:	e1fffe17 	ldw	r7,-8(fp)
    4d48:	100d883a 	mov	r6,r2
    4d4c:	000b883a 	mov	r5,zero
    4d50:	e13ffc17 	ldw	r4,-16(fp)
    4d54:	0005d000 	call	5d00 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    4d58:	e13ffc17 	ldw	r4,-16(fp)
    4d5c:	00049800 	call	4980 <epcs_await_wip_released>

  if(four_bytes_mode)
    4d60:	e0800217 	ldw	r2,8(fp)
    4d64:	10000226 	beq	r2,zero,4d70 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
    4d68:	e13ffc17 	ldw	r4,-16(fp)
    4d6c:	0004ecc0 	call	4ecc <epcs_exit_4_bytes_mode>
  }

  return length;
    4d70:	e0bfff17 	ldw	r2,-4(fp)
}
    4d74:	e037883a 	mov	sp,fp
    4d78:	dfc00117 	ldw	ra,4(sp)
    4d7c:	df000017 	ldw	fp,0(sp)
    4d80:	dec00204 	addi	sp,sp,8
    4d84:	f800283a 	ret

00004d88 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    4d88:	defff804 	addi	sp,sp,-32
    4d8c:	dfc00715 	stw	ra,28(sp)
    4d90:	df000615 	stw	fp,24(sp)
    4d94:	df000604 	addi	fp,sp,24
    4d98:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    4d9c:	00bfeac4 	movi	r2,-85
    4da0:	e0bffd05 	stb	r2,-12(fp)
    4da4:	e03ffd45 	stb	zero,-11(fp)
    4da8:	e03ffd85 	stb	zero,-10(fp)
    4dac:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    4db0:	d8000215 	stw	zero,8(sp)
    4db4:	e0bffe04 	addi	r2,fp,-8
    4db8:	d8800115 	stw	r2,4(sp)
    4dbc:	00800044 	movi	r2,1
    4dc0:	d8800015 	stw	r2,0(sp)
    4dc4:	e1fffd04 	addi	r7,fp,-12
    4dc8:	01800104 	movi	r6,4
    4dcc:	000b883a 	mov	r5,zero
    4dd0:	e13fff17 	ldw	r4,-4(fp)
    4dd4:	0005d000 	call	5d00 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    4dd8:	e0bffe03 	ldbu	r2,-8(fp)
}
    4ddc:	e037883a 	mov	sp,fp
    4de0:	dfc00117 	ldw	ra,4(sp)
    4de4:	df000017 	ldw	fp,0(sp)
    4de8:	dec00204 	addi	sp,sp,8
    4dec:	f800283a 	ret

00004df0 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    4df0:	defff904 	addi	sp,sp,-28
    4df4:	dfc00615 	stw	ra,24(sp)
    4df8:	df000515 	stw	fp,20(sp)
    4dfc:	df000504 	addi	fp,sp,20
    4e00:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    4e04:	00bfe7c4 	movi	r2,-97
    4e08:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    4e0c:	d8000215 	stw	zero,8(sp)
    4e10:	e0bffe44 	addi	r2,fp,-7
    4e14:	d8800115 	stw	r2,4(sp)
    4e18:	008000c4 	movi	r2,3
    4e1c:	d8800015 	stw	r2,0(sp)
    4e20:	e1fffe04 	addi	r7,fp,-8
    4e24:	01800044 	movi	r6,1
    4e28:	000b883a 	mov	r5,zero
    4e2c:	e13fff17 	ldw	r4,-4(fp)
    4e30:	0005d000 	call	5d00 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    4e34:	e0bffe43 	ldbu	r2,-7(fp)
    4e38:	10803fcc 	andi	r2,r2,255
    4e3c:	1006943a 	slli	r3,r2,16
    4e40:	e0bffe83 	ldbu	r2,-6(fp)
    4e44:	10803fcc 	andi	r2,r2,255
    4e48:	1004923a 	slli	r2,r2,8
    4e4c:	1886b03a 	or	r3,r3,r2
    4e50:	e0bffec3 	ldbu	r2,-5(fp)
    4e54:	10803fcc 	andi	r2,r2,255
    4e58:	1884b03a 	or	r2,r3,r2
}
    4e5c:	e037883a 	mov	sp,fp
    4e60:	dfc00117 	ldw	ra,4(sp)
    4e64:	df000017 	ldw	fp,0(sp)
    4e68:	dec00204 	addi	sp,sp,8
    4e6c:	f800283a 	ret

00004e70 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    4e70:	defff904 	addi	sp,sp,-28
    4e74:	dfc00615 	stw	ra,24(sp)
    4e78:	df000515 	stw	fp,20(sp)
    4e7c:	df000504 	addi	fp,sp,20
    4e80:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    4e84:	00bfedc4 	movi	r2,-73
    4e88:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    4e8c:	e13fff17 	ldw	r4,-4(fp)
    4e90:	0004bac0 	call	4bac <epcs_write_enable>

  alt_avalon_spi_command(
    4e94:	d8000215 	stw	zero,8(sp)
    4e98:	d8000115 	stw	zero,4(sp)
    4e9c:	d8000015 	stw	zero,0(sp)
    4ea0:	e1fffe04 	addi	r7,fp,-8
    4ea4:	01800044 	movi	r6,1
    4ea8:	000b883a 	mov	r5,zero
    4eac:	e13fff17 	ldw	r4,-4(fp)
    4eb0:	0005d000 	call	5d00 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    4eb4:	0001883a 	nop
}
    4eb8:	e037883a 	mov	sp,fp
    4ebc:	dfc00117 	ldw	ra,4(sp)
    4ec0:	df000017 	ldw	fp,0(sp)
    4ec4:	dec00204 	addi	sp,sp,8
    4ec8:	f800283a 	ret

00004ecc <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    4ecc:	defff904 	addi	sp,sp,-28
    4ed0:	dfc00615 	stw	ra,24(sp)
    4ed4:	df000515 	stw	fp,20(sp)
    4ed8:	df000504 	addi	fp,sp,20
    4edc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    4ee0:	00bffa44 	movi	r2,-23
    4ee4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    4ee8:	e13fff17 	ldw	r4,-4(fp)
    4eec:	0004bac0 	call	4bac <epcs_write_enable>

  alt_avalon_spi_command(
    4ef0:	d8000215 	stw	zero,8(sp)
    4ef4:	d8000115 	stw	zero,4(sp)
    4ef8:	d8000015 	stw	zero,0(sp)
    4efc:	e1fffe04 	addi	r7,fp,-8
    4f00:	01800044 	movi	r6,1
    4f04:	000b883a 	mov	r5,zero
    4f08:	e13fff17 	ldw	r4,-4(fp)
    4f0c:	0005d000 	call	5d00 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
    4f10:	0001883a 	nop
}
    4f14:	e037883a 	mov	sp,fp
    4f18:	dfc00117 	ldw	ra,4(sp)
    4f1c:	df000017 	ldw	fp,0(sp)
    4f20:	dec00204 	addi	sp,sp,8
    4f24:	f800283a 	ret

00004f28 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    4f28:	defff504 	addi	sp,sp,-44
    4f2c:	df000a15 	stw	fp,40(sp)
    4f30:	df000a04 	addi	fp,sp,40
    4f34:	e13ffc15 	stw	r4,-16(fp)
    4f38:	e17ffd15 	stw	r5,-12(fp)
    4f3c:	e1bffe15 	stw	r6,-8(fp)
    4f40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    4f44:	e03ff615 	stw	zero,-40(fp)
    4f48:	d0a6ec17 	ldw	r2,-25680(gp)
  
  if (alt_ticks_per_second ())
    4f4c:	10003c26 	beq	r2,zero,5040 <alt_alarm_start+0x118>
  {
    if (alarm)
    4f50:	e0bffc17 	ldw	r2,-16(fp)
    4f54:	10003826 	beq	r2,zero,5038 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    4f58:	e0bffc17 	ldw	r2,-16(fp)
    4f5c:	e0fffe17 	ldw	r3,-8(fp)
    4f60:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    4f64:	e0bffc17 	ldw	r2,-16(fp)
    4f68:	e0ffff17 	ldw	r3,-4(fp)
    4f6c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4f70:	0005303a 	rdctl	r2,status
    4f74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4f78:	e0fff917 	ldw	r3,-28(fp)
    4f7c:	00bfff84 	movi	r2,-2
    4f80:	1884703a 	and	r2,r3,r2
    4f84:	1001703a 	wrctl	status,r2
  
  return context;
    4f88:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    4f8c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    4f90:	d0a6ed17 	ldw	r2,-25676(gp)
      
      current_nticks = alt_nticks();
    4f94:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    4f98:	e0fffd17 	ldw	r3,-12(fp)
    4f9c:	e0bff617 	ldw	r2,-40(fp)
    4fa0:	1885883a 	add	r2,r3,r2
    4fa4:	10c00044 	addi	r3,r2,1
    4fa8:	e0bffc17 	ldw	r2,-16(fp)
    4fac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    4fb0:	e0bffc17 	ldw	r2,-16(fp)
    4fb4:	10c00217 	ldw	r3,8(r2)
    4fb8:	e0bff617 	ldw	r2,-40(fp)
    4fbc:	1880042e 	bgeu	r3,r2,4fd0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    4fc0:	e0bffc17 	ldw	r2,-16(fp)
    4fc4:	00c00044 	movi	r3,1
    4fc8:	10c00405 	stb	r3,16(r2)
    4fcc:	00000206 	br	4fd8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    4fd0:	e0bffc17 	ldw	r2,-16(fp)
    4fd4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    4fd8:	e0bffc17 	ldw	r2,-16(fp)
    4fdc:	d0e00904 	addi	r3,gp,-32732
    4fe0:	e0fffa15 	stw	r3,-24(fp)
    4fe4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4fe8:	e0bffb17 	ldw	r2,-20(fp)
    4fec:	e0fffa17 	ldw	r3,-24(fp)
    4ff0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    4ff4:	e0bffa17 	ldw	r2,-24(fp)
    4ff8:	10c00017 	ldw	r3,0(r2)
    4ffc:	e0bffb17 	ldw	r2,-20(fp)
    5000:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5004:	e0bffa17 	ldw	r2,-24(fp)
    5008:	10800017 	ldw	r2,0(r2)
    500c:	e0fffb17 	ldw	r3,-20(fp)
    5010:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    5014:	e0bffa17 	ldw	r2,-24(fp)
    5018:	e0fffb17 	ldw	r3,-20(fp)
    501c:	10c00015 	stw	r3,0(r2)
    5020:	e0bff817 	ldw	r2,-32(fp)
    5024:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5028:	e0bff717 	ldw	r2,-36(fp)
    502c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    5030:	0005883a 	mov	r2,zero
    5034:	00000306 	br	5044 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    5038:	00bffa84 	movi	r2,-22
    503c:	00000106 	br	5044 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    5040:	00bfde84 	movi	r2,-134
  }
}
    5044:	e037883a 	mov	sp,fp
    5048:	df000017 	ldw	fp,0(sp)
    504c:	dec00104 	addi	sp,sp,4
    5050:	f800283a 	ret

00005054 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5054:	defffe04 	addi	sp,sp,-8
    5058:	dfc00115 	stw	ra,4(sp)
    505c:	df000015 	stw	fp,0(sp)
    5060:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5064:	d0a00517 	ldw	r2,-32748(gp)
    5068:	10000326 	beq	r2,zero,5078 <alt_get_errno+0x24>
    506c:	d0a00517 	ldw	r2,-32748(gp)
    5070:	103ee83a 	callr	r2
    5074:	00000106 	br	507c <alt_get_errno+0x28>
    5078:	d0a6ef04 	addi	r2,gp,-25668
}
    507c:	e037883a 	mov	sp,fp
    5080:	dfc00117 	ldw	ra,4(sp)
    5084:	df000017 	ldw	fp,0(sp)
    5088:	dec00204 	addi	sp,sp,8
    508c:	f800283a 	ret

00005090 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5090:	defffb04 	addi	sp,sp,-20
    5094:	dfc00415 	stw	ra,16(sp)
    5098:	df000315 	stw	fp,12(sp)
    509c:	df000304 	addi	fp,sp,12
    50a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    50a4:	e0bfff17 	ldw	r2,-4(fp)
    50a8:	10000816 	blt	r2,zero,50cc <close+0x3c>
    50ac:	01400304 	movi	r5,12
    50b0:	e13fff17 	ldw	r4,-4(fp)
    50b4:	00030c80 	call	30c8 <__mulsi3>
    50b8:	1007883a 	mov	r3,r2
    50bc:	00800074 	movhi	r2,1
    50c0:	10abc604 	addi	r2,r2,-20712
    50c4:	1885883a 	add	r2,r3,r2
    50c8:	00000106 	br	50d0 <close+0x40>
    50cc:	0005883a 	mov	r2,zero
    50d0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    50d4:	e0bffd17 	ldw	r2,-12(fp)
    50d8:	10001926 	beq	r2,zero,5140 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    50dc:	e0bffd17 	ldw	r2,-12(fp)
    50e0:	10800017 	ldw	r2,0(r2)
    50e4:	10800417 	ldw	r2,16(r2)
    50e8:	10000626 	beq	r2,zero,5104 <close+0x74>
    50ec:	e0bffd17 	ldw	r2,-12(fp)
    50f0:	10800017 	ldw	r2,0(r2)
    50f4:	10800417 	ldw	r2,16(r2)
    50f8:	e13ffd17 	ldw	r4,-12(fp)
    50fc:	103ee83a 	callr	r2
    5100:	00000106 	br	5108 <close+0x78>
    5104:	0005883a 	mov	r2,zero
    5108:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    510c:	e13fff17 	ldw	r4,-4(fp)
    5110:	0005ab40 	call	5ab4 <alt_release_fd>
    if (rval < 0)
    5114:	e0bffe17 	ldw	r2,-8(fp)
    5118:	1000070e 	bge	r2,zero,5138 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    511c:	00050540 	call	5054 <alt_get_errno>
    5120:	1007883a 	mov	r3,r2
    5124:	e0bffe17 	ldw	r2,-8(fp)
    5128:	0085c83a 	sub	r2,zero,r2
    512c:	18800015 	stw	r2,0(r3)
      return -1;
    5130:	00bfffc4 	movi	r2,-1
    5134:	00000706 	br	5154 <close+0xc4>
    }
    return 0;
    5138:	0005883a 	mov	r2,zero
    513c:	00000506 	br	5154 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5140:	00050540 	call	5054 <alt_get_errno>
    5144:	1007883a 	mov	r3,r2
    5148:	00801444 	movi	r2,81
    514c:	18800015 	stw	r2,0(r3)
    return -1;
    5150:	00bfffc4 	movi	r2,-1
  }
}
    5154:	e037883a 	mov	sp,fp
    5158:	dfc00117 	ldw	ra,4(sp)
    515c:	df000017 	ldw	fp,0(sp)
    5160:	dec00204 	addi	sp,sp,8
    5164:	f800283a 	ret

00005168 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5168:	deffff04 	addi	sp,sp,-4
    516c:	df000015 	stw	fp,0(sp)
    5170:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    5174:	0001883a 	nop
    5178:	e037883a 	mov	sp,fp
    517c:	df000017 	ldw	fp,0(sp)
    5180:	dec00104 	addi	sp,sp,4
    5184:	f800283a 	ret

00005188 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    5188:	defffc04 	addi	sp,sp,-16
    518c:	df000315 	stw	fp,12(sp)
    5190:	df000304 	addi	fp,sp,12
    5194:	e13ffd15 	stw	r4,-12(fp)
    5198:	e17ffe15 	stw	r5,-8(fp)
    519c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    51a0:	e0bfff17 	ldw	r2,-4(fp)
}
    51a4:	e037883a 	mov	sp,fp
    51a8:	df000017 	ldw	fp,0(sp)
    51ac:	dec00104 	addi	sp,sp,4
    51b0:	f800283a 	ret

000051b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    51b4:	defffe04 	addi	sp,sp,-8
    51b8:	dfc00115 	stw	ra,4(sp)
    51bc:	df000015 	stw	fp,0(sp)
    51c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    51c4:	d0a00517 	ldw	r2,-32748(gp)
    51c8:	10000326 	beq	r2,zero,51d8 <alt_get_errno+0x24>
    51cc:	d0a00517 	ldw	r2,-32748(gp)
    51d0:	103ee83a 	callr	r2
    51d4:	00000106 	br	51dc <alt_get_errno+0x28>
    51d8:	d0a6ef04 	addi	r2,gp,-25668
}
    51dc:	e037883a 	mov	sp,fp
    51e0:	dfc00117 	ldw	ra,4(sp)
    51e4:	df000017 	ldw	fp,0(sp)
    51e8:	dec00204 	addi	sp,sp,8
    51ec:	f800283a 	ret

000051f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    51f0:	defffa04 	addi	sp,sp,-24
    51f4:	dfc00515 	stw	ra,20(sp)
    51f8:	df000415 	stw	fp,16(sp)
    51fc:	df000404 	addi	fp,sp,16
    5200:	e13ffe15 	stw	r4,-8(fp)
    5204:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5208:	e0bffe17 	ldw	r2,-8(fp)
    520c:	10000326 	beq	r2,zero,521c <alt_dev_llist_insert+0x2c>
    5210:	e0bffe17 	ldw	r2,-8(fp)
    5214:	10800217 	ldw	r2,8(r2)
    5218:	1000061e 	bne	r2,zero,5234 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    521c:	00051b40 	call	51b4 <alt_get_errno>
    5220:	1007883a 	mov	r3,r2
    5224:	00800584 	movi	r2,22
    5228:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    522c:	00bffa84 	movi	r2,-22
    5230:	00001306 	br	5280 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5234:	e0bffe17 	ldw	r2,-8(fp)
    5238:	e0ffff17 	ldw	r3,-4(fp)
    523c:	e0fffc15 	stw	r3,-16(fp)
    5240:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5244:	e0bffd17 	ldw	r2,-12(fp)
    5248:	e0fffc17 	ldw	r3,-16(fp)
    524c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    5250:	e0bffc17 	ldw	r2,-16(fp)
    5254:	10c00017 	ldw	r3,0(r2)
    5258:	e0bffd17 	ldw	r2,-12(fp)
    525c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5260:	e0bffc17 	ldw	r2,-16(fp)
    5264:	10800017 	ldw	r2,0(r2)
    5268:	e0fffd17 	ldw	r3,-12(fp)
    526c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    5270:	e0bffc17 	ldw	r2,-16(fp)
    5274:	e0fffd17 	ldw	r3,-12(fp)
    5278:	10c00015 	stw	r3,0(r2)

  return 0;  
    527c:	0005883a 	mov	r2,zero
}
    5280:	e037883a 	mov	sp,fp
    5284:	dfc00117 	ldw	ra,4(sp)
    5288:	df000017 	ldw	fp,0(sp)
    528c:	dec00204 	addi	sp,sp,8
    5290:	f800283a 	ret

00005294 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    5294:	defffd04 	addi	sp,sp,-12
    5298:	dfc00215 	stw	ra,8(sp)
    529c:	df000115 	stw	fp,4(sp)
    52a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    52a4:	00800074 	movhi	r2,1
    52a8:	10a6db04 	addi	r2,r2,-25748
    52ac:	e0bfff15 	stw	r2,-4(fp)
    52b0:	00000606 	br	52cc <_do_ctors+0x38>
        (*ctor) (); 
    52b4:	e0bfff17 	ldw	r2,-4(fp)
    52b8:	10800017 	ldw	r2,0(r2)
    52bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    52c0:	e0bfff17 	ldw	r2,-4(fp)
    52c4:	10bfff04 	addi	r2,r2,-4
    52c8:	e0bfff15 	stw	r2,-4(fp)
    52cc:	e0ffff17 	ldw	r3,-4(fp)
    52d0:	00800074 	movhi	r2,1
    52d4:	10a6dc04 	addi	r2,r2,-25744
    52d8:	18bff62e 	bgeu	r3,r2,52b4 <__alt_mem_epcs_flash_controller_0+0xff8042b4>
        (*ctor) (); 
}
    52dc:	0001883a 	nop
    52e0:	e037883a 	mov	sp,fp
    52e4:	dfc00117 	ldw	ra,4(sp)
    52e8:	df000017 	ldw	fp,0(sp)
    52ec:	dec00204 	addi	sp,sp,8
    52f0:	f800283a 	ret

000052f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    52f4:	defffd04 	addi	sp,sp,-12
    52f8:	dfc00215 	stw	ra,8(sp)
    52fc:	df000115 	stw	fp,4(sp)
    5300:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5304:	00800074 	movhi	r2,1
    5308:	10a6db04 	addi	r2,r2,-25748
    530c:	e0bfff15 	stw	r2,-4(fp)
    5310:	00000606 	br	532c <_do_dtors+0x38>
        (*dtor) (); 
    5314:	e0bfff17 	ldw	r2,-4(fp)
    5318:	10800017 	ldw	r2,0(r2)
    531c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5320:	e0bfff17 	ldw	r2,-4(fp)
    5324:	10bfff04 	addi	r2,r2,-4
    5328:	e0bfff15 	stw	r2,-4(fp)
    532c:	e0ffff17 	ldw	r3,-4(fp)
    5330:	00800074 	movhi	r2,1
    5334:	10a6dc04 	addi	r2,r2,-25744
    5338:	18bff62e 	bgeu	r3,r2,5314 <__alt_mem_epcs_flash_controller_0+0xff804314>
        (*dtor) (); 
}
    533c:	0001883a 	nop
    5340:	e037883a 	mov	sp,fp
    5344:	dfc00117 	ldw	ra,4(sp)
    5348:	df000017 	ldw	fp,0(sp)
    534c:	dec00204 	addi	sp,sp,8
    5350:	f800283a 	ret

00005354 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    5354:	defffc04 	addi	sp,sp,-16
    5358:	dfc00315 	stw	ra,12(sp)
    535c:	df000215 	stw	fp,8(sp)
    5360:	df000204 	addi	fp,sp,8
    5364:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    5368:	d1600604 	addi	r5,gp,-32744
    536c:	e13fff17 	ldw	r4,-4(fp)
    5370:	0005efc0 	call	5efc <alt_find_dev>
    5374:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
    5378:	e0bffe17 	ldw	r2,-8(fp)
    537c:	10000926 	beq	r2,zero,53a4 <alt_flash_open_dev+0x50>
    5380:	e0bffe17 	ldw	r2,-8(fp)
    5384:	10800317 	ldw	r2,12(r2)
    5388:	10000626 	beq	r2,zero,53a4 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
    538c:	e0bffe17 	ldw	r2,-8(fp)
    5390:	10800317 	ldw	r2,12(r2)
    5394:	e17fff17 	ldw	r5,-4(fp)
    5398:	e13ffe17 	ldw	r4,-8(fp)
    539c:	103ee83a 	callr	r2
    53a0:	00000106 	br	53a8 <alt_flash_open_dev+0x54>
  }

  return dev;
    53a4:	e0bffe17 	ldw	r2,-8(fp)
}
    53a8:	e037883a 	mov	sp,fp
    53ac:	dfc00117 	ldw	ra,4(sp)
    53b0:	df000017 	ldw	fp,0(sp)
    53b4:	dec00204 	addi	sp,sp,8
    53b8:	f800283a 	ret

000053bc <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    53bc:	defffd04 	addi	sp,sp,-12
    53c0:	dfc00215 	stw	ra,8(sp)
    53c4:	df000115 	stw	fp,4(sp)
    53c8:	df000104 	addi	fp,sp,4
    53cc:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    53d0:	e0bfff17 	ldw	r2,-4(fp)
    53d4:	10000826 	beq	r2,zero,53f8 <alt_flash_close_dev+0x3c>
    53d8:	e0bfff17 	ldw	r2,-4(fp)
    53dc:	10800417 	ldw	r2,16(r2)
    53e0:	10000526 	beq	r2,zero,53f8 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
    53e4:	e0bfff17 	ldw	r2,-4(fp)
    53e8:	10800417 	ldw	r2,16(r2)
    53ec:	e13fff17 	ldw	r4,-4(fp)
    53f0:	103ee83a 	callr	r2
  }
  return;
    53f4:	0001883a 	nop
    53f8:	0001883a 	nop
}
    53fc:	e037883a 	mov	sp,fp
    5400:	dfc00117 	ldw	ra,4(sp)
    5404:	df000017 	ldw	fp,0(sp)
    5408:	dec00204 	addi	sp,sp,8
    540c:	f800283a 	ret

00005410 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5410:	deffff04 	addi	sp,sp,-4
    5414:	df000015 	stw	fp,0(sp)
    5418:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    541c:	0001883a 	nop
    5420:	e037883a 	mov	sp,fp
    5424:	df000017 	ldw	fp,0(sp)
    5428:	dec00104 	addi	sp,sp,4
    542c:	f800283a 	ret

00005430 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5430:	defff904 	addi	sp,sp,-28
    5434:	dfc00615 	stw	ra,24(sp)
    5438:	df000515 	stw	fp,20(sp)
    543c:	df000504 	addi	fp,sp,20
    5440:	e13ffc15 	stw	r4,-16(fp)
    5444:	e17ffd15 	stw	r5,-12(fp)
    5448:	e1bffe15 	stw	r6,-8(fp)
    544c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5450:	e0800217 	ldw	r2,8(fp)
    5454:	d8800015 	stw	r2,0(sp)
    5458:	e1ffff17 	ldw	r7,-4(fp)
    545c:	e1bffe17 	ldw	r6,-8(fp)
    5460:	e17ffd17 	ldw	r5,-12(fp)
    5464:	e13ffc17 	ldw	r4,-16(fp)
    5468:	00055e00 	call	55e0 <alt_iic_isr_register>
}  
    546c:	e037883a 	mov	sp,fp
    5470:	dfc00117 	ldw	ra,4(sp)
    5474:	df000017 	ldw	fp,0(sp)
    5478:	dec00204 	addi	sp,sp,8
    547c:	f800283a 	ret

00005480 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    5480:	defff904 	addi	sp,sp,-28
    5484:	df000615 	stw	fp,24(sp)
    5488:	df000604 	addi	fp,sp,24
    548c:	e13ffe15 	stw	r4,-8(fp)
    5490:	e17fff15 	stw	r5,-4(fp)
    5494:	e0bfff17 	ldw	r2,-4(fp)
    5498:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    549c:	0005303a 	rdctl	r2,status
    54a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    54a4:	e0fffb17 	ldw	r3,-20(fp)
    54a8:	00bfff84 	movi	r2,-2
    54ac:	1884703a 	and	r2,r3,r2
    54b0:	1001703a 	wrctl	status,r2
  
  return context;
    54b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    54b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    54bc:	00c00044 	movi	r3,1
    54c0:	e0bffa17 	ldw	r2,-24(fp)
    54c4:	1884983a 	sll	r2,r3,r2
    54c8:	1007883a 	mov	r3,r2
    54cc:	d0a6eb17 	ldw	r2,-25684(gp)
    54d0:	1884b03a 	or	r2,r3,r2
    54d4:	d0a6eb15 	stw	r2,-25684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    54d8:	d0a6eb17 	ldw	r2,-25684(gp)
    54dc:	100170fa 	wrctl	ienable,r2
    54e0:	e0bffc17 	ldw	r2,-16(fp)
    54e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    54e8:	e0bffd17 	ldw	r2,-12(fp)
    54ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    54f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    54f4:	0001883a 	nop
}
    54f8:	e037883a 	mov	sp,fp
    54fc:	df000017 	ldw	fp,0(sp)
    5500:	dec00104 	addi	sp,sp,4
    5504:	f800283a 	ret

00005508 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    5508:	defff904 	addi	sp,sp,-28
    550c:	df000615 	stw	fp,24(sp)
    5510:	df000604 	addi	fp,sp,24
    5514:	e13ffe15 	stw	r4,-8(fp)
    5518:	e17fff15 	stw	r5,-4(fp)
    551c:	e0bfff17 	ldw	r2,-4(fp)
    5520:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5524:	0005303a 	rdctl	r2,status
    5528:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    552c:	e0fffb17 	ldw	r3,-20(fp)
    5530:	00bfff84 	movi	r2,-2
    5534:	1884703a 	and	r2,r3,r2
    5538:	1001703a 	wrctl	status,r2
  
  return context;
    553c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5540:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    5544:	00c00044 	movi	r3,1
    5548:	e0bffa17 	ldw	r2,-24(fp)
    554c:	1884983a 	sll	r2,r3,r2
    5550:	0084303a 	nor	r2,zero,r2
    5554:	1007883a 	mov	r3,r2
    5558:	d0a6eb17 	ldw	r2,-25684(gp)
    555c:	1884703a 	and	r2,r3,r2
    5560:	d0a6eb15 	stw	r2,-25684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5564:	d0a6eb17 	ldw	r2,-25684(gp)
    5568:	100170fa 	wrctl	ienable,r2
    556c:	e0bffc17 	ldw	r2,-16(fp)
    5570:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5574:	e0bffd17 	ldw	r2,-12(fp)
    5578:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    557c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    5580:	0001883a 	nop
}
    5584:	e037883a 	mov	sp,fp
    5588:	df000017 	ldw	fp,0(sp)
    558c:	dec00104 	addi	sp,sp,4
    5590:	f800283a 	ret

00005594 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    5594:	defffc04 	addi	sp,sp,-16
    5598:	df000315 	stw	fp,12(sp)
    559c:	df000304 	addi	fp,sp,12
    55a0:	e13ffe15 	stw	r4,-8(fp)
    55a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    55a8:	000530fa 	rdctl	r2,ienable
    55ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    55b0:	00c00044 	movi	r3,1
    55b4:	e0bfff17 	ldw	r2,-4(fp)
    55b8:	1884983a 	sll	r2,r3,r2
    55bc:	1007883a 	mov	r3,r2
    55c0:	e0bffd17 	ldw	r2,-12(fp)
    55c4:	1884703a 	and	r2,r3,r2
    55c8:	1004c03a 	cmpne	r2,r2,zero
    55cc:	10803fcc 	andi	r2,r2,255
}
    55d0:	e037883a 	mov	sp,fp
    55d4:	df000017 	ldw	fp,0(sp)
    55d8:	dec00104 	addi	sp,sp,4
    55dc:	f800283a 	ret

000055e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    55e0:	defff504 	addi	sp,sp,-44
    55e4:	dfc00a15 	stw	ra,40(sp)
    55e8:	df000915 	stw	fp,36(sp)
    55ec:	df000904 	addi	fp,sp,36
    55f0:	e13ffc15 	stw	r4,-16(fp)
    55f4:	e17ffd15 	stw	r5,-12(fp)
    55f8:	e1bffe15 	stw	r6,-8(fp)
    55fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    5600:	00bffa84 	movi	r2,-22
    5604:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    5608:	e0bffd17 	ldw	r2,-12(fp)
    560c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5610:	e0bff817 	ldw	r2,-32(fp)
    5614:	10800808 	cmpgei	r2,r2,32
    5618:	1000271e 	bne	r2,zero,56b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    561c:	0005303a 	rdctl	r2,status
    5620:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5624:	e0fffb17 	ldw	r3,-20(fp)
    5628:	00bfff84 	movi	r2,-2
    562c:	1884703a 	and	r2,r3,r2
    5630:	1001703a 	wrctl	status,r2
  
  return context;
    5634:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    5638:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    563c:	00800074 	movhi	r2,1
    5640:	10b54604 	addi	r2,r2,-10984
    5644:	e0fff817 	ldw	r3,-32(fp)
    5648:	180690fa 	slli	r3,r3,3
    564c:	10c5883a 	add	r2,r2,r3
    5650:	e0fffe17 	ldw	r3,-8(fp)
    5654:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    5658:	00800074 	movhi	r2,1
    565c:	10b54604 	addi	r2,r2,-10984
    5660:	e0fff817 	ldw	r3,-32(fp)
    5664:	180690fa 	slli	r3,r3,3
    5668:	10c5883a 	add	r2,r2,r3
    566c:	10800104 	addi	r2,r2,4
    5670:	e0ffff17 	ldw	r3,-4(fp)
    5674:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5678:	e0bffe17 	ldw	r2,-8(fp)
    567c:	10000526 	beq	r2,zero,5694 <alt_iic_isr_register+0xb4>
    5680:	e0bff817 	ldw	r2,-32(fp)
    5684:	100b883a 	mov	r5,r2
    5688:	e13ffc17 	ldw	r4,-16(fp)
    568c:	00054800 	call	5480 <alt_ic_irq_enable>
    5690:	00000406 	br	56a4 <alt_iic_isr_register+0xc4>
    5694:	e0bff817 	ldw	r2,-32(fp)
    5698:	100b883a 	mov	r5,r2
    569c:	e13ffc17 	ldw	r4,-16(fp)
    56a0:	00055080 	call	5508 <alt_ic_irq_disable>
    56a4:	e0bff715 	stw	r2,-36(fp)
    56a8:	e0bffa17 	ldw	r2,-24(fp)
    56ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56b0:	e0bff917 	ldw	r2,-28(fp)
    56b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    56b8:	e0bff717 	ldw	r2,-36(fp)
}
    56bc:	e037883a 	mov	sp,fp
    56c0:	dfc00117 	ldw	ra,4(sp)
    56c4:	df000017 	ldw	fp,0(sp)
    56c8:	dec00204 	addi	sp,sp,8
    56cc:	f800283a 	ret

000056d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    56d0:	defff804 	addi	sp,sp,-32
    56d4:	dfc00715 	stw	ra,28(sp)
    56d8:	df000615 	stw	fp,24(sp)
    56dc:	dc000515 	stw	r16,20(sp)
    56e0:	df000604 	addi	fp,sp,24
    56e4:	e13ffb15 	stw	r4,-20(fp)
    56e8:	e17ffc15 	stw	r5,-16(fp)
    56ec:	e1bffd15 	stw	r6,-12(fp)
    56f0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    56f4:	e1bffe17 	ldw	r6,-8(fp)
    56f8:	e17ffd17 	ldw	r5,-12(fp)
    56fc:	e13ffc17 	ldw	r4,-16(fp)
    5700:	00059580 	call	5958 <open>
    5704:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    5708:	e0bffa17 	ldw	r2,-24(fp)
    570c:	10002216 	blt	r2,zero,5798 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    5710:	04000074 	movhi	r16,1
    5714:	842bc604 	addi	r16,r16,-20712
    5718:	e0bffa17 	ldw	r2,-24(fp)
    571c:	01400304 	movi	r5,12
    5720:	1009883a 	mov	r4,r2
    5724:	00030c80 	call	30c8 <__mulsi3>
    5728:	8085883a 	add	r2,r16,r2
    572c:	10c00017 	ldw	r3,0(r2)
    5730:	e0bffb17 	ldw	r2,-20(fp)
    5734:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5738:	04000074 	movhi	r16,1
    573c:	842bc604 	addi	r16,r16,-20712
    5740:	e0bffa17 	ldw	r2,-24(fp)
    5744:	01400304 	movi	r5,12
    5748:	1009883a 	mov	r4,r2
    574c:	00030c80 	call	30c8 <__mulsi3>
    5750:	8085883a 	add	r2,r16,r2
    5754:	10800104 	addi	r2,r2,4
    5758:	10c00017 	ldw	r3,0(r2)
    575c:	e0bffb17 	ldw	r2,-20(fp)
    5760:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5764:	04000074 	movhi	r16,1
    5768:	842bc604 	addi	r16,r16,-20712
    576c:	e0bffa17 	ldw	r2,-24(fp)
    5770:	01400304 	movi	r5,12
    5774:	1009883a 	mov	r4,r2
    5778:	00030c80 	call	30c8 <__mulsi3>
    577c:	8085883a 	add	r2,r16,r2
    5780:	10800204 	addi	r2,r2,8
    5784:	10c00017 	ldw	r3,0(r2)
    5788:	e0bffb17 	ldw	r2,-20(fp)
    578c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5790:	e13ffa17 	ldw	r4,-24(fp)
    5794:	0005ab40 	call	5ab4 <alt_release_fd>
  }
} 
    5798:	0001883a 	nop
    579c:	e6ffff04 	addi	sp,fp,-4
    57a0:	dfc00217 	ldw	ra,8(sp)
    57a4:	df000117 	ldw	fp,4(sp)
    57a8:	dc000017 	ldw	r16,0(sp)
    57ac:	dec00304 	addi	sp,sp,12
    57b0:	f800283a 	ret

000057b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    57b4:	defffb04 	addi	sp,sp,-20
    57b8:	dfc00415 	stw	ra,16(sp)
    57bc:	df000315 	stw	fp,12(sp)
    57c0:	df000304 	addi	fp,sp,12
    57c4:	e13ffd15 	stw	r4,-12(fp)
    57c8:	e17ffe15 	stw	r5,-8(fp)
    57cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    57d0:	01c07fc4 	movi	r7,511
    57d4:	01800044 	movi	r6,1
    57d8:	e17ffd17 	ldw	r5,-12(fp)
    57dc:	01000074 	movhi	r4,1
    57e0:	212bc904 	addi	r4,r4,-20700
    57e4:	00056d00 	call	56d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    57e8:	01c07fc4 	movi	r7,511
    57ec:	000d883a 	mov	r6,zero
    57f0:	e17ffe17 	ldw	r5,-8(fp)
    57f4:	01000074 	movhi	r4,1
    57f8:	212bc604 	addi	r4,r4,-20712
    57fc:	00056d00 	call	56d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5800:	01c07fc4 	movi	r7,511
    5804:	01800044 	movi	r6,1
    5808:	e17fff17 	ldw	r5,-4(fp)
    580c:	01000074 	movhi	r4,1
    5810:	212bcc04 	addi	r4,r4,-20688
    5814:	00056d00 	call	56d0 <alt_open_fd>
}  
    5818:	0001883a 	nop
    581c:	e037883a 	mov	sp,fp
    5820:	dfc00117 	ldw	ra,4(sp)
    5824:	df000017 	ldw	fp,0(sp)
    5828:	dec00204 	addi	sp,sp,8
    582c:	f800283a 	ret

00005830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5830:	defffe04 	addi	sp,sp,-8
    5834:	dfc00115 	stw	ra,4(sp)
    5838:	df000015 	stw	fp,0(sp)
    583c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5840:	d0a00517 	ldw	r2,-32748(gp)
    5844:	10000326 	beq	r2,zero,5854 <alt_get_errno+0x24>
    5848:	d0a00517 	ldw	r2,-32748(gp)
    584c:	103ee83a 	callr	r2
    5850:	00000106 	br	5858 <alt_get_errno+0x28>
    5854:	d0a6ef04 	addi	r2,gp,-25668
}
    5858:	e037883a 	mov	sp,fp
    585c:	dfc00117 	ldw	ra,4(sp)
    5860:	df000017 	ldw	fp,0(sp)
    5864:	dec00204 	addi	sp,sp,8
    5868:	f800283a 	ret

0000586c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    586c:	defffb04 	addi	sp,sp,-20
    5870:	dfc00415 	stw	ra,16(sp)
    5874:	df000315 	stw	fp,12(sp)
    5878:	dc000215 	stw	r16,8(sp)
    587c:	df000304 	addi	fp,sp,12
    5880:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5884:	e0bffe17 	ldw	r2,-8(fp)
    5888:	10800217 	ldw	r2,8(r2)
    588c:	10d00034 	orhi	r3,r2,16384
    5890:	e0bffe17 	ldw	r2,-8(fp)
    5894:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5898:	e03ffd15 	stw	zero,-12(fp)
    589c:	00002306 	br	592c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    58a0:	04000074 	movhi	r16,1
    58a4:	842bc604 	addi	r16,r16,-20712
    58a8:	e0bffd17 	ldw	r2,-12(fp)
    58ac:	01400304 	movi	r5,12
    58b0:	1009883a 	mov	r4,r2
    58b4:	00030c80 	call	30c8 <__mulsi3>
    58b8:	8085883a 	add	r2,r16,r2
    58bc:	10c00017 	ldw	r3,0(r2)
    58c0:	e0bffe17 	ldw	r2,-8(fp)
    58c4:	10800017 	ldw	r2,0(r2)
    58c8:	1880151e 	bne	r3,r2,5920 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    58cc:	04000074 	movhi	r16,1
    58d0:	842bc604 	addi	r16,r16,-20712
    58d4:	e0bffd17 	ldw	r2,-12(fp)
    58d8:	01400304 	movi	r5,12
    58dc:	1009883a 	mov	r4,r2
    58e0:	00030c80 	call	30c8 <__mulsi3>
    58e4:	8085883a 	add	r2,r16,r2
    58e8:	10800204 	addi	r2,r2,8
    58ec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    58f0:	10000b0e 	bge	r2,zero,5920 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    58f4:	01400304 	movi	r5,12
    58f8:	e13ffd17 	ldw	r4,-12(fp)
    58fc:	00030c80 	call	30c8 <__mulsi3>
    5900:	1007883a 	mov	r3,r2
    5904:	00800074 	movhi	r2,1
    5908:	10abc604 	addi	r2,r2,-20712
    590c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5910:	e0bffe17 	ldw	r2,-8(fp)
    5914:	18800226 	beq	r3,r2,5920 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5918:	00bffcc4 	movi	r2,-13
    591c:	00000806 	br	5940 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5920:	e0bffd17 	ldw	r2,-12(fp)
    5924:	10800044 	addi	r2,r2,1
    5928:	e0bffd15 	stw	r2,-12(fp)
    592c:	d0a00417 	ldw	r2,-32752(gp)
    5930:	1007883a 	mov	r3,r2
    5934:	e0bffd17 	ldw	r2,-12(fp)
    5938:	18bfd92e 	bgeu	r3,r2,58a0 <__alt_mem_epcs_flash_controller_0+0xff8048a0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    593c:	0005883a 	mov	r2,zero
}
    5940:	e6ffff04 	addi	sp,fp,-4
    5944:	dfc00217 	ldw	ra,8(sp)
    5948:	df000117 	ldw	fp,4(sp)
    594c:	dc000017 	ldw	r16,0(sp)
    5950:	dec00304 	addi	sp,sp,12
    5954:	f800283a 	ret

00005958 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5958:	defff604 	addi	sp,sp,-40
    595c:	dfc00915 	stw	ra,36(sp)
    5960:	df000815 	stw	fp,32(sp)
    5964:	df000804 	addi	fp,sp,32
    5968:	e13ffd15 	stw	r4,-12(fp)
    596c:	e17ffe15 	stw	r5,-8(fp)
    5970:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    5974:	00bfffc4 	movi	r2,-1
    5978:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    597c:	00bffb44 	movi	r2,-19
    5980:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    5984:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5988:	d1600204 	addi	r5,gp,-32760
    598c:	e13ffd17 	ldw	r4,-12(fp)
    5990:	0005efc0 	call	5efc <alt_find_dev>
    5994:	e0bff815 	stw	r2,-32(fp)
    5998:	e0bff817 	ldw	r2,-32(fp)
    599c:	1000051e 	bne	r2,zero,59b4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    59a0:	e13ffd17 	ldw	r4,-12(fp)
    59a4:	0005f8c0 	call	5f8c <alt_find_file>
    59a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    59ac:	00800044 	movi	r2,1
    59b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    59b4:	e0bff817 	ldw	r2,-32(fp)
    59b8:	10002b26 	beq	r2,zero,5a68 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    59bc:	e13ff817 	ldw	r4,-32(fp)
    59c0:	00060940 	call	6094 <alt_get_fd>
    59c4:	e0bff915 	stw	r2,-28(fp)
    59c8:	e0bff917 	ldw	r2,-28(fp)
    59cc:	1000030e 	bge	r2,zero,59dc <open+0x84>
    {
      status = index;
    59d0:	e0bff917 	ldw	r2,-28(fp)
    59d4:	e0bffa15 	stw	r2,-24(fp)
    59d8:	00002506 	br	5a70 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    59dc:	01400304 	movi	r5,12
    59e0:	e13ff917 	ldw	r4,-28(fp)
    59e4:	00030c80 	call	30c8 <__mulsi3>
    59e8:	1007883a 	mov	r3,r2
    59ec:	00800074 	movhi	r2,1
    59f0:	10abc604 	addi	r2,r2,-20712
    59f4:	1885883a 	add	r2,r3,r2
    59f8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    59fc:	e0fffe17 	ldw	r3,-8(fp)
    5a00:	00900034 	movhi	r2,16384
    5a04:	10bfffc4 	addi	r2,r2,-1
    5a08:	1886703a 	and	r3,r3,r2
    5a0c:	e0bffc17 	ldw	r2,-16(fp)
    5a10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5a14:	e0bffb17 	ldw	r2,-20(fp)
    5a18:	1000051e 	bne	r2,zero,5a30 <open+0xd8>
    5a1c:	e13ffc17 	ldw	r4,-16(fp)
    5a20:	000586c0 	call	586c <alt_file_locked>
    5a24:	e0bffa15 	stw	r2,-24(fp)
    5a28:	e0bffa17 	ldw	r2,-24(fp)
    5a2c:	10001016 	blt	r2,zero,5a70 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5a30:	e0bff817 	ldw	r2,-32(fp)
    5a34:	10800317 	ldw	r2,12(r2)
    5a38:	10000826 	beq	r2,zero,5a5c <open+0x104>
    5a3c:	e0bff817 	ldw	r2,-32(fp)
    5a40:	10800317 	ldw	r2,12(r2)
    5a44:	e1ffff17 	ldw	r7,-4(fp)
    5a48:	e1bffe17 	ldw	r6,-8(fp)
    5a4c:	e17ffd17 	ldw	r5,-12(fp)
    5a50:	e13ffc17 	ldw	r4,-16(fp)
    5a54:	103ee83a 	callr	r2
    5a58:	00000106 	br	5a60 <open+0x108>
    5a5c:	0005883a 	mov	r2,zero
    5a60:	e0bffa15 	stw	r2,-24(fp)
    5a64:	00000206 	br	5a70 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5a68:	00bffb44 	movi	r2,-19
    5a6c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5a70:	e0bffa17 	ldw	r2,-24(fp)
    5a74:	1000090e 	bge	r2,zero,5a9c <open+0x144>
  {
    alt_release_fd (index);  
    5a78:	e13ff917 	ldw	r4,-28(fp)
    5a7c:	0005ab40 	call	5ab4 <alt_release_fd>
    ALT_ERRNO = -status;
    5a80:	00058300 	call	5830 <alt_get_errno>
    5a84:	1007883a 	mov	r3,r2
    5a88:	e0bffa17 	ldw	r2,-24(fp)
    5a8c:	0085c83a 	sub	r2,zero,r2
    5a90:	18800015 	stw	r2,0(r3)
    return -1;
    5a94:	00bfffc4 	movi	r2,-1
    5a98:	00000106 	br	5aa0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    5a9c:	e0bff917 	ldw	r2,-28(fp)
}
    5aa0:	e037883a 	mov	sp,fp
    5aa4:	dfc00117 	ldw	ra,4(sp)
    5aa8:	df000017 	ldw	fp,0(sp)
    5aac:	dec00204 	addi	sp,sp,8
    5ab0:	f800283a 	ret

00005ab4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5ab4:	defffc04 	addi	sp,sp,-16
    5ab8:	dfc00315 	stw	ra,12(sp)
    5abc:	df000215 	stw	fp,8(sp)
    5ac0:	dc000115 	stw	r16,4(sp)
    5ac4:	df000204 	addi	fp,sp,8
    5ac8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    5acc:	e0bffe17 	ldw	r2,-8(fp)
    5ad0:	108000d0 	cmplti	r2,r2,3
    5ad4:	1000111e 	bne	r2,zero,5b1c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    5ad8:	04000074 	movhi	r16,1
    5adc:	842bc604 	addi	r16,r16,-20712
    5ae0:	e0bffe17 	ldw	r2,-8(fp)
    5ae4:	01400304 	movi	r5,12
    5ae8:	1009883a 	mov	r4,r2
    5aec:	00030c80 	call	30c8 <__mulsi3>
    5af0:	8085883a 	add	r2,r16,r2
    5af4:	10800204 	addi	r2,r2,8
    5af8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    5afc:	04000074 	movhi	r16,1
    5b00:	842bc604 	addi	r16,r16,-20712
    5b04:	e0bffe17 	ldw	r2,-8(fp)
    5b08:	01400304 	movi	r5,12
    5b0c:	1009883a 	mov	r4,r2
    5b10:	00030c80 	call	30c8 <__mulsi3>
    5b14:	8085883a 	add	r2,r16,r2
    5b18:	10000015 	stw	zero,0(r2)
  }
}
    5b1c:	0001883a 	nop
    5b20:	e6ffff04 	addi	sp,fp,-4
    5b24:	dfc00217 	ldw	ra,8(sp)
    5b28:	df000117 	ldw	fp,4(sp)
    5b2c:	dc000017 	ldw	r16,0(sp)
    5b30:	dec00304 	addi	sp,sp,12
    5b34:	f800283a 	ret

00005b38 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    5b38:	defffa04 	addi	sp,sp,-24
    5b3c:	df000515 	stw	fp,20(sp)
    5b40:	df000504 	addi	fp,sp,20
    5b44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5b48:	0005303a 	rdctl	r2,status
    5b4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b50:	e0fffc17 	ldw	r3,-16(fp)
    5b54:	00bfff84 	movi	r2,-2
    5b58:	1884703a 	and	r2,r3,r2
    5b5c:	1001703a 	wrctl	status,r2
  
  return context;
    5b60:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    5b64:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    5b68:	e0bfff17 	ldw	r2,-4(fp)
    5b6c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    5b70:	e0bffd17 	ldw	r2,-12(fp)
    5b74:	10800017 	ldw	r2,0(r2)
    5b78:	e0fffd17 	ldw	r3,-12(fp)
    5b7c:	18c00117 	ldw	r3,4(r3)
    5b80:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    5b84:	e0bffd17 	ldw	r2,-12(fp)
    5b88:	10800117 	ldw	r2,4(r2)
    5b8c:	e0fffd17 	ldw	r3,-12(fp)
    5b90:	18c00017 	ldw	r3,0(r3)
    5b94:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    5b98:	e0bffd17 	ldw	r2,-12(fp)
    5b9c:	e0fffd17 	ldw	r3,-12(fp)
    5ba0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    5ba4:	e0bffd17 	ldw	r2,-12(fp)
    5ba8:	e0fffd17 	ldw	r3,-12(fp)
    5bac:	10c00015 	stw	r3,0(r2)
    5bb0:	e0bffb17 	ldw	r2,-20(fp)
    5bb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5bb8:	e0bffe17 	ldw	r2,-8(fp)
    5bbc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    5bc0:	0001883a 	nop
    5bc4:	e037883a 	mov	sp,fp
    5bc8:	df000017 	ldw	fp,0(sp)
    5bcc:	dec00104 	addi	sp,sp,4
    5bd0:	f800283a 	ret

00005bd4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    5bd4:	defffb04 	addi	sp,sp,-20
    5bd8:	dfc00415 	stw	ra,16(sp)
    5bdc:	df000315 	stw	fp,12(sp)
    5be0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    5be4:	d0a00917 	ldw	r2,-32732(gp)
    5be8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    5bec:	d0a6ed17 	ldw	r2,-25676(gp)
    5bf0:	10800044 	addi	r2,r2,1
    5bf4:	d0a6ed15 	stw	r2,-25676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5bf8:	00002e06 	br	5cb4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    5bfc:	e0bffd17 	ldw	r2,-12(fp)
    5c00:	10800017 	ldw	r2,0(r2)
    5c04:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    5c08:	e0bffd17 	ldw	r2,-12(fp)
    5c0c:	10800403 	ldbu	r2,16(r2)
    5c10:	10803fcc 	andi	r2,r2,255
    5c14:	10000426 	beq	r2,zero,5c28 <alt_tick+0x54>
    5c18:	d0a6ed17 	ldw	r2,-25676(gp)
    5c1c:	1000021e 	bne	r2,zero,5c28 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    5c20:	e0bffd17 	ldw	r2,-12(fp)
    5c24:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    5c28:	e0bffd17 	ldw	r2,-12(fp)
    5c2c:	10800217 	ldw	r2,8(r2)
    5c30:	d0e6ed17 	ldw	r3,-25676(gp)
    5c34:	18801d36 	bltu	r3,r2,5cac <alt_tick+0xd8>
    5c38:	e0bffd17 	ldw	r2,-12(fp)
    5c3c:	10800403 	ldbu	r2,16(r2)
    5c40:	10803fcc 	andi	r2,r2,255
    5c44:	1000191e 	bne	r2,zero,5cac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    5c48:	e0bffd17 	ldw	r2,-12(fp)
    5c4c:	10800317 	ldw	r2,12(r2)
    5c50:	e0fffd17 	ldw	r3,-12(fp)
    5c54:	18c00517 	ldw	r3,20(r3)
    5c58:	1809883a 	mov	r4,r3
    5c5c:	103ee83a 	callr	r2
    5c60:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    5c64:	e0bfff17 	ldw	r2,-4(fp)
    5c68:	1000031e 	bne	r2,zero,5c78 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    5c6c:	e13ffd17 	ldw	r4,-12(fp)
    5c70:	0005b380 	call	5b38 <alt_alarm_stop>
    5c74:	00000d06 	br	5cac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    5c78:	e0bffd17 	ldw	r2,-12(fp)
    5c7c:	10c00217 	ldw	r3,8(r2)
    5c80:	e0bfff17 	ldw	r2,-4(fp)
    5c84:	1887883a 	add	r3,r3,r2
    5c88:	e0bffd17 	ldw	r2,-12(fp)
    5c8c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    5c90:	e0bffd17 	ldw	r2,-12(fp)
    5c94:	10c00217 	ldw	r3,8(r2)
    5c98:	d0a6ed17 	ldw	r2,-25676(gp)
    5c9c:	1880032e 	bgeu	r3,r2,5cac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    5ca0:	e0bffd17 	ldw	r2,-12(fp)
    5ca4:	00c00044 	movi	r3,1
    5ca8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    5cac:	e0bffe17 	ldw	r2,-8(fp)
    5cb0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    5cb4:	e0fffd17 	ldw	r3,-12(fp)
    5cb8:	d0a00904 	addi	r2,gp,-32732
    5cbc:	18bfcf1e 	bne	r3,r2,5bfc <__alt_mem_epcs_flash_controller_0+0xff804bfc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    5cc0:	0001883a 	nop
}
    5cc4:	0001883a 	nop
    5cc8:	e037883a 	mov	sp,fp
    5ccc:	dfc00117 	ldw	ra,4(sp)
    5cd0:	df000017 	ldw	fp,0(sp)
    5cd4:	dec00204 	addi	sp,sp,8
    5cd8:	f800283a 	ret

00005cdc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    5cdc:	deffff04 	addi	sp,sp,-4
    5ce0:	df000015 	stw	fp,0(sp)
    5ce4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5ce8:	000170fa 	wrctl	ienable,zero
}
    5cec:	0001883a 	nop
    5cf0:	e037883a 	mov	sp,fp
    5cf4:	df000017 	ldw	fp,0(sp)
    5cf8:	dec00104 	addi	sp,sp,4
    5cfc:	f800283a 	ret

00005d00 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    5d00:	defff404 	addi	sp,sp,-48
    5d04:	df000b15 	stw	fp,44(sp)
    5d08:	df000b04 	addi	fp,sp,44
    5d0c:	e13ffc15 	stw	r4,-16(fp)
    5d10:	e17ffd15 	stw	r5,-12(fp)
    5d14:	e1bffe15 	stw	r6,-8(fp)
    5d18:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    5d1c:	e0ffff17 	ldw	r3,-4(fp)
    5d20:	e0bffe17 	ldw	r2,-8(fp)
    5d24:	1885883a 	add	r2,r3,r2
    5d28:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    5d2c:	e0c00217 	ldw	r3,8(fp)
    5d30:	e0800117 	ldw	r2,4(fp)
    5d34:	1885883a 	add	r2,r3,r2
    5d38:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    5d3c:	e0800117 	ldw	r2,4(fp)
    5d40:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    5d44:	e0bffe17 	ldw	r2,-8(fp)
    5d48:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    5d4c:	00800044 	movi	r2,1
    5d50:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    5d54:	e0bffc17 	ldw	r2,-16(fp)
    5d58:	10800504 	addi	r2,r2,20
    5d5c:	1009883a 	mov	r4,r2
    5d60:	00c00044 	movi	r3,1
    5d64:	e0bffd17 	ldw	r2,-12(fp)
    5d68:	1884983a 	sll	r2,r3,r2
    5d6c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    5d70:	e0800317 	ldw	r2,12(fp)
    5d74:	1080008c 	andi	r2,r2,2
    5d78:	1000051e 	bne	r2,zero,5d90 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    5d7c:	e0bffc17 	ldw	r2,-16(fp)
    5d80:	10800304 	addi	r2,r2,12
    5d84:	1007883a 	mov	r3,r2
    5d88:	00810004 	movi	r2,1024
    5d8c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    5d90:	e0bffc17 	ldw	r2,-16(fp)
    5d94:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    5d98:	e0bffc17 	ldw	r2,-16(fp)
    5d9c:	10800204 	addi	r2,r2,8
    5da0:	10800037 	ldwio	r2,0(r2)
    5da4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    5da8:	e0bffa17 	ldw	r2,-24(fp)
    5dac:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    5db0:	10000226 	beq	r2,zero,5dbc <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    5db4:	e0bff717 	ldw	r2,-36(fp)
    5db8:	1000031e 	bne	r2,zero,5dc8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    5dbc:	e0bffa17 	ldw	r2,-24(fp)
    5dc0:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    5dc4:	103ff426 	beq	r2,zero,5d98 <__alt_mem_epcs_flash_controller_0+0xff804d98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    5dc8:	e0bffa17 	ldw	r2,-24(fp)
    5dcc:	1080100c 	andi	r2,r2,64
    5dd0:	10001e26 	beq	r2,zero,5e4c <alt_avalon_spi_command+0x14c>
    5dd4:	e0bff717 	ldw	r2,-36(fp)
    5dd8:	00801c0e 	bge	zero,r2,5e4c <alt_avalon_spi_command+0x14c>
    {
      credits--;
    5ddc:	e0bff717 	ldw	r2,-36(fp)
    5de0:	10bfffc4 	addi	r2,r2,-1
    5de4:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    5de8:	e0ffff17 	ldw	r3,-4(fp)
    5dec:	e0bff817 	ldw	r2,-32(fp)
    5df0:	18800a2e 	bgeu	r3,r2,5e1c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    5df4:	e0bffc17 	ldw	r2,-16(fp)
    5df8:	10800104 	addi	r2,r2,4
    5dfc:	1009883a 	mov	r4,r2
    5e00:	e0bfff17 	ldw	r2,-4(fp)
    5e04:	10c00044 	addi	r3,r2,1
    5e08:	e0ffff15 	stw	r3,-4(fp)
    5e0c:	10800003 	ldbu	r2,0(r2)
    5e10:	10803fcc 	andi	r2,r2,255
    5e14:	20800035 	stwio	r2,0(r4)
    5e18:	00000c06 	br	5e4c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    5e1c:	e0bff517 	ldw	r2,-44(fp)
    5e20:	10000826 	beq	r2,zero,5e44 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    5e24:	e0bff517 	ldw	r2,-44(fp)
    5e28:	10bfffc4 	addi	r2,r2,-1
    5e2c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    5e30:	e0bffc17 	ldw	r2,-16(fp)
    5e34:	10800104 	addi	r2,r2,4
    5e38:	0007883a 	mov	r3,zero
    5e3c:	10c00035 	stwio	r3,0(r2)
    5e40:	00000206 	br	5e4c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    5e44:	00bf0004 	movi	r2,-1024
    5e48:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    5e4c:	e0bffa17 	ldw	r2,-24(fp)
    5e50:	1080200c 	andi	r2,r2,128
    5e54:	103fd026 	beq	r2,zero,5d98 <__alt_mem_epcs_flash_controller_0+0xff804d98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    5e58:	e0bffc17 	ldw	r2,-16(fp)
    5e5c:	10800037 	ldwio	r2,0(r2)
    5e60:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    5e64:	e0bff617 	ldw	r2,-40(fp)
    5e68:	10000426 	beq	r2,zero,5e7c <alt_avalon_spi_command+0x17c>
        read_ignore--;
    5e6c:	e0bff617 	ldw	r2,-40(fp)
    5e70:	10bfffc4 	addi	r2,r2,-1
    5e74:	e0bff615 	stw	r2,-40(fp)
    5e78:	00000506 	br	5e90 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    5e7c:	e0800217 	ldw	r2,8(fp)
    5e80:	10c00044 	addi	r3,r2,1
    5e84:	e0c00215 	stw	r3,8(fp)
    5e88:	e0fffb17 	ldw	r3,-20(fp)
    5e8c:	10c00005 	stb	r3,0(r2)
      credits++;
    5e90:	e0bff717 	ldw	r2,-36(fp)
    5e94:	10800044 	addi	r2,r2,1
    5e98:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    5e9c:	e0bff617 	ldw	r2,-40(fp)
    5ea0:	103fbd1e 	bne	r2,zero,5d98 <__alt_mem_epcs_flash_controller_0+0xff804d98>
    5ea4:	e0c00217 	ldw	r3,8(fp)
    5ea8:	e0bff917 	ldw	r2,-28(fp)
    5eac:	18bfba1e 	bne	r3,r2,5d98 <__alt_mem_epcs_flash_controller_0+0xff804d98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    5eb0:	e0bffc17 	ldw	r2,-16(fp)
    5eb4:	10800204 	addi	r2,r2,8
    5eb8:	10800037 	ldwio	r2,0(r2)
    5ebc:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    5ec0:	e0bffa17 	ldw	r2,-24(fp)
    5ec4:	1080080c 	andi	r2,r2,32
    5ec8:	103ff926 	beq	r2,zero,5eb0 <__alt_mem_epcs_flash_controller_0+0xff804eb0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    5ecc:	e0800317 	ldw	r2,12(fp)
    5ed0:	1080004c 	andi	r2,r2,1
    5ed4:	1000041e 	bne	r2,zero,5ee8 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    5ed8:	e0bffc17 	ldw	r2,-16(fp)
    5edc:	10800304 	addi	r2,r2,12
    5ee0:	0007883a 	mov	r3,zero
    5ee4:	10c00035 	stwio	r3,0(r2)

  return read_length;
    5ee8:	e0800117 	ldw	r2,4(fp)
}
    5eec:	e037883a 	mov	sp,fp
    5ef0:	df000017 	ldw	fp,0(sp)
    5ef4:	dec00104 	addi	sp,sp,4
    5ef8:	f800283a 	ret

00005efc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5efc:	defffa04 	addi	sp,sp,-24
    5f00:	dfc00515 	stw	ra,20(sp)
    5f04:	df000415 	stw	fp,16(sp)
    5f08:	df000404 	addi	fp,sp,16
    5f0c:	e13ffe15 	stw	r4,-8(fp)
    5f10:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    5f14:	e0bfff17 	ldw	r2,-4(fp)
    5f18:	10800017 	ldw	r2,0(r2)
    5f1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5f20:	e13ffe17 	ldw	r4,-8(fp)
    5f24:	0007b040 	call	7b04 <strlen>
    5f28:	10800044 	addi	r2,r2,1
    5f2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5f30:	00000d06 	br	5f68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5f34:	e0bffc17 	ldw	r2,-16(fp)
    5f38:	10800217 	ldw	r2,8(r2)
    5f3c:	e0fffd17 	ldw	r3,-12(fp)
    5f40:	180d883a 	mov	r6,r3
    5f44:	e17ffe17 	ldw	r5,-8(fp)
    5f48:	1009883a 	mov	r4,r2
    5f4c:	00071a40 	call	71a4 <memcmp>
    5f50:	1000021e 	bne	r2,zero,5f5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5f54:	e0bffc17 	ldw	r2,-16(fp)
    5f58:	00000706 	br	5f78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5f5c:	e0bffc17 	ldw	r2,-16(fp)
    5f60:	10800017 	ldw	r2,0(r2)
    5f64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5f68:	e0fffc17 	ldw	r3,-16(fp)
    5f6c:	e0bfff17 	ldw	r2,-4(fp)
    5f70:	18bff01e 	bne	r3,r2,5f34 <__alt_mem_epcs_flash_controller_0+0xff804f34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5f74:	0005883a 	mov	r2,zero
}
    5f78:	e037883a 	mov	sp,fp
    5f7c:	dfc00117 	ldw	ra,4(sp)
    5f80:	df000017 	ldw	fp,0(sp)
    5f84:	dec00204 	addi	sp,sp,8
    5f88:	f800283a 	ret

00005f8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5f8c:	defffb04 	addi	sp,sp,-20
    5f90:	dfc00415 	stw	ra,16(sp)
    5f94:	df000315 	stw	fp,12(sp)
    5f98:	df000304 	addi	fp,sp,12
    5f9c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5fa0:	d0a00017 	ldw	r2,-32768(gp)
    5fa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5fa8:	00003106 	br	6070 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    5fac:	e0bffd17 	ldw	r2,-12(fp)
    5fb0:	10800217 	ldw	r2,8(r2)
    5fb4:	1009883a 	mov	r4,r2
    5fb8:	0007b040 	call	7b04 <strlen>
    5fbc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    5fc0:	e0bffd17 	ldw	r2,-12(fp)
    5fc4:	10c00217 	ldw	r3,8(r2)
    5fc8:	e0bffe17 	ldw	r2,-8(fp)
    5fcc:	10bfffc4 	addi	r2,r2,-1
    5fd0:	1885883a 	add	r2,r3,r2
    5fd4:	10800003 	ldbu	r2,0(r2)
    5fd8:	10803fcc 	andi	r2,r2,255
    5fdc:	1080201c 	xori	r2,r2,128
    5fe0:	10bfe004 	addi	r2,r2,-128
    5fe4:	10800bd8 	cmpnei	r2,r2,47
    5fe8:	1000031e 	bne	r2,zero,5ff8 <alt_find_file+0x6c>
    {
      len -= 1;
    5fec:	e0bffe17 	ldw	r2,-8(fp)
    5ff0:	10bfffc4 	addi	r2,r2,-1
    5ff4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5ff8:	e0bffe17 	ldw	r2,-8(fp)
    5ffc:	e0ffff17 	ldw	r3,-4(fp)
    6000:	1885883a 	add	r2,r3,r2
    6004:	10800003 	ldbu	r2,0(r2)
    6008:	10803fcc 	andi	r2,r2,255
    600c:	1080201c 	xori	r2,r2,128
    6010:	10bfe004 	addi	r2,r2,-128
    6014:	10800be0 	cmpeqi	r2,r2,47
    6018:	1000081e 	bne	r2,zero,603c <alt_find_file+0xb0>
    601c:	e0bffe17 	ldw	r2,-8(fp)
    6020:	e0ffff17 	ldw	r3,-4(fp)
    6024:	1885883a 	add	r2,r3,r2
    6028:	10800003 	ldbu	r2,0(r2)
    602c:	10803fcc 	andi	r2,r2,255
    6030:	1080201c 	xori	r2,r2,128
    6034:	10bfe004 	addi	r2,r2,-128
    6038:	10000a1e 	bne	r2,zero,6064 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    603c:	e0bffd17 	ldw	r2,-12(fp)
    6040:	10800217 	ldw	r2,8(r2)
    6044:	e0fffe17 	ldw	r3,-8(fp)
    6048:	180d883a 	mov	r6,r3
    604c:	e17fff17 	ldw	r5,-4(fp)
    6050:	1009883a 	mov	r4,r2
    6054:	00071a40 	call	71a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6058:	1000021e 	bne	r2,zero,6064 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    605c:	e0bffd17 	ldw	r2,-12(fp)
    6060:	00000706 	br	6080 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    6064:	e0bffd17 	ldw	r2,-12(fp)
    6068:	10800017 	ldw	r2,0(r2)
    606c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6070:	e0fffd17 	ldw	r3,-12(fp)
    6074:	d0a00004 	addi	r2,gp,-32768
    6078:	18bfcc1e 	bne	r3,r2,5fac <__alt_mem_epcs_flash_controller_0+0xff804fac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    607c:	0005883a 	mov	r2,zero
}
    6080:	e037883a 	mov	sp,fp
    6084:	dfc00117 	ldw	ra,4(sp)
    6088:	df000017 	ldw	fp,0(sp)
    608c:	dec00204 	addi	sp,sp,8
    6090:	f800283a 	ret

00006094 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6094:	defffa04 	addi	sp,sp,-24
    6098:	dfc00515 	stw	ra,20(sp)
    609c:	df000415 	stw	fp,16(sp)
    60a0:	dc000315 	stw	r16,12(sp)
    60a4:	df000404 	addi	fp,sp,16
    60a8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    60ac:	00bffa04 	movi	r2,-24
    60b0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    60b4:	e03ffc15 	stw	zero,-16(fp)
    60b8:	00001d06 	br	6130 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    60bc:	04000074 	movhi	r16,1
    60c0:	842bc604 	addi	r16,r16,-20712
    60c4:	e0bffc17 	ldw	r2,-16(fp)
    60c8:	01400304 	movi	r5,12
    60cc:	1009883a 	mov	r4,r2
    60d0:	00030c80 	call	30c8 <__mulsi3>
    60d4:	8085883a 	add	r2,r16,r2
    60d8:	10800017 	ldw	r2,0(r2)
    60dc:	1000111e 	bne	r2,zero,6124 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    60e0:	04000074 	movhi	r16,1
    60e4:	842bc604 	addi	r16,r16,-20712
    60e8:	e0bffc17 	ldw	r2,-16(fp)
    60ec:	01400304 	movi	r5,12
    60f0:	1009883a 	mov	r4,r2
    60f4:	00030c80 	call	30c8 <__mulsi3>
    60f8:	8085883a 	add	r2,r16,r2
    60fc:	e0fffe17 	ldw	r3,-8(fp)
    6100:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    6104:	d0e00417 	ldw	r3,-32752(gp)
    6108:	e0bffc17 	ldw	r2,-16(fp)
    610c:	1880020e 	bge	r3,r2,6118 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    6110:	e0bffc17 	ldw	r2,-16(fp)
    6114:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
    6118:	e0bffc17 	ldw	r2,-16(fp)
    611c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    6120:	00000606 	br	613c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6124:	e0bffc17 	ldw	r2,-16(fp)
    6128:	10800044 	addi	r2,r2,1
    612c:	e0bffc15 	stw	r2,-16(fp)
    6130:	e0bffc17 	ldw	r2,-16(fp)
    6134:	10800810 	cmplti	r2,r2,32
    6138:	103fe01e 	bne	r2,zero,60bc <__alt_mem_epcs_flash_controller_0+0xff8050bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    613c:	e0bffd17 	ldw	r2,-12(fp)
}
    6140:	e6ffff04 	addi	sp,fp,-4
    6144:	dfc00217 	ldw	ra,8(sp)
    6148:	df000117 	ldw	fp,4(sp)
    614c:	dc000017 	ldw	r16,0(sp)
    6150:	dec00304 	addi	sp,sp,12
    6154:	f800283a 	ret

00006158 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    6158:	defffe04 	addi	sp,sp,-8
    615c:	df000115 	stw	fp,4(sp)
    6160:	df000104 	addi	fp,sp,4
    6164:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    6168:	e0bfff17 	ldw	r2,-4(fp)
    616c:	10bffe84 	addi	r2,r2,-6
    6170:	10c00428 	cmpgeui	r3,r2,16
    6174:	18001a1e 	bne	r3,zero,61e0 <alt_exception_cause_generated_bad_addr+0x88>
    6178:	100690ba 	slli	r3,r2,2
    617c:	00800034 	movhi	r2,0
    6180:	10986404 	addi	r2,r2,24976
    6184:	1885883a 	add	r2,r3,r2
    6188:	10800017 	ldw	r2,0(r2)
    618c:	1000683a 	jmp	r2
    6190:	000061d0 	cmplti	zero,zero,391
    6194:	000061d0 	cmplti	zero,zero,391
    6198:	000061e0 	cmpeqi	zero,zero,391
    619c:	000061e0 	cmpeqi	zero,zero,391
    61a0:	000061e0 	cmpeqi	zero,zero,391
    61a4:	000061d0 	cmplti	zero,zero,391
    61a8:	000061d8 	cmpnei	zero,zero,391
    61ac:	000061e0 	cmpeqi	zero,zero,391
    61b0:	000061d0 	cmplti	zero,zero,391
    61b4:	000061d0 	cmplti	zero,zero,391
    61b8:	000061e0 	cmpeqi	zero,zero,391
    61bc:	000061d0 	cmplti	zero,zero,391
    61c0:	000061d8 	cmpnei	zero,zero,391
    61c4:	000061e0 	cmpeqi	zero,zero,391
    61c8:	000061e0 	cmpeqi	zero,zero,391
    61cc:	000061d0 	cmplti	zero,zero,391
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    61d0:	00800044 	movi	r2,1
    61d4:	00000306 	br	61e4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    61d8:	0005883a 	mov	r2,zero
    61dc:	00000106 	br	61e4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    61e0:	0005883a 	mov	r2,zero
  }
}
    61e4:	e037883a 	mov	sp,fp
    61e8:	df000017 	ldw	fp,0(sp)
    61ec:	dec00104 	addi	sp,sp,4
    61f0:	f800283a 	ret

000061f4 <atexit>:
    61f4:	200b883a 	mov	r5,r4
    61f8:	000f883a 	mov	r7,zero
    61fc:	000d883a 	mov	r6,zero
    6200:	0009883a 	mov	r4,zero
    6204:	0007cf01 	jmpi	7cf0 <__register_exitproc>

00006208 <exit>:
    6208:	defffe04 	addi	sp,sp,-8
    620c:	000b883a 	mov	r5,zero
    6210:	dc000015 	stw	r16,0(sp)
    6214:	dfc00115 	stw	ra,4(sp)
    6218:	2021883a 	mov	r16,r4
    621c:	0007e080 	call	7e08 <__call_exitprocs>
    6220:	00800074 	movhi	r2,1
    6224:	10ae3c04 	addi	r2,r2,-18192
    6228:	11000017 	ldw	r4,0(r2)
    622c:	20800f17 	ldw	r2,60(r4)
    6230:	10000126 	beq	r2,zero,6238 <exit+0x30>
    6234:	103ee83a 	callr	r2
    6238:	8009883a 	mov	r4,r16
    623c:	00094d40 	call	94d4 <_exit>

00006240 <_fputs_r>:
    6240:	defff804 	addi	sp,sp,-32
    6244:	dc400615 	stw	r17,24(sp)
    6248:	2023883a 	mov	r17,r4
    624c:	2809883a 	mov	r4,r5
    6250:	dc000515 	stw	r16,20(sp)
    6254:	dfc00715 	stw	ra,28(sp)
    6258:	3021883a 	mov	r16,r6
    625c:	d9400315 	stw	r5,12(sp)
    6260:	0007b040 	call	7b04 <strlen>
    6264:	d8800215 	stw	r2,8(sp)
    6268:	d8800415 	stw	r2,16(sp)
    626c:	d8800304 	addi	r2,sp,12
    6270:	d8800015 	stw	r2,0(sp)
    6274:	00800044 	movi	r2,1
    6278:	d8800115 	stw	r2,4(sp)
    627c:	88000226 	beq	r17,zero,6288 <_fputs_r+0x48>
    6280:	88800e17 	ldw	r2,56(r17)
    6284:	10001226 	beq	r2,zero,62d0 <_fputs_r+0x90>
    6288:	8080030b 	ldhu	r2,12(r16)
    628c:	10c8000c 	andi	r3,r2,8192
    6290:	1800061e 	bne	r3,zero,62ac <_fputs_r+0x6c>
    6294:	81001917 	ldw	r4,100(r16)
    6298:	00f7ffc4 	movi	r3,-8193
    629c:	10880014 	ori	r2,r2,8192
    62a0:	20c6703a 	and	r3,r4,r3
    62a4:	8080030d 	sth	r2,12(r16)
    62a8:	80c01915 	stw	r3,100(r16)
    62ac:	d80d883a 	mov	r6,sp
    62b0:	800b883a 	mov	r5,r16
    62b4:	8809883a 	mov	r4,r17
    62b8:	00062f40 	call	62f4 <__sfvwrite_r>
    62bc:	dfc00717 	ldw	ra,28(sp)
    62c0:	dc400617 	ldw	r17,24(sp)
    62c4:	dc000517 	ldw	r16,20(sp)
    62c8:	dec00804 	addi	sp,sp,32
    62cc:	f800283a 	ret
    62d0:	8809883a 	mov	r4,r17
    62d4:	00085900 	call	8590 <__sinit>
    62d8:	003feb06 	br	6288 <__alt_mem_epcs_flash_controller_0+0xff805288>

000062dc <fputs>:
    62dc:	00800074 	movhi	r2,1
    62e0:	10ae3d04 	addi	r2,r2,-18188
    62e4:	280d883a 	mov	r6,r5
    62e8:	200b883a 	mov	r5,r4
    62ec:	11000017 	ldw	r4,0(r2)
    62f0:	00062401 	jmpi	6240 <_fputs_r>

000062f4 <__sfvwrite_r>:
    62f4:	30800217 	ldw	r2,8(r6)
    62f8:	10006726 	beq	r2,zero,6498 <__sfvwrite_r+0x1a4>
    62fc:	28c0030b 	ldhu	r3,12(r5)
    6300:	defff404 	addi	sp,sp,-48
    6304:	dd400715 	stw	r21,28(sp)
    6308:	dd000615 	stw	r20,24(sp)
    630c:	dc000215 	stw	r16,8(sp)
    6310:	dfc00b15 	stw	ra,44(sp)
    6314:	df000a15 	stw	fp,40(sp)
    6318:	ddc00915 	stw	r23,36(sp)
    631c:	dd800815 	stw	r22,32(sp)
    6320:	dcc00515 	stw	r19,20(sp)
    6324:	dc800415 	stw	r18,16(sp)
    6328:	dc400315 	stw	r17,12(sp)
    632c:	1880020c 	andi	r2,r3,8
    6330:	2821883a 	mov	r16,r5
    6334:	202b883a 	mov	r21,r4
    6338:	3029883a 	mov	r20,r6
    633c:	10002726 	beq	r2,zero,63dc <__sfvwrite_r+0xe8>
    6340:	28800417 	ldw	r2,16(r5)
    6344:	10002526 	beq	r2,zero,63dc <__sfvwrite_r+0xe8>
    6348:	1880008c 	andi	r2,r3,2
    634c:	a4400017 	ldw	r17,0(r20)
    6350:	10002a26 	beq	r2,zero,63fc <__sfvwrite_r+0x108>
    6354:	05a00034 	movhi	r22,32768
    6358:	0027883a 	mov	r19,zero
    635c:	0025883a 	mov	r18,zero
    6360:	b5bf0004 	addi	r22,r22,-1024
    6364:	980d883a 	mov	r6,r19
    6368:	a809883a 	mov	r4,r21
    636c:	90004626 	beq	r18,zero,6488 <__sfvwrite_r+0x194>
    6370:	900f883a 	mov	r7,r18
    6374:	b480022e 	bgeu	r22,r18,6380 <__sfvwrite_r+0x8c>
    6378:	01e00034 	movhi	r7,32768
    637c:	39ff0004 	addi	r7,r7,-1024
    6380:	80800917 	ldw	r2,36(r16)
    6384:	81400717 	ldw	r5,28(r16)
    6388:	103ee83a 	callr	r2
    638c:	00805a0e 	bge	zero,r2,64f8 <__sfvwrite_r+0x204>
    6390:	a0c00217 	ldw	r3,8(r20)
    6394:	98a7883a 	add	r19,r19,r2
    6398:	90a5c83a 	sub	r18,r18,r2
    639c:	1885c83a 	sub	r2,r3,r2
    63a0:	a0800215 	stw	r2,8(r20)
    63a4:	103fef1e 	bne	r2,zero,6364 <__alt_mem_epcs_flash_controller_0+0xff805364>
    63a8:	0005883a 	mov	r2,zero
    63ac:	dfc00b17 	ldw	ra,44(sp)
    63b0:	df000a17 	ldw	fp,40(sp)
    63b4:	ddc00917 	ldw	r23,36(sp)
    63b8:	dd800817 	ldw	r22,32(sp)
    63bc:	dd400717 	ldw	r21,28(sp)
    63c0:	dd000617 	ldw	r20,24(sp)
    63c4:	dcc00517 	ldw	r19,20(sp)
    63c8:	dc800417 	ldw	r18,16(sp)
    63cc:	dc400317 	ldw	r17,12(sp)
    63d0:	dc000217 	ldw	r16,8(sp)
    63d4:	dec00c04 	addi	sp,sp,48
    63d8:	f800283a 	ret
    63dc:	800b883a 	mov	r5,r16
    63e0:	a809883a 	mov	r4,r21
    63e4:	0007b9c0 	call	7b9c <__swsetup_r>
    63e8:	1000ee1e 	bne	r2,zero,67a4 <__sfvwrite_r+0x4b0>
    63ec:	80c0030b 	ldhu	r3,12(r16)
    63f0:	a4400017 	ldw	r17,0(r20)
    63f4:	1880008c 	andi	r2,r3,2
    63f8:	103fd61e 	bne	r2,zero,6354 <__alt_mem_epcs_flash_controller_0+0xff805354>
    63fc:	1880004c 	andi	r2,r3,1
    6400:	1000421e 	bne	r2,zero,650c <__sfvwrite_r+0x218>
    6404:	0039883a 	mov	fp,zero
    6408:	0025883a 	mov	r18,zero
    640c:	90001a26 	beq	r18,zero,6478 <__sfvwrite_r+0x184>
    6410:	1880800c 	andi	r2,r3,512
    6414:	84c00217 	ldw	r19,8(r16)
    6418:	10002126 	beq	r2,zero,64a0 <__sfvwrite_r+0x1ac>
    641c:	982f883a 	mov	r23,r19
    6420:	94c09636 	bltu	r18,r19,667c <__sfvwrite_r+0x388>
    6424:	1881200c 	andi	r2,r3,1152
    6428:	1000a11e 	bne	r2,zero,66b0 <__sfvwrite_r+0x3bc>
    642c:	81000017 	ldw	r4,0(r16)
    6430:	b80d883a 	mov	r6,r23
    6434:	e00b883a 	mov	r5,fp
    6438:	00073680 	call	7368 <memmove>
    643c:	80c00217 	ldw	r3,8(r16)
    6440:	81000017 	ldw	r4,0(r16)
    6444:	9005883a 	mov	r2,r18
    6448:	1ce7c83a 	sub	r19,r3,r19
    644c:	25cf883a 	add	r7,r4,r23
    6450:	84c00215 	stw	r19,8(r16)
    6454:	81c00015 	stw	r7,0(r16)
    6458:	a0c00217 	ldw	r3,8(r20)
    645c:	e0b9883a 	add	fp,fp,r2
    6460:	90a5c83a 	sub	r18,r18,r2
    6464:	18a7c83a 	sub	r19,r3,r2
    6468:	a4c00215 	stw	r19,8(r20)
    646c:	983fce26 	beq	r19,zero,63a8 <__alt_mem_epcs_flash_controller_0+0xff8053a8>
    6470:	80c0030b 	ldhu	r3,12(r16)
    6474:	903fe61e 	bne	r18,zero,6410 <__alt_mem_epcs_flash_controller_0+0xff805410>
    6478:	8f000017 	ldw	fp,0(r17)
    647c:	8c800117 	ldw	r18,4(r17)
    6480:	8c400204 	addi	r17,r17,8
    6484:	003fe106 	br	640c <__alt_mem_epcs_flash_controller_0+0xff80540c>
    6488:	8cc00017 	ldw	r19,0(r17)
    648c:	8c800117 	ldw	r18,4(r17)
    6490:	8c400204 	addi	r17,r17,8
    6494:	003fb306 	br	6364 <__alt_mem_epcs_flash_controller_0+0xff805364>
    6498:	0005883a 	mov	r2,zero
    649c:	f800283a 	ret
    64a0:	81000017 	ldw	r4,0(r16)
    64a4:	80800417 	ldw	r2,16(r16)
    64a8:	11005a36 	bltu	r2,r4,6614 <__sfvwrite_r+0x320>
    64ac:	85c00517 	ldw	r23,20(r16)
    64b0:	95c05836 	bltu	r18,r23,6614 <__sfvwrite_r+0x320>
    64b4:	00a00034 	movhi	r2,32768
    64b8:	10bfffc4 	addi	r2,r2,-1
    64bc:	9009883a 	mov	r4,r18
    64c0:	1480012e 	bgeu	r2,r18,64c8 <__sfvwrite_r+0x1d4>
    64c4:	1009883a 	mov	r4,r2
    64c8:	b80b883a 	mov	r5,r23
    64cc:	0002f140 	call	2f14 <__divsi3>
    64d0:	b80b883a 	mov	r5,r23
    64d4:	1009883a 	mov	r4,r2
    64d8:	00030c80 	call	30c8 <__mulsi3>
    64dc:	81400717 	ldw	r5,28(r16)
    64e0:	80c00917 	ldw	r3,36(r16)
    64e4:	100f883a 	mov	r7,r2
    64e8:	e00d883a 	mov	r6,fp
    64ec:	a809883a 	mov	r4,r21
    64f0:	183ee83a 	callr	r3
    64f4:	00bfd816 	blt	zero,r2,6458 <__alt_mem_epcs_flash_controller_0+0xff805458>
    64f8:	8080030b 	ldhu	r2,12(r16)
    64fc:	10801014 	ori	r2,r2,64
    6500:	8080030d 	sth	r2,12(r16)
    6504:	00bfffc4 	movi	r2,-1
    6508:	003fa806 	br	63ac <__alt_mem_epcs_flash_controller_0+0xff8053ac>
    650c:	0027883a 	mov	r19,zero
    6510:	0011883a 	mov	r8,zero
    6514:	0039883a 	mov	fp,zero
    6518:	0025883a 	mov	r18,zero
    651c:	90001f26 	beq	r18,zero,659c <__sfvwrite_r+0x2a8>
    6520:	40005a26 	beq	r8,zero,668c <__sfvwrite_r+0x398>
    6524:	982d883a 	mov	r22,r19
    6528:	94c0012e 	bgeu	r18,r19,6530 <__sfvwrite_r+0x23c>
    652c:	902d883a 	mov	r22,r18
    6530:	81000017 	ldw	r4,0(r16)
    6534:	80800417 	ldw	r2,16(r16)
    6538:	b02f883a 	mov	r23,r22
    653c:	81c00517 	ldw	r7,20(r16)
    6540:	1100032e 	bgeu	r2,r4,6550 <__sfvwrite_r+0x25c>
    6544:	80c00217 	ldw	r3,8(r16)
    6548:	38c7883a 	add	r3,r7,r3
    654c:	1d801816 	blt	r3,r22,65b0 <__sfvwrite_r+0x2bc>
    6550:	b1c03e16 	blt	r22,r7,664c <__sfvwrite_r+0x358>
    6554:	80800917 	ldw	r2,36(r16)
    6558:	81400717 	ldw	r5,28(r16)
    655c:	e00d883a 	mov	r6,fp
    6560:	da000115 	stw	r8,4(sp)
    6564:	a809883a 	mov	r4,r21
    6568:	103ee83a 	callr	r2
    656c:	102f883a 	mov	r23,r2
    6570:	da000117 	ldw	r8,4(sp)
    6574:	00bfe00e 	bge	zero,r2,64f8 <__alt_mem_epcs_flash_controller_0+0xff8054f8>
    6578:	9de7c83a 	sub	r19,r19,r23
    657c:	98001f26 	beq	r19,zero,65fc <__sfvwrite_r+0x308>
    6580:	a0800217 	ldw	r2,8(r20)
    6584:	e5f9883a 	add	fp,fp,r23
    6588:	95e5c83a 	sub	r18,r18,r23
    658c:	15efc83a 	sub	r23,r2,r23
    6590:	a5c00215 	stw	r23,8(r20)
    6594:	b83f8426 	beq	r23,zero,63a8 <__alt_mem_epcs_flash_controller_0+0xff8053a8>
    6598:	903fe11e 	bne	r18,zero,6520 <__alt_mem_epcs_flash_controller_0+0xff805520>
    659c:	8f000017 	ldw	fp,0(r17)
    65a0:	8c800117 	ldw	r18,4(r17)
    65a4:	0011883a 	mov	r8,zero
    65a8:	8c400204 	addi	r17,r17,8
    65ac:	003fdb06 	br	651c <__alt_mem_epcs_flash_controller_0+0xff80551c>
    65b0:	180d883a 	mov	r6,r3
    65b4:	e00b883a 	mov	r5,fp
    65b8:	da000115 	stw	r8,4(sp)
    65bc:	d8c00015 	stw	r3,0(sp)
    65c0:	00073680 	call	7368 <memmove>
    65c4:	d8c00017 	ldw	r3,0(sp)
    65c8:	80800017 	ldw	r2,0(r16)
    65cc:	800b883a 	mov	r5,r16
    65d0:	a809883a 	mov	r4,r21
    65d4:	10c5883a 	add	r2,r2,r3
    65d8:	80800015 	stw	r2,0(r16)
    65dc:	d8c00015 	stw	r3,0(sp)
    65e0:	00081a40 	call	81a4 <_fflush_r>
    65e4:	d8c00017 	ldw	r3,0(sp)
    65e8:	da000117 	ldw	r8,4(sp)
    65ec:	103fc21e 	bne	r2,zero,64f8 <__alt_mem_epcs_flash_controller_0+0xff8054f8>
    65f0:	182f883a 	mov	r23,r3
    65f4:	9de7c83a 	sub	r19,r19,r23
    65f8:	983fe11e 	bne	r19,zero,6580 <__alt_mem_epcs_flash_controller_0+0xff805580>
    65fc:	800b883a 	mov	r5,r16
    6600:	a809883a 	mov	r4,r21
    6604:	00081a40 	call	81a4 <_fflush_r>
    6608:	103fbb1e 	bne	r2,zero,64f8 <__alt_mem_epcs_flash_controller_0+0xff8054f8>
    660c:	0011883a 	mov	r8,zero
    6610:	003fdb06 	br	6580 <__alt_mem_epcs_flash_controller_0+0xff805580>
    6614:	94c0012e 	bgeu	r18,r19,661c <__sfvwrite_r+0x328>
    6618:	9027883a 	mov	r19,r18
    661c:	980d883a 	mov	r6,r19
    6620:	e00b883a 	mov	r5,fp
    6624:	00073680 	call	7368 <memmove>
    6628:	80800217 	ldw	r2,8(r16)
    662c:	80c00017 	ldw	r3,0(r16)
    6630:	14c5c83a 	sub	r2,r2,r19
    6634:	1cc7883a 	add	r3,r3,r19
    6638:	80800215 	stw	r2,8(r16)
    663c:	80c00015 	stw	r3,0(r16)
    6640:	10004326 	beq	r2,zero,6750 <__sfvwrite_r+0x45c>
    6644:	9805883a 	mov	r2,r19
    6648:	003f8306 	br	6458 <__alt_mem_epcs_flash_controller_0+0xff805458>
    664c:	b00d883a 	mov	r6,r22
    6650:	e00b883a 	mov	r5,fp
    6654:	da000115 	stw	r8,4(sp)
    6658:	00073680 	call	7368 <memmove>
    665c:	80800217 	ldw	r2,8(r16)
    6660:	80c00017 	ldw	r3,0(r16)
    6664:	da000117 	ldw	r8,4(sp)
    6668:	1585c83a 	sub	r2,r2,r22
    666c:	1dad883a 	add	r22,r3,r22
    6670:	80800215 	stw	r2,8(r16)
    6674:	85800015 	stw	r22,0(r16)
    6678:	003fbf06 	br	6578 <__alt_mem_epcs_flash_controller_0+0xff805578>
    667c:	81000017 	ldw	r4,0(r16)
    6680:	9027883a 	mov	r19,r18
    6684:	902f883a 	mov	r23,r18
    6688:	003f6906 	br	6430 <__alt_mem_epcs_flash_controller_0+0xff805430>
    668c:	900d883a 	mov	r6,r18
    6690:	01400284 	movi	r5,10
    6694:	e009883a 	mov	r4,fp
    6698:	00070c00 	call	70c0 <memchr>
    669c:	10003e26 	beq	r2,zero,6798 <__sfvwrite_r+0x4a4>
    66a0:	10800044 	addi	r2,r2,1
    66a4:	1727c83a 	sub	r19,r2,fp
    66a8:	02000044 	movi	r8,1
    66ac:	003f9d06 	br	6524 <__alt_mem_epcs_flash_controller_0+0xff805524>
    66b0:	80800517 	ldw	r2,20(r16)
    66b4:	81400417 	ldw	r5,16(r16)
    66b8:	81c00017 	ldw	r7,0(r16)
    66bc:	10a7883a 	add	r19,r2,r2
    66c0:	9885883a 	add	r2,r19,r2
    66c4:	1026d7fa 	srli	r19,r2,31
    66c8:	396dc83a 	sub	r22,r7,r5
    66cc:	b1000044 	addi	r4,r22,1
    66d0:	9885883a 	add	r2,r19,r2
    66d4:	1027d07a 	srai	r19,r2,1
    66d8:	2485883a 	add	r2,r4,r18
    66dc:	980d883a 	mov	r6,r19
    66e0:	9880022e 	bgeu	r19,r2,66ec <__sfvwrite_r+0x3f8>
    66e4:	1027883a 	mov	r19,r2
    66e8:	100d883a 	mov	r6,r2
    66ec:	18c1000c 	andi	r3,r3,1024
    66f0:	18001c26 	beq	r3,zero,6764 <__sfvwrite_r+0x470>
    66f4:	300b883a 	mov	r5,r6
    66f8:	a809883a 	mov	r4,r21
    66fc:	00068b40 	call	68b4 <_malloc_r>
    6700:	102f883a 	mov	r23,r2
    6704:	10002926 	beq	r2,zero,67ac <__sfvwrite_r+0x4b8>
    6708:	81400417 	ldw	r5,16(r16)
    670c:	b00d883a 	mov	r6,r22
    6710:	1009883a 	mov	r4,r2
    6714:	00072200 	call	7220 <memcpy>
    6718:	8080030b 	ldhu	r2,12(r16)
    671c:	00fedfc4 	movi	r3,-1153
    6720:	10c4703a 	and	r2,r2,r3
    6724:	10802014 	ori	r2,r2,128
    6728:	8080030d 	sth	r2,12(r16)
    672c:	bd89883a 	add	r4,r23,r22
    6730:	9d8fc83a 	sub	r7,r19,r22
    6734:	85c00415 	stw	r23,16(r16)
    6738:	84c00515 	stw	r19,20(r16)
    673c:	81000015 	stw	r4,0(r16)
    6740:	9027883a 	mov	r19,r18
    6744:	81c00215 	stw	r7,8(r16)
    6748:	902f883a 	mov	r23,r18
    674c:	003f3806 	br	6430 <__alt_mem_epcs_flash_controller_0+0xff805430>
    6750:	800b883a 	mov	r5,r16
    6754:	a809883a 	mov	r4,r21
    6758:	00081a40 	call	81a4 <_fflush_r>
    675c:	103fb926 	beq	r2,zero,6644 <__alt_mem_epcs_flash_controller_0+0xff805644>
    6760:	003f6506 	br	64f8 <__alt_mem_epcs_flash_controller_0+0xff8054f8>
    6764:	a809883a 	mov	r4,r21
    6768:	00074c40 	call	74c4 <_realloc_r>
    676c:	102f883a 	mov	r23,r2
    6770:	103fee1e 	bne	r2,zero,672c <__alt_mem_epcs_flash_controller_0+0xff80572c>
    6774:	81400417 	ldw	r5,16(r16)
    6778:	a809883a 	mov	r4,r21
    677c:	00087040 	call	8704 <_free_r>
    6780:	8080030b 	ldhu	r2,12(r16)
    6784:	00ffdfc4 	movi	r3,-129
    6788:	1884703a 	and	r2,r3,r2
    678c:	00c00304 	movi	r3,12
    6790:	a8c00015 	stw	r3,0(r21)
    6794:	003f5906 	br	64fc <__alt_mem_epcs_flash_controller_0+0xff8054fc>
    6798:	94c00044 	addi	r19,r18,1
    679c:	02000044 	movi	r8,1
    67a0:	003f6006 	br	6524 <__alt_mem_epcs_flash_controller_0+0xff805524>
    67a4:	00bfffc4 	movi	r2,-1
    67a8:	003f0006 	br	63ac <__alt_mem_epcs_flash_controller_0+0xff8053ac>
    67ac:	00800304 	movi	r2,12
    67b0:	a8800015 	stw	r2,0(r21)
    67b4:	8080030b 	ldhu	r2,12(r16)
    67b8:	003f5006 	br	64fc <__alt_mem_epcs_flash_controller_0+0xff8054fc>

000067bc <_getc_r>:
    67bc:	defffd04 	addi	sp,sp,-12
    67c0:	dc000115 	stw	r16,4(sp)
    67c4:	dfc00215 	stw	ra,8(sp)
    67c8:	2021883a 	mov	r16,r4
    67cc:	20000226 	beq	r4,zero,67d8 <_getc_r+0x1c>
    67d0:	20800e17 	ldw	r2,56(r4)
    67d4:	10000c26 	beq	r2,zero,6808 <_getc_r+0x4c>
    67d8:	28800117 	ldw	r2,4(r5)
    67dc:	10bfffc4 	addi	r2,r2,-1
    67e0:	28800115 	stw	r2,4(r5)
    67e4:	10000c16 	blt	r2,zero,6818 <_getc_r+0x5c>
    67e8:	28800017 	ldw	r2,0(r5)
    67ec:	10c00044 	addi	r3,r2,1
    67f0:	28c00015 	stw	r3,0(r5)
    67f4:	10800003 	ldbu	r2,0(r2)
    67f8:	dfc00217 	ldw	ra,8(sp)
    67fc:	dc000117 	ldw	r16,4(sp)
    6800:	dec00304 	addi	sp,sp,12
    6804:	f800283a 	ret
    6808:	d9400015 	stw	r5,0(sp)
    680c:	00085900 	call	8590 <__sinit>
    6810:	d9400017 	ldw	r5,0(sp)
    6814:	003ff006 	br	67d8 <__alt_mem_epcs_flash_controller_0+0xff8057d8>
    6818:	8009883a 	mov	r4,r16
    681c:	dfc00217 	ldw	ra,8(sp)
    6820:	dc000117 	ldw	r16,4(sp)
    6824:	dec00304 	addi	sp,sp,12
    6828:	0007a281 	jmpi	7a28 <__srget_r>

0000682c <getc>:
    682c:	00800074 	movhi	r2,1
    6830:	defffd04 	addi	sp,sp,-12
    6834:	10ae3d04 	addi	r2,r2,-18188
    6838:	dc400115 	stw	r17,4(sp)
    683c:	14400017 	ldw	r17,0(r2)
    6840:	dc000015 	stw	r16,0(sp)
    6844:	dfc00215 	stw	ra,8(sp)
    6848:	2021883a 	mov	r16,r4
    684c:	88000226 	beq	r17,zero,6858 <getc+0x2c>
    6850:	88800e17 	ldw	r2,56(r17)
    6854:	10000d26 	beq	r2,zero,688c <getc+0x60>
    6858:	80800117 	ldw	r2,4(r16)
    685c:	10bfffc4 	addi	r2,r2,-1
    6860:	80800115 	stw	r2,4(r16)
    6864:	10000c16 	blt	r2,zero,6898 <getc+0x6c>
    6868:	80800017 	ldw	r2,0(r16)
    686c:	10c00044 	addi	r3,r2,1
    6870:	80c00015 	stw	r3,0(r16)
    6874:	10800003 	ldbu	r2,0(r2)
    6878:	dfc00217 	ldw	ra,8(sp)
    687c:	dc400117 	ldw	r17,4(sp)
    6880:	dc000017 	ldw	r16,0(sp)
    6884:	dec00304 	addi	sp,sp,12
    6888:	f800283a 	ret
    688c:	8809883a 	mov	r4,r17
    6890:	00085900 	call	8590 <__sinit>
    6894:	003ff006 	br	6858 <__alt_mem_epcs_flash_controller_0+0xff805858>
    6898:	800b883a 	mov	r5,r16
    689c:	8809883a 	mov	r4,r17
    68a0:	dfc00217 	ldw	ra,8(sp)
    68a4:	dc400117 	ldw	r17,4(sp)
    68a8:	dc000017 	ldw	r16,0(sp)
    68ac:	dec00304 	addi	sp,sp,12
    68b0:	0007a281 	jmpi	7a28 <__srget_r>

000068b4 <_malloc_r>:
    68b4:	defff504 	addi	sp,sp,-44
    68b8:	dc800315 	stw	r18,12(sp)
    68bc:	dfc00a15 	stw	ra,40(sp)
    68c0:	df000915 	stw	fp,36(sp)
    68c4:	ddc00815 	stw	r23,32(sp)
    68c8:	dd800715 	stw	r22,28(sp)
    68cc:	dd400615 	stw	r21,24(sp)
    68d0:	dd000515 	stw	r20,20(sp)
    68d4:	dcc00415 	stw	r19,16(sp)
    68d8:	dc400215 	stw	r17,8(sp)
    68dc:	dc000115 	stw	r16,4(sp)
    68e0:	288002c4 	addi	r2,r5,11
    68e4:	00c00584 	movi	r3,22
    68e8:	2025883a 	mov	r18,r4
    68ec:	18807f2e 	bgeu	r3,r2,6aec <_malloc_r+0x238>
    68f0:	047ffe04 	movi	r17,-8
    68f4:	1462703a 	and	r17,r2,r17
    68f8:	8800a316 	blt	r17,zero,6b88 <_malloc_r+0x2d4>
    68fc:	8940a236 	bltu	r17,r5,6b88 <_malloc_r+0x2d4>
    6900:	00097fc0 	call	97fc <__malloc_lock>
    6904:	00807dc4 	movi	r2,503
    6908:	1441e92e 	bgeu	r2,r17,70b0 <_malloc_r+0x7fc>
    690c:	8804d27a 	srli	r2,r17,9
    6910:	1000a126 	beq	r2,zero,6b98 <_malloc_r+0x2e4>
    6914:	00c00104 	movi	r3,4
    6918:	18811e36 	bltu	r3,r2,6d94 <_malloc_r+0x4e0>
    691c:	8804d1ba 	srli	r2,r17,6
    6920:	12000e44 	addi	r8,r2,57
    6924:	11c00e04 	addi	r7,r2,56
    6928:	4209883a 	add	r4,r8,r8
    692c:	04c00074 	movhi	r19,1
    6930:	2109883a 	add	r4,r4,r4
    6934:	9ced2f04 	addi	r19,r19,-19268
    6938:	2109883a 	add	r4,r4,r4
    693c:	9909883a 	add	r4,r19,r4
    6940:	24000117 	ldw	r16,4(r4)
    6944:	213ffe04 	addi	r4,r4,-8
    6948:	24009726 	beq	r4,r16,6ba8 <_malloc_r+0x2f4>
    694c:	80800117 	ldw	r2,4(r16)
    6950:	01bfff04 	movi	r6,-4
    6954:	014003c4 	movi	r5,15
    6958:	1184703a 	and	r2,r2,r6
    695c:	1447c83a 	sub	r3,r2,r17
    6960:	28c00716 	blt	r5,r3,6980 <_malloc_r+0xcc>
    6964:	1800920e 	bge	r3,zero,6bb0 <_malloc_r+0x2fc>
    6968:	84000317 	ldw	r16,12(r16)
    696c:	24008e26 	beq	r4,r16,6ba8 <_malloc_r+0x2f4>
    6970:	80800117 	ldw	r2,4(r16)
    6974:	1184703a 	and	r2,r2,r6
    6978:	1447c83a 	sub	r3,r2,r17
    697c:	28fff90e 	bge	r5,r3,6964 <__alt_mem_epcs_flash_controller_0+0xff805964>
    6980:	3809883a 	mov	r4,r7
    6984:	01800074 	movhi	r6,1
    6988:	9c000417 	ldw	r16,16(r19)
    698c:	31ad2f04 	addi	r6,r6,-19268
    6990:	32000204 	addi	r8,r6,8
    6994:	82013426 	beq	r16,r8,6e68 <_malloc_r+0x5b4>
    6998:	80c00117 	ldw	r3,4(r16)
    699c:	00bfff04 	movi	r2,-4
    69a0:	188e703a 	and	r7,r3,r2
    69a4:	3c45c83a 	sub	r2,r7,r17
    69a8:	00c003c4 	movi	r3,15
    69ac:	18811f16 	blt	r3,r2,6e2c <_malloc_r+0x578>
    69b0:	32000515 	stw	r8,20(r6)
    69b4:	32000415 	stw	r8,16(r6)
    69b8:	10007f0e 	bge	r2,zero,6bb8 <_malloc_r+0x304>
    69bc:	00807fc4 	movi	r2,511
    69c0:	11c0fd36 	bltu	r2,r7,6db8 <_malloc_r+0x504>
    69c4:	3806d0fa 	srli	r3,r7,3
    69c8:	01c00044 	movi	r7,1
    69cc:	30800117 	ldw	r2,4(r6)
    69d0:	19400044 	addi	r5,r3,1
    69d4:	294b883a 	add	r5,r5,r5
    69d8:	1807d0ba 	srai	r3,r3,2
    69dc:	294b883a 	add	r5,r5,r5
    69e0:	294b883a 	add	r5,r5,r5
    69e4:	298b883a 	add	r5,r5,r6
    69e8:	38c6983a 	sll	r3,r7,r3
    69ec:	29c00017 	ldw	r7,0(r5)
    69f0:	2a7ffe04 	addi	r9,r5,-8
    69f4:	1886b03a 	or	r3,r3,r2
    69f8:	82400315 	stw	r9,12(r16)
    69fc:	81c00215 	stw	r7,8(r16)
    6a00:	30c00115 	stw	r3,4(r6)
    6a04:	2c000015 	stw	r16,0(r5)
    6a08:	3c000315 	stw	r16,12(r7)
    6a0c:	2005d0ba 	srai	r2,r4,2
    6a10:	01400044 	movi	r5,1
    6a14:	288a983a 	sll	r5,r5,r2
    6a18:	19406f36 	bltu	r3,r5,6bd8 <_malloc_r+0x324>
    6a1c:	28c4703a 	and	r2,r5,r3
    6a20:	10000a1e 	bne	r2,zero,6a4c <_malloc_r+0x198>
    6a24:	00bfff04 	movi	r2,-4
    6a28:	294b883a 	add	r5,r5,r5
    6a2c:	2088703a 	and	r4,r4,r2
    6a30:	28c4703a 	and	r2,r5,r3
    6a34:	21000104 	addi	r4,r4,4
    6a38:	1000041e 	bne	r2,zero,6a4c <_malloc_r+0x198>
    6a3c:	294b883a 	add	r5,r5,r5
    6a40:	28c4703a 	and	r2,r5,r3
    6a44:	21000104 	addi	r4,r4,4
    6a48:	103ffc26 	beq	r2,zero,6a3c <__alt_mem_epcs_flash_controller_0+0xff805a3c>
    6a4c:	02bfff04 	movi	r10,-4
    6a50:	024003c4 	movi	r9,15
    6a54:	21800044 	addi	r6,r4,1
    6a58:	318d883a 	add	r6,r6,r6
    6a5c:	318d883a 	add	r6,r6,r6
    6a60:	318d883a 	add	r6,r6,r6
    6a64:	998d883a 	add	r6,r19,r6
    6a68:	333ffe04 	addi	r12,r6,-8
    6a6c:	2017883a 	mov	r11,r4
    6a70:	31800104 	addi	r6,r6,4
    6a74:	34000017 	ldw	r16,0(r6)
    6a78:	31fffd04 	addi	r7,r6,-12
    6a7c:	81c0041e 	bne	r16,r7,6a90 <_malloc_r+0x1dc>
    6a80:	0000fb06 	br	6e70 <_malloc_r+0x5bc>
    6a84:	1801030e 	bge	r3,zero,6e94 <_malloc_r+0x5e0>
    6a88:	84000317 	ldw	r16,12(r16)
    6a8c:	81c0f826 	beq	r16,r7,6e70 <_malloc_r+0x5bc>
    6a90:	80800117 	ldw	r2,4(r16)
    6a94:	1284703a 	and	r2,r2,r10
    6a98:	1447c83a 	sub	r3,r2,r17
    6a9c:	48fff90e 	bge	r9,r3,6a84 <__alt_mem_epcs_flash_controller_0+0xff805a84>
    6aa0:	80800317 	ldw	r2,12(r16)
    6aa4:	81000217 	ldw	r4,8(r16)
    6aa8:	89400054 	ori	r5,r17,1
    6aac:	81400115 	stw	r5,4(r16)
    6ab0:	20800315 	stw	r2,12(r4)
    6ab4:	11000215 	stw	r4,8(r2)
    6ab8:	8463883a 	add	r17,r16,r17
    6abc:	9c400515 	stw	r17,20(r19)
    6ac0:	9c400415 	stw	r17,16(r19)
    6ac4:	18800054 	ori	r2,r3,1
    6ac8:	88800115 	stw	r2,4(r17)
    6acc:	8a000315 	stw	r8,12(r17)
    6ad0:	8a000215 	stw	r8,8(r17)
    6ad4:	88e3883a 	add	r17,r17,r3
    6ad8:	88c00015 	stw	r3,0(r17)
    6adc:	9009883a 	mov	r4,r18
    6ae0:	00098200 	call	9820 <__malloc_unlock>
    6ae4:	80800204 	addi	r2,r16,8
    6ae8:	00001b06 	br	6b58 <_malloc_r+0x2a4>
    6aec:	04400404 	movi	r17,16
    6af0:	89402536 	bltu	r17,r5,6b88 <_malloc_r+0x2d4>
    6af4:	00097fc0 	call	97fc <__malloc_lock>
    6af8:	00800184 	movi	r2,6
    6afc:	01000084 	movi	r4,2
    6b00:	04c00074 	movhi	r19,1
    6b04:	1085883a 	add	r2,r2,r2
    6b08:	9ced2f04 	addi	r19,r19,-19268
    6b0c:	1085883a 	add	r2,r2,r2
    6b10:	9885883a 	add	r2,r19,r2
    6b14:	14000117 	ldw	r16,4(r2)
    6b18:	10fffe04 	addi	r3,r2,-8
    6b1c:	80c0d926 	beq	r16,r3,6e84 <_malloc_r+0x5d0>
    6b20:	80c00117 	ldw	r3,4(r16)
    6b24:	81000317 	ldw	r4,12(r16)
    6b28:	00bfff04 	movi	r2,-4
    6b2c:	1884703a 	and	r2,r3,r2
    6b30:	81400217 	ldw	r5,8(r16)
    6b34:	8085883a 	add	r2,r16,r2
    6b38:	10c00117 	ldw	r3,4(r2)
    6b3c:	29000315 	stw	r4,12(r5)
    6b40:	21400215 	stw	r5,8(r4)
    6b44:	18c00054 	ori	r3,r3,1
    6b48:	10c00115 	stw	r3,4(r2)
    6b4c:	9009883a 	mov	r4,r18
    6b50:	00098200 	call	9820 <__malloc_unlock>
    6b54:	80800204 	addi	r2,r16,8
    6b58:	dfc00a17 	ldw	ra,40(sp)
    6b5c:	df000917 	ldw	fp,36(sp)
    6b60:	ddc00817 	ldw	r23,32(sp)
    6b64:	dd800717 	ldw	r22,28(sp)
    6b68:	dd400617 	ldw	r21,24(sp)
    6b6c:	dd000517 	ldw	r20,20(sp)
    6b70:	dcc00417 	ldw	r19,16(sp)
    6b74:	dc800317 	ldw	r18,12(sp)
    6b78:	dc400217 	ldw	r17,8(sp)
    6b7c:	dc000117 	ldw	r16,4(sp)
    6b80:	dec00b04 	addi	sp,sp,44
    6b84:	f800283a 	ret
    6b88:	00800304 	movi	r2,12
    6b8c:	90800015 	stw	r2,0(r18)
    6b90:	0005883a 	mov	r2,zero
    6b94:	003ff006 	br	6b58 <__alt_mem_epcs_flash_controller_0+0xff805b58>
    6b98:	01002004 	movi	r4,128
    6b9c:	02001004 	movi	r8,64
    6ba0:	01c00fc4 	movi	r7,63
    6ba4:	003f6106 	br	692c <__alt_mem_epcs_flash_controller_0+0xff80592c>
    6ba8:	4009883a 	mov	r4,r8
    6bac:	003f7506 	br	6984 <__alt_mem_epcs_flash_controller_0+0xff805984>
    6bb0:	81000317 	ldw	r4,12(r16)
    6bb4:	003fde06 	br	6b30 <__alt_mem_epcs_flash_controller_0+0xff805b30>
    6bb8:	81c5883a 	add	r2,r16,r7
    6bbc:	11400117 	ldw	r5,4(r2)
    6bc0:	9009883a 	mov	r4,r18
    6bc4:	29400054 	ori	r5,r5,1
    6bc8:	11400115 	stw	r5,4(r2)
    6bcc:	00098200 	call	9820 <__malloc_unlock>
    6bd0:	80800204 	addi	r2,r16,8
    6bd4:	003fe006 	br	6b58 <__alt_mem_epcs_flash_controller_0+0xff805b58>
    6bd8:	9c000217 	ldw	r16,8(r19)
    6bdc:	00bfff04 	movi	r2,-4
    6be0:	85800117 	ldw	r22,4(r16)
    6be4:	b0ac703a 	and	r22,r22,r2
    6be8:	b4400336 	bltu	r22,r17,6bf8 <_malloc_r+0x344>
    6bec:	b445c83a 	sub	r2,r22,r17
    6bf0:	00c003c4 	movi	r3,15
    6bf4:	18805d16 	blt	r3,r2,6d6c <_malloc_r+0x4b8>
    6bf8:	05c00074 	movhi	r23,1
    6bfc:	00800074 	movhi	r2,1
    6c00:	10b52304 	addi	r2,r2,-11124
    6c04:	bdee3e04 	addi	r23,r23,-18184
    6c08:	15400017 	ldw	r21,0(r2)
    6c0c:	b8c00017 	ldw	r3,0(r23)
    6c10:	00bfffc4 	movi	r2,-1
    6c14:	858d883a 	add	r6,r16,r22
    6c18:	8d6b883a 	add	r21,r17,r21
    6c1c:	1880ea26 	beq	r3,r2,6fc8 <_malloc_r+0x714>
    6c20:	ad4403c4 	addi	r21,r21,4111
    6c24:	00bc0004 	movi	r2,-4096
    6c28:	a8aa703a 	and	r21,r21,r2
    6c2c:	a80b883a 	mov	r5,r21
    6c30:	9009883a 	mov	r4,r18
    6c34:	d9800015 	stw	r6,0(sp)
    6c38:	0007ab00 	call	7ab0 <_sbrk_r>
    6c3c:	1029883a 	mov	r20,r2
    6c40:	00bfffc4 	movi	r2,-1
    6c44:	d9800017 	ldw	r6,0(sp)
    6c48:	a080e826 	beq	r20,r2,6fec <_malloc_r+0x738>
    6c4c:	a180a636 	bltu	r20,r6,6ee8 <_malloc_r+0x634>
    6c50:	07000074 	movhi	fp,1
    6c54:	e7352404 	addi	fp,fp,-11120
    6c58:	e0800017 	ldw	r2,0(fp)
    6c5c:	a887883a 	add	r3,r21,r2
    6c60:	e0c00015 	stw	r3,0(fp)
    6c64:	3500e626 	beq	r6,r20,7000 <_malloc_r+0x74c>
    6c68:	b9000017 	ldw	r4,0(r23)
    6c6c:	00bfffc4 	movi	r2,-1
    6c70:	2080ee26 	beq	r4,r2,702c <_malloc_r+0x778>
    6c74:	a185c83a 	sub	r2,r20,r6
    6c78:	10c5883a 	add	r2,r2,r3
    6c7c:	e0800015 	stw	r2,0(fp)
    6c80:	a0c001cc 	andi	r3,r20,7
    6c84:	1800bc26 	beq	r3,zero,6f78 <_malloc_r+0x6c4>
    6c88:	a0e9c83a 	sub	r20,r20,r3
    6c8c:	00840204 	movi	r2,4104
    6c90:	a5000204 	addi	r20,r20,8
    6c94:	10c7c83a 	sub	r3,r2,r3
    6c98:	a545883a 	add	r2,r20,r21
    6c9c:	1083ffcc 	andi	r2,r2,4095
    6ca0:	18abc83a 	sub	r21,r3,r2
    6ca4:	a80b883a 	mov	r5,r21
    6ca8:	9009883a 	mov	r4,r18
    6cac:	0007ab00 	call	7ab0 <_sbrk_r>
    6cb0:	00ffffc4 	movi	r3,-1
    6cb4:	10c0e126 	beq	r2,r3,703c <_malloc_r+0x788>
    6cb8:	1505c83a 	sub	r2,r2,r20
    6cbc:	1545883a 	add	r2,r2,r21
    6cc0:	10800054 	ori	r2,r2,1
    6cc4:	e0c00017 	ldw	r3,0(fp)
    6cc8:	9d000215 	stw	r20,8(r19)
    6ccc:	a0800115 	stw	r2,4(r20)
    6cd0:	a8c7883a 	add	r3,r21,r3
    6cd4:	e0c00015 	stw	r3,0(fp)
    6cd8:	84c00e26 	beq	r16,r19,6d14 <_malloc_r+0x460>
    6cdc:	018003c4 	movi	r6,15
    6ce0:	3580a72e 	bgeu	r6,r22,6f80 <_malloc_r+0x6cc>
    6ce4:	81400117 	ldw	r5,4(r16)
    6ce8:	013ffe04 	movi	r4,-8
    6cec:	b0bffd04 	addi	r2,r22,-12
    6cf0:	1104703a 	and	r2,r2,r4
    6cf4:	2900004c 	andi	r4,r5,1
    6cf8:	2088b03a 	or	r4,r4,r2
    6cfc:	81000115 	stw	r4,4(r16)
    6d00:	01400144 	movi	r5,5
    6d04:	8089883a 	add	r4,r16,r2
    6d08:	21400115 	stw	r5,4(r4)
    6d0c:	21400215 	stw	r5,8(r4)
    6d10:	3080cd36 	bltu	r6,r2,7048 <_malloc_r+0x794>
    6d14:	00800074 	movhi	r2,1
    6d18:	10b52204 	addi	r2,r2,-11128
    6d1c:	11000017 	ldw	r4,0(r2)
    6d20:	20c0012e 	bgeu	r4,r3,6d28 <_malloc_r+0x474>
    6d24:	10c00015 	stw	r3,0(r2)
    6d28:	00800074 	movhi	r2,1
    6d2c:	10b52104 	addi	r2,r2,-11132
    6d30:	11000017 	ldw	r4,0(r2)
    6d34:	9c000217 	ldw	r16,8(r19)
    6d38:	20c0012e 	bgeu	r4,r3,6d40 <_malloc_r+0x48c>
    6d3c:	10c00015 	stw	r3,0(r2)
    6d40:	80c00117 	ldw	r3,4(r16)
    6d44:	00bfff04 	movi	r2,-4
    6d48:	1886703a 	and	r3,r3,r2
    6d4c:	1c45c83a 	sub	r2,r3,r17
    6d50:	1c400236 	bltu	r3,r17,6d5c <_malloc_r+0x4a8>
    6d54:	00c003c4 	movi	r3,15
    6d58:	18800416 	blt	r3,r2,6d6c <_malloc_r+0x4b8>
    6d5c:	9009883a 	mov	r4,r18
    6d60:	00098200 	call	9820 <__malloc_unlock>
    6d64:	0005883a 	mov	r2,zero
    6d68:	003f7b06 	br	6b58 <__alt_mem_epcs_flash_controller_0+0xff805b58>
    6d6c:	88c00054 	ori	r3,r17,1
    6d70:	80c00115 	stw	r3,4(r16)
    6d74:	8463883a 	add	r17,r16,r17
    6d78:	10800054 	ori	r2,r2,1
    6d7c:	9c400215 	stw	r17,8(r19)
    6d80:	88800115 	stw	r2,4(r17)
    6d84:	9009883a 	mov	r4,r18
    6d88:	00098200 	call	9820 <__malloc_unlock>
    6d8c:	80800204 	addi	r2,r16,8
    6d90:	003f7106 	br	6b58 <__alt_mem_epcs_flash_controller_0+0xff805b58>
    6d94:	00c00504 	movi	r3,20
    6d98:	18804a2e 	bgeu	r3,r2,6ec4 <_malloc_r+0x610>
    6d9c:	00c01504 	movi	r3,84
    6da0:	18806e36 	bltu	r3,r2,6f5c <_malloc_r+0x6a8>
    6da4:	8804d33a 	srli	r2,r17,12
    6da8:	12001bc4 	addi	r8,r2,111
    6dac:	11c01b84 	addi	r7,r2,110
    6db0:	4209883a 	add	r4,r8,r8
    6db4:	003edd06 	br	692c <__alt_mem_epcs_flash_controller_0+0xff80592c>
    6db8:	3804d27a 	srli	r2,r7,9
    6dbc:	00c00104 	movi	r3,4
    6dc0:	1880442e 	bgeu	r3,r2,6ed4 <_malloc_r+0x620>
    6dc4:	00c00504 	movi	r3,20
    6dc8:	18808136 	bltu	r3,r2,6fd0 <_malloc_r+0x71c>
    6dcc:	11401704 	addi	r5,r2,92
    6dd0:	10c016c4 	addi	r3,r2,91
    6dd4:	294b883a 	add	r5,r5,r5
    6dd8:	294b883a 	add	r5,r5,r5
    6ddc:	294b883a 	add	r5,r5,r5
    6de0:	994b883a 	add	r5,r19,r5
    6de4:	28800017 	ldw	r2,0(r5)
    6de8:	01800074 	movhi	r6,1
    6dec:	297ffe04 	addi	r5,r5,-8
    6df0:	31ad2f04 	addi	r6,r6,-19268
    6df4:	28806526 	beq	r5,r2,6f8c <_malloc_r+0x6d8>
    6df8:	01bfff04 	movi	r6,-4
    6dfc:	10c00117 	ldw	r3,4(r2)
    6e00:	1986703a 	and	r3,r3,r6
    6e04:	38c0022e 	bgeu	r7,r3,6e10 <_malloc_r+0x55c>
    6e08:	10800217 	ldw	r2,8(r2)
    6e0c:	28bffb1e 	bne	r5,r2,6dfc <__alt_mem_epcs_flash_controller_0+0xff805dfc>
    6e10:	11400317 	ldw	r5,12(r2)
    6e14:	98c00117 	ldw	r3,4(r19)
    6e18:	81400315 	stw	r5,12(r16)
    6e1c:	80800215 	stw	r2,8(r16)
    6e20:	2c000215 	stw	r16,8(r5)
    6e24:	14000315 	stw	r16,12(r2)
    6e28:	003ef806 	br	6a0c <__alt_mem_epcs_flash_controller_0+0xff805a0c>
    6e2c:	88c00054 	ori	r3,r17,1
    6e30:	80c00115 	stw	r3,4(r16)
    6e34:	8463883a 	add	r17,r16,r17
    6e38:	34400515 	stw	r17,20(r6)
    6e3c:	34400415 	stw	r17,16(r6)
    6e40:	10c00054 	ori	r3,r2,1
    6e44:	8a000315 	stw	r8,12(r17)
    6e48:	8a000215 	stw	r8,8(r17)
    6e4c:	88c00115 	stw	r3,4(r17)
    6e50:	88a3883a 	add	r17,r17,r2
    6e54:	88800015 	stw	r2,0(r17)
    6e58:	9009883a 	mov	r4,r18
    6e5c:	00098200 	call	9820 <__malloc_unlock>
    6e60:	80800204 	addi	r2,r16,8
    6e64:	003f3c06 	br	6b58 <__alt_mem_epcs_flash_controller_0+0xff805b58>
    6e68:	30c00117 	ldw	r3,4(r6)
    6e6c:	003ee706 	br	6a0c <__alt_mem_epcs_flash_controller_0+0xff805a0c>
    6e70:	5ac00044 	addi	r11,r11,1
    6e74:	588000cc 	andi	r2,r11,3
    6e78:	31800204 	addi	r6,r6,8
    6e7c:	103efd1e 	bne	r2,zero,6a74 <__alt_mem_epcs_flash_controller_0+0xff805a74>
    6e80:	00002406 	br	6f14 <_malloc_r+0x660>
    6e84:	14000317 	ldw	r16,12(r2)
    6e88:	143f251e 	bne	r2,r16,6b20 <__alt_mem_epcs_flash_controller_0+0xff805b20>
    6e8c:	21000084 	addi	r4,r4,2
    6e90:	003ebc06 	br	6984 <__alt_mem_epcs_flash_controller_0+0xff805984>
    6e94:	8085883a 	add	r2,r16,r2
    6e98:	10c00117 	ldw	r3,4(r2)
    6e9c:	81000317 	ldw	r4,12(r16)
    6ea0:	81400217 	ldw	r5,8(r16)
    6ea4:	18c00054 	ori	r3,r3,1
    6ea8:	10c00115 	stw	r3,4(r2)
    6eac:	29000315 	stw	r4,12(r5)
    6eb0:	21400215 	stw	r5,8(r4)
    6eb4:	9009883a 	mov	r4,r18
    6eb8:	00098200 	call	9820 <__malloc_unlock>
    6ebc:	80800204 	addi	r2,r16,8
    6ec0:	003f2506 	br	6b58 <__alt_mem_epcs_flash_controller_0+0xff805b58>
    6ec4:	12001704 	addi	r8,r2,92
    6ec8:	11c016c4 	addi	r7,r2,91
    6ecc:	4209883a 	add	r4,r8,r8
    6ed0:	003e9606 	br	692c <__alt_mem_epcs_flash_controller_0+0xff80592c>
    6ed4:	3804d1ba 	srli	r2,r7,6
    6ed8:	11400e44 	addi	r5,r2,57
    6edc:	10c00e04 	addi	r3,r2,56
    6ee0:	294b883a 	add	r5,r5,r5
    6ee4:	003fbc06 	br	6dd8 <__alt_mem_epcs_flash_controller_0+0xff805dd8>
    6ee8:	84ff5926 	beq	r16,r19,6c50 <__alt_mem_epcs_flash_controller_0+0xff805c50>
    6eec:	00800074 	movhi	r2,1
    6ef0:	10ad2f04 	addi	r2,r2,-19268
    6ef4:	14000217 	ldw	r16,8(r2)
    6ef8:	00bfff04 	movi	r2,-4
    6efc:	80c00117 	ldw	r3,4(r16)
    6f00:	1886703a 	and	r3,r3,r2
    6f04:	003f9106 	br	6d4c <__alt_mem_epcs_flash_controller_0+0xff805d4c>
    6f08:	60800217 	ldw	r2,8(r12)
    6f0c:	213fffc4 	addi	r4,r4,-1
    6f10:	1300651e 	bne	r2,r12,70a8 <_malloc_r+0x7f4>
    6f14:	208000cc 	andi	r2,r4,3
    6f18:	633ffe04 	addi	r12,r12,-8
    6f1c:	103ffa1e 	bne	r2,zero,6f08 <__alt_mem_epcs_flash_controller_0+0xff805f08>
    6f20:	98800117 	ldw	r2,4(r19)
    6f24:	0146303a 	nor	r3,zero,r5
    6f28:	1884703a 	and	r2,r3,r2
    6f2c:	98800115 	stw	r2,4(r19)
    6f30:	294b883a 	add	r5,r5,r5
    6f34:	117f2836 	bltu	r2,r5,6bd8 <__alt_mem_epcs_flash_controller_0+0xff805bd8>
    6f38:	283f2726 	beq	r5,zero,6bd8 <__alt_mem_epcs_flash_controller_0+0xff805bd8>
    6f3c:	2886703a 	and	r3,r5,r2
    6f40:	5809883a 	mov	r4,r11
    6f44:	183ec31e 	bne	r3,zero,6a54 <__alt_mem_epcs_flash_controller_0+0xff805a54>
    6f48:	294b883a 	add	r5,r5,r5
    6f4c:	2886703a 	and	r3,r5,r2
    6f50:	21000104 	addi	r4,r4,4
    6f54:	183ffc26 	beq	r3,zero,6f48 <__alt_mem_epcs_flash_controller_0+0xff805f48>
    6f58:	003ebe06 	br	6a54 <__alt_mem_epcs_flash_controller_0+0xff805a54>
    6f5c:	00c05504 	movi	r3,340
    6f60:	18801236 	bltu	r3,r2,6fac <_malloc_r+0x6f8>
    6f64:	8804d3fa 	srli	r2,r17,15
    6f68:	12001e04 	addi	r8,r2,120
    6f6c:	11c01dc4 	addi	r7,r2,119
    6f70:	4209883a 	add	r4,r8,r8
    6f74:	003e6d06 	br	692c <__alt_mem_epcs_flash_controller_0+0xff80592c>
    6f78:	00c40004 	movi	r3,4096
    6f7c:	003f4606 	br	6c98 <__alt_mem_epcs_flash_controller_0+0xff805c98>
    6f80:	00800044 	movi	r2,1
    6f84:	a0800115 	stw	r2,4(r20)
    6f88:	003f7406 	br	6d5c <__alt_mem_epcs_flash_controller_0+0xff805d5c>
    6f8c:	1805d0ba 	srai	r2,r3,2
    6f90:	01c00044 	movi	r7,1
    6f94:	30c00117 	ldw	r3,4(r6)
    6f98:	388e983a 	sll	r7,r7,r2
    6f9c:	2805883a 	mov	r2,r5
    6fa0:	38c6b03a 	or	r3,r7,r3
    6fa4:	30c00115 	stw	r3,4(r6)
    6fa8:	003f9b06 	br	6e18 <__alt_mem_epcs_flash_controller_0+0xff805e18>
    6fac:	00c15504 	movi	r3,1364
    6fb0:	18801a36 	bltu	r3,r2,701c <_malloc_r+0x768>
    6fb4:	8804d4ba 	srli	r2,r17,18
    6fb8:	12001f44 	addi	r8,r2,125
    6fbc:	11c01f04 	addi	r7,r2,124
    6fc0:	4209883a 	add	r4,r8,r8
    6fc4:	003e5906 	br	692c <__alt_mem_epcs_flash_controller_0+0xff80592c>
    6fc8:	ad400404 	addi	r21,r21,16
    6fcc:	003f1706 	br	6c2c <__alt_mem_epcs_flash_controller_0+0xff805c2c>
    6fd0:	00c01504 	movi	r3,84
    6fd4:	18802336 	bltu	r3,r2,7064 <_malloc_r+0x7b0>
    6fd8:	3804d33a 	srli	r2,r7,12
    6fdc:	11401bc4 	addi	r5,r2,111
    6fe0:	10c01b84 	addi	r3,r2,110
    6fe4:	294b883a 	add	r5,r5,r5
    6fe8:	003f7b06 	br	6dd8 <__alt_mem_epcs_flash_controller_0+0xff805dd8>
    6fec:	9c000217 	ldw	r16,8(r19)
    6ff0:	00bfff04 	movi	r2,-4
    6ff4:	80c00117 	ldw	r3,4(r16)
    6ff8:	1886703a 	and	r3,r3,r2
    6ffc:	003f5306 	br	6d4c <__alt_mem_epcs_flash_controller_0+0xff805d4c>
    7000:	3083ffcc 	andi	r2,r6,4095
    7004:	103f181e 	bne	r2,zero,6c68 <__alt_mem_epcs_flash_controller_0+0xff805c68>
    7008:	99000217 	ldw	r4,8(r19)
    700c:	b545883a 	add	r2,r22,r21
    7010:	10800054 	ori	r2,r2,1
    7014:	20800115 	stw	r2,4(r4)
    7018:	003f3e06 	br	6d14 <__alt_mem_epcs_flash_controller_0+0xff805d14>
    701c:	01003f84 	movi	r4,254
    7020:	02001fc4 	movi	r8,127
    7024:	01c01f84 	movi	r7,126
    7028:	003e4006 	br	692c <__alt_mem_epcs_flash_controller_0+0xff80592c>
    702c:	00800074 	movhi	r2,1
    7030:	10ae3e04 	addi	r2,r2,-18184
    7034:	15000015 	stw	r20,0(r2)
    7038:	003f1106 	br	6c80 <__alt_mem_epcs_flash_controller_0+0xff805c80>
    703c:	00800044 	movi	r2,1
    7040:	002b883a 	mov	r21,zero
    7044:	003f1f06 	br	6cc4 <__alt_mem_epcs_flash_controller_0+0xff805cc4>
    7048:	81400204 	addi	r5,r16,8
    704c:	9009883a 	mov	r4,r18
    7050:	00087040 	call	8704 <_free_r>
    7054:	00800074 	movhi	r2,1
    7058:	10b52404 	addi	r2,r2,-11120
    705c:	10c00017 	ldw	r3,0(r2)
    7060:	003f2c06 	br	6d14 <__alt_mem_epcs_flash_controller_0+0xff805d14>
    7064:	00c05504 	movi	r3,340
    7068:	18800536 	bltu	r3,r2,7080 <_malloc_r+0x7cc>
    706c:	3804d3fa 	srli	r2,r7,15
    7070:	11401e04 	addi	r5,r2,120
    7074:	10c01dc4 	addi	r3,r2,119
    7078:	294b883a 	add	r5,r5,r5
    707c:	003f5606 	br	6dd8 <__alt_mem_epcs_flash_controller_0+0xff805dd8>
    7080:	00c15504 	movi	r3,1364
    7084:	18800536 	bltu	r3,r2,709c <_malloc_r+0x7e8>
    7088:	3804d4ba 	srli	r2,r7,18
    708c:	11401f44 	addi	r5,r2,125
    7090:	10c01f04 	addi	r3,r2,124
    7094:	294b883a 	add	r5,r5,r5
    7098:	003f4f06 	br	6dd8 <__alt_mem_epcs_flash_controller_0+0xff805dd8>
    709c:	01403f84 	movi	r5,254
    70a0:	00c01f84 	movi	r3,126
    70a4:	003f4c06 	br	6dd8 <__alt_mem_epcs_flash_controller_0+0xff805dd8>
    70a8:	98800117 	ldw	r2,4(r19)
    70ac:	003fa006 	br	6f30 <__alt_mem_epcs_flash_controller_0+0xff805f30>
    70b0:	8808d0fa 	srli	r4,r17,3
    70b4:	20800044 	addi	r2,r4,1
    70b8:	1085883a 	add	r2,r2,r2
    70bc:	003e9006 	br	6b00 <__alt_mem_epcs_flash_controller_0+0xff805b00>

000070c0 <memchr>:
    70c0:	208000cc 	andi	r2,r4,3
    70c4:	280f883a 	mov	r7,r5
    70c8:	10003426 	beq	r2,zero,719c <memchr+0xdc>
    70cc:	30bfffc4 	addi	r2,r6,-1
    70d0:	30001a26 	beq	r6,zero,713c <memchr+0x7c>
    70d4:	20c00003 	ldbu	r3,0(r4)
    70d8:	29803fcc 	andi	r6,r5,255
    70dc:	30c0051e 	bne	r6,r3,70f4 <memchr+0x34>
    70e0:	00001806 	br	7144 <memchr+0x84>
    70e4:	10001526 	beq	r2,zero,713c <memchr+0x7c>
    70e8:	20c00003 	ldbu	r3,0(r4)
    70ec:	10bfffc4 	addi	r2,r2,-1
    70f0:	30c01426 	beq	r6,r3,7144 <memchr+0x84>
    70f4:	21000044 	addi	r4,r4,1
    70f8:	20c000cc 	andi	r3,r4,3
    70fc:	183ff91e 	bne	r3,zero,70e4 <__alt_mem_epcs_flash_controller_0+0xff8060e4>
    7100:	020000c4 	movi	r8,3
    7104:	40801136 	bltu	r8,r2,714c <memchr+0x8c>
    7108:	10000c26 	beq	r2,zero,713c <memchr+0x7c>
    710c:	20c00003 	ldbu	r3,0(r4)
    7110:	29403fcc 	andi	r5,r5,255
    7114:	28c00b26 	beq	r5,r3,7144 <memchr+0x84>
    7118:	20c00044 	addi	r3,r4,1
    711c:	39803fcc 	andi	r6,r7,255
    7120:	2089883a 	add	r4,r4,r2
    7124:	00000306 	br	7134 <memchr+0x74>
    7128:	18c00044 	addi	r3,r3,1
    712c:	197fffc3 	ldbu	r5,-1(r3)
    7130:	31400526 	beq	r6,r5,7148 <memchr+0x88>
    7134:	1805883a 	mov	r2,r3
    7138:	20fffb1e 	bne	r4,r3,7128 <__alt_mem_epcs_flash_controller_0+0xff806128>
    713c:	0005883a 	mov	r2,zero
    7140:	f800283a 	ret
    7144:	2005883a 	mov	r2,r4
    7148:	f800283a 	ret
    714c:	28c03fcc 	andi	r3,r5,255
    7150:	1812923a 	slli	r9,r3,8
    7154:	02ffbff4 	movhi	r11,65279
    7158:	02a02074 	movhi	r10,32897
    715c:	48d2b03a 	or	r9,r9,r3
    7160:	4806943a 	slli	r3,r9,16
    7164:	5affbfc4 	addi	r11,r11,-257
    7168:	52a02004 	addi	r10,r10,-32640
    716c:	48d2b03a 	or	r9,r9,r3
    7170:	20c00017 	ldw	r3,0(r4)
    7174:	48c6f03a 	xor	r3,r9,r3
    7178:	1acd883a 	add	r6,r3,r11
    717c:	00c6303a 	nor	r3,zero,r3
    7180:	30c6703a 	and	r3,r6,r3
    7184:	1a86703a 	and	r3,r3,r10
    7188:	183fe01e 	bne	r3,zero,710c <__alt_mem_epcs_flash_controller_0+0xff80610c>
    718c:	10bfff04 	addi	r2,r2,-4
    7190:	21000104 	addi	r4,r4,4
    7194:	40bff636 	bltu	r8,r2,7170 <__alt_mem_epcs_flash_controller_0+0xff806170>
    7198:	003fdb06 	br	7108 <__alt_mem_epcs_flash_controller_0+0xff806108>
    719c:	3005883a 	mov	r2,r6
    71a0:	003fd706 	br	7100 <__alt_mem_epcs_flash_controller_0+0xff806100>

000071a4 <memcmp>:
    71a4:	01c000c4 	movi	r7,3
    71a8:	3980192e 	bgeu	r7,r6,7210 <memcmp+0x6c>
    71ac:	2144b03a 	or	r2,r4,r5
    71b0:	11c4703a 	and	r2,r2,r7
    71b4:	10000f26 	beq	r2,zero,71f4 <memcmp+0x50>
    71b8:	20800003 	ldbu	r2,0(r4)
    71bc:	28c00003 	ldbu	r3,0(r5)
    71c0:	10c0151e 	bne	r2,r3,7218 <memcmp+0x74>
    71c4:	31bfff84 	addi	r6,r6,-2
    71c8:	01ffffc4 	movi	r7,-1
    71cc:	00000406 	br	71e0 <memcmp+0x3c>
    71d0:	20800003 	ldbu	r2,0(r4)
    71d4:	28c00003 	ldbu	r3,0(r5)
    71d8:	31bfffc4 	addi	r6,r6,-1
    71dc:	10c00e1e 	bne	r2,r3,7218 <memcmp+0x74>
    71e0:	21000044 	addi	r4,r4,1
    71e4:	29400044 	addi	r5,r5,1
    71e8:	31fff91e 	bne	r6,r7,71d0 <__alt_mem_epcs_flash_controller_0+0xff8061d0>
    71ec:	0005883a 	mov	r2,zero
    71f0:	f800283a 	ret
    71f4:	20c00017 	ldw	r3,0(r4)
    71f8:	28800017 	ldw	r2,0(r5)
    71fc:	18bfee1e 	bne	r3,r2,71b8 <__alt_mem_epcs_flash_controller_0+0xff8061b8>
    7200:	31bfff04 	addi	r6,r6,-4
    7204:	21000104 	addi	r4,r4,4
    7208:	29400104 	addi	r5,r5,4
    720c:	39bff936 	bltu	r7,r6,71f4 <__alt_mem_epcs_flash_controller_0+0xff8061f4>
    7210:	303fe91e 	bne	r6,zero,71b8 <__alt_mem_epcs_flash_controller_0+0xff8061b8>
    7214:	003ff506 	br	71ec <__alt_mem_epcs_flash_controller_0+0xff8061ec>
    7218:	10c5c83a 	sub	r2,r2,r3
    721c:	f800283a 	ret

00007220 <memcpy>:
    7220:	defffd04 	addi	sp,sp,-12
    7224:	dfc00215 	stw	ra,8(sp)
    7228:	dc400115 	stw	r17,4(sp)
    722c:	dc000015 	stw	r16,0(sp)
    7230:	00c003c4 	movi	r3,15
    7234:	2005883a 	mov	r2,r4
    7238:	1980452e 	bgeu	r3,r6,7350 <memcpy+0x130>
    723c:	2906b03a 	or	r3,r5,r4
    7240:	18c000cc 	andi	r3,r3,3
    7244:	1800441e 	bne	r3,zero,7358 <memcpy+0x138>
    7248:	347ffc04 	addi	r17,r6,-16
    724c:	8822d13a 	srli	r17,r17,4
    7250:	28c00104 	addi	r3,r5,4
    7254:	23400104 	addi	r13,r4,4
    7258:	8820913a 	slli	r16,r17,4
    725c:	2b000204 	addi	r12,r5,8
    7260:	22c00204 	addi	r11,r4,8
    7264:	84000504 	addi	r16,r16,20
    7268:	2a800304 	addi	r10,r5,12
    726c:	22400304 	addi	r9,r4,12
    7270:	2c21883a 	add	r16,r5,r16
    7274:	2811883a 	mov	r8,r5
    7278:	200f883a 	mov	r7,r4
    727c:	41000017 	ldw	r4,0(r8)
    7280:	1fc00017 	ldw	ra,0(r3)
    7284:	63c00017 	ldw	r15,0(r12)
    7288:	39000015 	stw	r4,0(r7)
    728c:	53800017 	ldw	r14,0(r10)
    7290:	6fc00015 	stw	ra,0(r13)
    7294:	5bc00015 	stw	r15,0(r11)
    7298:	4b800015 	stw	r14,0(r9)
    729c:	18c00404 	addi	r3,r3,16
    72a0:	39c00404 	addi	r7,r7,16
    72a4:	42000404 	addi	r8,r8,16
    72a8:	6b400404 	addi	r13,r13,16
    72ac:	63000404 	addi	r12,r12,16
    72b0:	5ac00404 	addi	r11,r11,16
    72b4:	52800404 	addi	r10,r10,16
    72b8:	4a400404 	addi	r9,r9,16
    72bc:	1c3fef1e 	bne	r3,r16,727c <__alt_mem_epcs_flash_controller_0+0xff80627c>
    72c0:	89c00044 	addi	r7,r17,1
    72c4:	380e913a 	slli	r7,r7,4
    72c8:	310003cc 	andi	r4,r6,15
    72cc:	02c000c4 	movi	r11,3
    72d0:	11c7883a 	add	r3,r2,r7
    72d4:	29cb883a 	add	r5,r5,r7
    72d8:	5900212e 	bgeu	r11,r4,7360 <memcpy+0x140>
    72dc:	1813883a 	mov	r9,r3
    72e0:	2811883a 	mov	r8,r5
    72e4:	200f883a 	mov	r7,r4
    72e8:	42800017 	ldw	r10,0(r8)
    72ec:	4a400104 	addi	r9,r9,4
    72f0:	39ffff04 	addi	r7,r7,-4
    72f4:	4abfff15 	stw	r10,-4(r9)
    72f8:	42000104 	addi	r8,r8,4
    72fc:	59fffa36 	bltu	r11,r7,72e8 <__alt_mem_epcs_flash_controller_0+0xff8062e8>
    7300:	213fff04 	addi	r4,r4,-4
    7304:	2008d0ba 	srli	r4,r4,2
    7308:	318000cc 	andi	r6,r6,3
    730c:	21000044 	addi	r4,r4,1
    7310:	2109883a 	add	r4,r4,r4
    7314:	2109883a 	add	r4,r4,r4
    7318:	1907883a 	add	r3,r3,r4
    731c:	290b883a 	add	r5,r5,r4
    7320:	30000626 	beq	r6,zero,733c <memcpy+0x11c>
    7324:	198d883a 	add	r6,r3,r6
    7328:	29c00003 	ldbu	r7,0(r5)
    732c:	18c00044 	addi	r3,r3,1
    7330:	29400044 	addi	r5,r5,1
    7334:	19ffffc5 	stb	r7,-1(r3)
    7338:	19bffb1e 	bne	r3,r6,7328 <__alt_mem_epcs_flash_controller_0+0xff806328>
    733c:	dfc00217 	ldw	ra,8(sp)
    7340:	dc400117 	ldw	r17,4(sp)
    7344:	dc000017 	ldw	r16,0(sp)
    7348:	dec00304 	addi	sp,sp,12
    734c:	f800283a 	ret
    7350:	2007883a 	mov	r3,r4
    7354:	003ff206 	br	7320 <__alt_mem_epcs_flash_controller_0+0xff806320>
    7358:	2007883a 	mov	r3,r4
    735c:	003ff106 	br	7324 <__alt_mem_epcs_flash_controller_0+0xff806324>
    7360:	200d883a 	mov	r6,r4
    7364:	003fee06 	br	7320 <__alt_mem_epcs_flash_controller_0+0xff806320>

00007368 <memmove>:
    7368:	2005883a 	mov	r2,r4
    736c:	29000b2e 	bgeu	r5,r4,739c <memmove+0x34>
    7370:	298f883a 	add	r7,r5,r6
    7374:	21c0092e 	bgeu	r4,r7,739c <memmove+0x34>
    7378:	2187883a 	add	r3,r4,r6
    737c:	198bc83a 	sub	r5,r3,r6
    7380:	30004826 	beq	r6,zero,74a4 <memmove+0x13c>
    7384:	39ffffc4 	addi	r7,r7,-1
    7388:	39000003 	ldbu	r4,0(r7)
    738c:	18ffffc4 	addi	r3,r3,-1
    7390:	19000005 	stb	r4,0(r3)
    7394:	28fffb1e 	bne	r5,r3,7384 <__alt_mem_epcs_flash_controller_0+0xff806384>
    7398:	f800283a 	ret
    739c:	00c003c4 	movi	r3,15
    73a0:	1980412e 	bgeu	r3,r6,74a8 <memmove+0x140>
    73a4:	2886b03a 	or	r3,r5,r2
    73a8:	18c000cc 	andi	r3,r3,3
    73ac:	1800401e 	bne	r3,zero,74b0 <memmove+0x148>
    73b0:	33fffc04 	addi	r15,r6,-16
    73b4:	781ed13a 	srli	r15,r15,4
    73b8:	28c00104 	addi	r3,r5,4
    73bc:	13400104 	addi	r13,r2,4
    73c0:	781c913a 	slli	r14,r15,4
    73c4:	2b000204 	addi	r12,r5,8
    73c8:	12c00204 	addi	r11,r2,8
    73cc:	73800504 	addi	r14,r14,20
    73d0:	2a800304 	addi	r10,r5,12
    73d4:	12400304 	addi	r9,r2,12
    73d8:	2b9d883a 	add	r14,r5,r14
    73dc:	2811883a 	mov	r8,r5
    73e0:	100f883a 	mov	r7,r2
    73e4:	41000017 	ldw	r4,0(r8)
    73e8:	39c00404 	addi	r7,r7,16
    73ec:	18c00404 	addi	r3,r3,16
    73f0:	393ffc15 	stw	r4,-16(r7)
    73f4:	193ffc17 	ldw	r4,-16(r3)
    73f8:	6b400404 	addi	r13,r13,16
    73fc:	5ac00404 	addi	r11,r11,16
    7400:	693ffc15 	stw	r4,-16(r13)
    7404:	61000017 	ldw	r4,0(r12)
    7408:	4a400404 	addi	r9,r9,16
    740c:	42000404 	addi	r8,r8,16
    7410:	593ffc15 	stw	r4,-16(r11)
    7414:	51000017 	ldw	r4,0(r10)
    7418:	63000404 	addi	r12,r12,16
    741c:	52800404 	addi	r10,r10,16
    7420:	493ffc15 	stw	r4,-16(r9)
    7424:	1bbfef1e 	bne	r3,r14,73e4 <__alt_mem_epcs_flash_controller_0+0xff8063e4>
    7428:	79000044 	addi	r4,r15,1
    742c:	2008913a 	slli	r4,r4,4
    7430:	328003cc 	andi	r10,r6,15
    7434:	02c000c4 	movi	r11,3
    7438:	1107883a 	add	r3,r2,r4
    743c:	290b883a 	add	r5,r5,r4
    7440:	5a801e2e 	bgeu	r11,r10,74bc <memmove+0x154>
    7444:	1813883a 	mov	r9,r3
    7448:	2811883a 	mov	r8,r5
    744c:	500f883a 	mov	r7,r10
    7450:	41000017 	ldw	r4,0(r8)
    7454:	4a400104 	addi	r9,r9,4
    7458:	39ffff04 	addi	r7,r7,-4
    745c:	493fff15 	stw	r4,-4(r9)
    7460:	42000104 	addi	r8,r8,4
    7464:	59fffa36 	bltu	r11,r7,7450 <__alt_mem_epcs_flash_controller_0+0xff806450>
    7468:	513fff04 	addi	r4,r10,-4
    746c:	2008d0ba 	srli	r4,r4,2
    7470:	318000cc 	andi	r6,r6,3
    7474:	21000044 	addi	r4,r4,1
    7478:	2109883a 	add	r4,r4,r4
    747c:	2109883a 	add	r4,r4,r4
    7480:	1907883a 	add	r3,r3,r4
    7484:	290b883a 	add	r5,r5,r4
    7488:	30000b26 	beq	r6,zero,74b8 <memmove+0x150>
    748c:	198d883a 	add	r6,r3,r6
    7490:	29c00003 	ldbu	r7,0(r5)
    7494:	18c00044 	addi	r3,r3,1
    7498:	29400044 	addi	r5,r5,1
    749c:	19ffffc5 	stb	r7,-1(r3)
    74a0:	19bffb1e 	bne	r3,r6,7490 <__alt_mem_epcs_flash_controller_0+0xff806490>
    74a4:	f800283a 	ret
    74a8:	1007883a 	mov	r3,r2
    74ac:	003ff606 	br	7488 <__alt_mem_epcs_flash_controller_0+0xff806488>
    74b0:	1007883a 	mov	r3,r2
    74b4:	003ff506 	br	748c <__alt_mem_epcs_flash_controller_0+0xff80648c>
    74b8:	f800283a 	ret
    74bc:	500d883a 	mov	r6,r10
    74c0:	003ff106 	br	7488 <__alt_mem_epcs_flash_controller_0+0xff806488>

000074c4 <_realloc_r>:
    74c4:	defff604 	addi	sp,sp,-40
    74c8:	dc800215 	stw	r18,8(sp)
    74cc:	dfc00915 	stw	ra,36(sp)
    74d0:	df000815 	stw	fp,32(sp)
    74d4:	ddc00715 	stw	r23,28(sp)
    74d8:	dd800615 	stw	r22,24(sp)
    74dc:	dd400515 	stw	r21,20(sp)
    74e0:	dd000415 	stw	r20,16(sp)
    74e4:	dcc00315 	stw	r19,12(sp)
    74e8:	dc400115 	stw	r17,4(sp)
    74ec:	dc000015 	stw	r16,0(sp)
    74f0:	3025883a 	mov	r18,r6
    74f4:	2800b726 	beq	r5,zero,77d4 <_realloc_r+0x310>
    74f8:	282b883a 	mov	r21,r5
    74fc:	2029883a 	mov	r20,r4
    7500:	00097fc0 	call	97fc <__malloc_lock>
    7504:	a8bfff17 	ldw	r2,-4(r21)
    7508:	043fff04 	movi	r16,-4
    750c:	90c002c4 	addi	r3,r18,11
    7510:	01000584 	movi	r4,22
    7514:	acfffe04 	addi	r19,r21,-8
    7518:	1420703a 	and	r16,r2,r16
    751c:	20c0332e 	bgeu	r4,r3,75ec <_realloc_r+0x128>
    7520:	047ffe04 	movi	r17,-8
    7524:	1c62703a 	and	r17,r3,r17
    7528:	8807883a 	mov	r3,r17
    752c:	88005816 	blt	r17,zero,7690 <_realloc_r+0x1cc>
    7530:	8c805736 	bltu	r17,r18,7690 <_realloc_r+0x1cc>
    7534:	80c0300e 	bge	r16,r3,75f8 <_realloc_r+0x134>
    7538:	07000074 	movhi	fp,1
    753c:	e72d2f04 	addi	fp,fp,-19268
    7540:	e1c00217 	ldw	r7,8(fp)
    7544:	9c09883a 	add	r4,r19,r16
    7548:	22000117 	ldw	r8,4(r4)
    754c:	21c06326 	beq	r4,r7,76dc <_realloc_r+0x218>
    7550:	017fff84 	movi	r5,-2
    7554:	414a703a 	and	r5,r8,r5
    7558:	214b883a 	add	r5,r4,r5
    755c:	29800117 	ldw	r6,4(r5)
    7560:	3180004c 	andi	r6,r6,1
    7564:	30003f26 	beq	r6,zero,7664 <_realloc_r+0x1a0>
    7568:	1080004c 	andi	r2,r2,1
    756c:	10008326 	beq	r2,zero,777c <_realloc_r+0x2b8>
    7570:	900b883a 	mov	r5,r18
    7574:	a009883a 	mov	r4,r20
    7578:	00068b40 	call	68b4 <_malloc_r>
    757c:	1025883a 	mov	r18,r2
    7580:	10011e26 	beq	r2,zero,79fc <_realloc_r+0x538>
    7584:	a93fff17 	ldw	r4,-4(r21)
    7588:	10fffe04 	addi	r3,r2,-8
    758c:	00bfff84 	movi	r2,-2
    7590:	2084703a 	and	r2,r4,r2
    7594:	9885883a 	add	r2,r19,r2
    7598:	1880ee26 	beq	r3,r2,7954 <_realloc_r+0x490>
    759c:	81bfff04 	addi	r6,r16,-4
    75a0:	00800904 	movi	r2,36
    75a4:	1180b836 	bltu	r2,r6,7888 <_realloc_r+0x3c4>
    75a8:	00c004c4 	movi	r3,19
    75ac:	19809636 	bltu	r3,r6,7808 <_realloc_r+0x344>
    75b0:	9005883a 	mov	r2,r18
    75b4:	a807883a 	mov	r3,r21
    75b8:	19000017 	ldw	r4,0(r3)
    75bc:	11000015 	stw	r4,0(r2)
    75c0:	19000117 	ldw	r4,4(r3)
    75c4:	11000115 	stw	r4,4(r2)
    75c8:	18c00217 	ldw	r3,8(r3)
    75cc:	10c00215 	stw	r3,8(r2)
    75d0:	a80b883a 	mov	r5,r21
    75d4:	a009883a 	mov	r4,r20
    75d8:	00087040 	call	8704 <_free_r>
    75dc:	a009883a 	mov	r4,r20
    75e0:	00098200 	call	9820 <__malloc_unlock>
    75e4:	9005883a 	mov	r2,r18
    75e8:	00001206 	br	7634 <_realloc_r+0x170>
    75ec:	00c00404 	movi	r3,16
    75f0:	1823883a 	mov	r17,r3
    75f4:	003fce06 	br	7530 <__alt_mem_epcs_flash_controller_0+0xff806530>
    75f8:	a825883a 	mov	r18,r21
    75fc:	8445c83a 	sub	r2,r16,r17
    7600:	00c003c4 	movi	r3,15
    7604:	18802636 	bltu	r3,r2,76a0 <_realloc_r+0x1dc>
    7608:	99800117 	ldw	r6,4(r19)
    760c:	9c07883a 	add	r3,r19,r16
    7610:	3180004c 	andi	r6,r6,1
    7614:	3420b03a 	or	r16,r6,r16
    7618:	9c000115 	stw	r16,4(r19)
    761c:	18800117 	ldw	r2,4(r3)
    7620:	10800054 	ori	r2,r2,1
    7624:	18800115 	stw	r2,4(r3)
    7628:	a009883a 	mov	r4,r20
    762c:	00098200 	call	9820 <__malloc_unlock>
    7630:	9005883a 	mov	r2,r18
    7634:	dfc00917 	ldw	ra,36(sp)
    7638:	df000817 	ldw	fp,32(sp)
    763c:	ddc00717 	ldw	r23,28(sp)
    7640:	dd800617 	ldw	r22,24(sp)
    7644:	dd400517 	ldw	r21,20(sp)
    7648:	dd000417 	ldw	r20,16(sp)
    764c:	dcc00317 	ldw	r19,12(sp)
    7650:	dc800217 	ldw	r18,8(sp)
    7654:	dc400117 	ldw	r17,4(sp)
    7658:	dc000017 	ldw	r16,0(sp)
    765c:	dec00a04 	addi	sp,sp,40
    7660:	f800283a 	ret
    7664:	017fff04 	movi	r5,-4
    7668:	414a703a 	and	r5,r8,r5
    766c:	814d883a 	add	r6,r16,r5
    7670:	30c01f16 	blt	r6,r3,76f0 <_realloc_r+0x22c>
    7674:	20800317 	ldw	r2,12(r4)
    7678:	20c00217 	ldw	r3,8(r4)
    767c:	a825883a 	mov	r18,r21
    7680:	3021883a 	mov	r16,r6
    7684:	18800315 	stw	r2,12(r3)
    7688:	10c00215 	stw	r3,8(r2)
    768c:	003fdb06 	br	75fc <__alt_mem_epcs_flash_controller_0+0xff8065fc>
    7690:	00800304 	movi	r2,12
    7694:	a0800015 	stw	r2,0(r20)
    7698:	0005883a 	mov	r2,zero
    769c:	003fe506 	br	7634 <__alt_mem_epcs_flash_controller_0+0xff806634>
    76a0:	98c00117 	ldw	r3,4(r19)
    76a4:	9c4b883a 	add	r5,r19,r17
    76a8:	11000054 	ori	r4,r2,1
    76ac:	18c0004c 	andi	r3,r3,1
    76b0:	1c62b03a 	or	r17,r3,r17
    76b4:	9c400115 	stw	r17,4(r19)
    76b8:	29000115 	stw	r4,4(r5)
    76bc:	2885883a 	add	r2,r5,r2
    76c0:	10c00117 	ldw	r3,4(r2)
    76c4:	29400204 	addi	r5,r5,8
    76c8:	a009883a 	mov	r4,r20
    76cc:	18c00054 	ori	r3,r3,1
    76d0:	10c00115 	stw	r3,4(r2)
    76d4:	00087040 	call	8704 <_free_r>
    76d8:	003fd306 	br	7628 <__alt_mem_epcs_flash_controller_0+0xff806628>
    76dc:	017fff04 	movi	r5,-4
    76e0:	414a703a 	and	r5,r8,r5
    76e4:	89800404 	addi	r6,r17,16
    76e8:	8151883a 	add	r8,r16,r5
    76ec:	4180590e 	bge	r8,r6,7854 <_realloc_r+0x390>
    76f0:	1080004c 	andi	r2,r2,1
    76f4:	103f9e1e 	bne	r2,zero,7570 <__alt_mem_epcs_flash_controller_0+0xff806570>
    76f8:	adbffe17 	ldw	r22,-8(r21)
    76fc:	00bfff04 	movi	r2,-4
    7700:	9dadc83a 	sub	r22,r19,r22
    7704:	b1800117 	ldw	r6,4(r22)
    7708:	3084703a 	and	r2,r6,r2
    770c:	20002026 	beq	r4,zero,7790 <_realloc_r+0x2cc>
    7710:	80af883a 	add	r23,r16,r2
    7714:	b96f883a 	add	r23,r23,r5
    7718:	21c05f26 	beq	r4,r7,7898 <_realloc_r+0x3d4>
    771c:	b8c01c16 	blt	r23,r3,7790 <_realloc_r+0x2cc>
    7720:	20800317 	ldw	r2,12(r4)
    7724:	20c00217 	ldw	r3,8(r4)
    7728:	81bfff04 	addi	r6,r16,-4
    772c:	01000904 	movi	r4,36
    7730:	18800315 	stw	r2,12(r3)
    7734:	10c00215 	stw	r3,8(r2)
    7738:	b0c00217 	ldw	r3,8(r22)
    773c:	b0800317 	ldw	r2,12(r22)
    7740:	b4800204 	addi	r18,r22,8
    7744:	18800315 	stw	r2,12(r3)
    7748:	10c00215 	stw	r3,8(r2)
    774c:	21801b36 	bltu	r4,r6,77bc <_realloc_r+0x2f8>
    7750:	008004c4 	movi	r2,19
    7754:	1180352e 	bgeu	r2,r6,782c <_realloc_r+0x368>
    7758:	a8800017 	ldw	r2,0(r21)
    775c:	b0800215 	stw	r2,8(r22)
    7760:	a8800117 	ldw	r2,4(r21)
    7764:	b0800315 	stw	r2,12(r22)
    7768:	008006c4 	movi	r2,27
    776c:	11807f36 	bltu	r2,r6,796c <_realloc_r+0x4a8>
    7770:	b0800404 	addi	r2,r22,16
    7774:	ad400204 	addi	r21,r21,8
    7778:	00002d06 	br	7830 <_realloc_r+0x36c>
    777c:	adbffe17 	ldw	r22,-8(r21)
    7780:	00bfff04 	movi	r2,-4
    7784:	9dadc83a 	sub	r22,r19,r22
    7788:	b1000117 	ldw	r4,4(r22)
    778c:	2084703a 	and	r2,r4,r2
    7790:	b03f7726 	beq	r22,zero,7570 <__alt_mem_epcs_flash_controller_0+0xff806570>
    7794:	80af883a 	add	r23,r16,r2
    7798:	b8ff7516 	blt	r23,r3,7570 <__alt_mem_epcs_flash_controller_0+0xff806570>
    779c:	b0800317 	ldw	r2,12(r22)
    77a0:	b0c00217 	ldw	r3,8(r22)
    77a4:	81bfff04 	addi	r6,r16,-4
    77a8:	01000904 	movi	r4,36
    77ac:	18800315 	stw	r2,12(r3)
    77b0:	10c00215 	stw	r3,8(r2)
    77b4:	b4800204 	addi	r18,r22,8
    77b8:	21bfe52e 	bgeu	r4,r6,7750 <__alt_mem_epcs_flash_controller_0+0xff806750>
    77bc:	a80b883a 	mov	r5,r21
    77c0:	9009883a 	mov	r4,r18
    77c4:	00073680 	call	7368 <memmove>
    77c8:	b821883a 	mov	r16,r23
    77cc:	b027883a 	mov	r19,r22
    77d0:	003f8a06 	br	75fc <__alt_mem_epcs_flash_controller_0+0xff8065fc>
    77d4:	300b883a 	mov	r5,r6
    77d8:	dfc00917 	ldw	ra,36(sp)
    77dc:	df000817 	ldw	fp,32(sp)
    77e0:	ddc00717 	ldw	r23,28(sp)
    77e4:	dd800617 	ldw	r22,24(sp)
    77e8:	dd400517 	ldw	r21,20(sp)
    77ec:	dd000417 	ldw	r20,16(sp)
    77f0:	dcc00317 	ldw	r19,12(sp)
    77f4:	dc800217 	ldw	r18,8(sp)
    77f8:	dc400117 	ldw	r17,4(sp)
    77fc:	dc000017 	ldw	r16,0(sp)
    7800:	dec00a04 	addi	sp,sp,40
    7804:	00068b41 	jmpi	68b4 <_malloc_r>
    7808:	a8c00017 	ldw	r3,0(r21)
    780c:	90c00015 	stw	r3,0(r18)
    7810:	a8c00117 	ldw	r3,4(r21)
    7814:	90c00115 	stw	r3,4(r18)
    7818:	00c006c4 	movi	r3,27
    781c:	19804536 	bltu	r3,r6,7934 <_realloc_r+0x470>
    7820:	90800204 	addi	r2,r18,8
    7824:	a8c00204 	addi	r3,r21,8
    7828:	003f6306 	br	75b8 <__alt_mem_epcs_flash_controller_0+0xff8065b8>
    782c:	9005883a 	mov	r2,r18
    7830:	a8c00017 	ldw	r3,0(r21)
    7834:	b821883a 	mov	r16,r23
    7838:	b027883a 	mov	r19,r22
    783c:	10c00015 	stw	r3,0(r2)
    7840:	a8c00117 	ldw	r3,4(r21)
    7844:	10c00115 	stw	r3,4(r2)
    7848:	a8c00217 	ldw	r3,8(r21)
    784c:	10c00215 	stw	r3,8(r2)
    7850:	003f6a06 	br	75fc <__alt_mem_epcs_flash_controller_0+0xff8065fc>
    7854:	9c67883a 	add	r19,r19,r17
    7858:	4445c83a 	sub	r2,r8,r17
    785c:	e4c00215 	stw	r19,8(fp)
    7860:	10800054 	ori	r2,r2,1
    7864:	98800115 	stw	r2,4(r19)
    7868:	a8bfff17 	ldw	r2,-4(r21)
    786c:	a009883a 	mov	r4,r20
    7870:	1080004c 	andi	r2,r2,1
    7874:	1462b03a 	or	r17,r2,r17
    7878:	ac7fff15 	stw	r17,-4(r21)
    787c:	00098200 	call	9820 <__malloc_unlock>
    7880:	a805883a 	mov	r2,r21
    7884:	003f6b06 	br	7634 <__alt_mem_epcs_flash_controller_0+0xff806634>
    7888:	a80b883a 	mov	r5,r21
    788c:	9009883a 	mov	r4,r18
    7890:	00073680 	call	7368 <memmove>
    7894:	003f4e06 	br	75d0 <__alt_mem_epcs_flash_controller_0+0xff8065d0>
    7898:	89000404 	addi	r4,r17,16
    789c:	b93fbc16 	blt	r23,r4,7790 <__alt_mem_epcs_flash_controller_0+0xff806790>
    78a0:	b0800317 	ldw	r2,12(r22)
    78a4:	b0c00217 	ldw	r3,8(r22)
    78a8:	81bfff04 	addi	r6,r16,-4
    78ac:	01000904 	movi	r4,36
    78b0:	18800315 	stw	r2,12(r3)
    78b4:	10c00215 	stw	r3,8(r2)
    78b8:	b4800204 	addi	r18,r22,8
    78bc:	21804336 	bltu	r4,r6,79cc <_realloc_r+0x508>
    78c0:	008004c4 	movi	r2,19
    78c4:	11803f2e 	bgeu	r2,r6,79c4 <_realloc_r+0x500>
    78c8:	a8800017 	ldw	r2,0(r21)
    78cc:	b0800215 	stw	r2,8(r22)
    78d0:	a8800117 	ldw	r2,4(r21)
    78d4:	b0800315 	stw	r2,12(r22)
    78d8:	008006c4 	movi	r2,27
    78dc:	11803f36 	bltu	r2,r6,79dc <_realloc_r+0x518>
    78e0:	b0800404 	addi	r2,r22,16
    78e4:	ad400204 	addi	r21,r21,8
    78e8:	a8c00017 	ldw	r3,0(r21)
    78ec:	10c00015 	stw	r3,0(r2)
    78f0:	a8c00117 	ldw	r3,4(r21)
    78f4:	10c00115 	stw	r3,4(r2)
    78f8:	a8c00217 	ldw	r3,8(r21)
    78fc:	10c00215 	stw	r3,8(r2)
    7900:	b447883a 	add	r3,r22,r17
    7904:	bc45c83a 	sub	r2,r23,r17
    7908:	e0c00215 	stw	r3,8(fp)
    790c:	10800054 	ori	r2,r2,1
    7910:	18800115 	stw	r2,4(r3)
    7914:	b0800117 	ldw	r2,4(r22)
    7918:	a009883a 	mov	r4,r20
    791c:	1080004c 	andi	r2,r2,1
    7920:	1462b03a 	or	r17,r2,r17
    7924:	b4400115 	stw	r17,4(r22)
    7928:	00098200 	call	9820 <__malloc_unlock>
    792c:	9005883a 	mov	r2,r18
    7930:	003f4006 	br	7634 <__alt_mem_epcs_flash_controller_0+0xff806634>
    7934:	a8c00217 	ldw	r3,8(r21)
    7938:	90c00215 	stw	r3,8(r18)
    793c:	a8c00317 	ldw	r3,12(r21)
    7940:	90c00315 	stw	r3,12(r18)
    7944:	30801126 	beq	r6,r2,798c <_realloc_r+0x4c8>
    7948:	90800404 	addi	r2,r18,16
    794c:	a8c00404 	addi	r3,r21,16
    7950:	003f1906 	br	75b8 <__alt_mem_epcs_flash_controller_0+0xff8065b8>
    7954:	90ffff17 	ldw	r3,-4(r18)
    7958:	00bfff04 	movi	r2,-4
    795c:	a825883a 	mov	r18,r21
    7960:	1884703a 	and	r2,r3,r2
    7964:	80a1883a 	add	r16,r16,r2
    7968:	003f2406 	br	75fc <__alt_mem_epcs_flash_controller_0+0xff8065fc>
    796c:	a8800217 	ldw	r2,8(r21)
    7970:	b0800415 	stw	r2,16(r22)
    7974:	a8800317 	ldw	r2,12(r21)
    7978:	b0800515 	stw	r2,20(r22)
    797c:	31000a26 	beq	r6,r4,79a8 <_realloc_r+0x4e4>
    7980:	b0800604 	addi	r2,r22,24
    7984:	ad400404 	addi	r21,r21,16
    7988:	003fa906 	br	7830 <__alt_mem_epcs_flash_controller_0+0xff806830>
    798c:	a9000417 	ldw	r4,16(r21)
    7990:	90800604 	addi	r2,r18,24
    7994:	a8c00604 	addi	r3,r21,24
    7998:	91000415 	stw	r4,16(r18)
    799c:	a9000517 	ldw	r4,20(r21)
    79a0:	91000515 	stw	r4,20(r18)
    79a4:	003f0406 	br	75b8 <__alt_mem_epcs_flash_controller_0+0xff8065b8>
    79a8:	a8c00417 	ldw	r3,16(r21)
    79ac:	ad400604 	addi	r21,r21,24
    79b0:	b0800804 	addi	r2,r22,32
    79b4:	b0c00615 	stw	r3,24(r22)
    79b8:	a8ffff17 	ldw	r3,-4(r21)
    79bc:	b0c00715 	stw	r3,28(r22)
    79c0:	003f9b06 	br	7830 <__alt_mem_epcs_flash_controller_0+0xff806830>
    79c4:	9005883a 	mov	r2,r18
    79c8:	003fc706 	br	78e8 <__alt_mem_epcs_flash_controller_0+0xff8068e8>
    79cc:	a80b883a 	mov	r5,r21
    79d0:	9009883a 	mov	r4,r18
    79d4:	00073680 	call	7368 <memmove>
    79d8:	003fc906 	br	7900 <__alt_mem_epcs_flash_controller_0+0xff806900>
    79dc:	a8800217 	ldw	r2,8(r21)
    79e0:	b0800415 	stw	r2,16(r22)
    79e4:	a8800317 	ldw	r2,12(r21)
    79e8:	b0800515 	stw	r2,20(r22)
    79ec:	31000726 	beq	r6,r4,7a0c <_realloc_r+0x548>
    79f0:	b0800604 	addi	r2,r22,24
    79f4:	ad400404 	addi	r21,r21,16
    79f8:	003fbb06 	br	78e8 <__alt_mem_epcs_flash_controller_0+0xff8068e8>
    79fc:	a009883a 	mov	r4,r20
    7a00:	00098200 	call	9820 <__malloc_unlock>
    7a04:	0005883a 	mov	r2,zero
    7a08:	003f0a06 	br	7634 <__alt_mem_epcs_flash_controller_0+0xff806634>
    7a0c:	a8c00417 	ldw	r3,16(r21)
    7a10:	ad400604 	addi	r21,r21,24
    7a14:	b0800804 	addi	r2,r22,32
    7a18:	b0c00615 	stw	r3,24(r22)
    7a1c:	a8ffff17 	ldw	r3,-4(r21)
    7a20:	b0c00715 	stw	r3,28(r22)
    7a24:	003fb006 	br	78e8 <__alt_mem_epcs_flash_controller_0+0xff8068e8>

00007a28 <__srget_r>:
    7a28:	defffd04 	addi	sp,sp,-12
    7a2c:	dc400115 	stw	r17,4(sp)
    7a30:	dc000015 	stw	r16,0(sp)
    7a34:	dfc00215 	stw	ra,8(sp)
    7a38:	2023883a 	mov	r17,r4
    7a3c:	2821883a 	mov	r16,r5
    7a40:	20000226 	beq	r4,zero,7a4c <__srget_r+0x24>
    7a44:	20800e17 	ldw	r2,56(r4)
    7a48:	10001026 	beq	r2,zero,7a8c <__srget_r+0x64>
    7a4c:	800b883a 	mov	r5,r16
    7a50:	8809883a 	mov	r4,r17
    7a54:	0008e9c0 	call	8e9c <__srefill_r>
    7a58:	10000e1e 	bne	r2,zero,7a94 <__srget_r+0x6c>
    7a5c:	80c00017 	ldw	r3,0(r16)
    7a60:	80800117 	ldw	r2,4(r16)
    7a64:	19000044 	addi	r4,r3,1
    7a68:	10bfffc4 	addi	r2,r2,-1
    7a6c:	80800115 	stw	r2,4(r16)
    7a70:	81000015 	stw	r4,0(r16)
    7a74:	18800003 	ldbu	r2,0(r3)
    7a78:	dfc00217 	ldw	ra,8(sp)
    7a7c:	dc400117 	ldw	r17,4(sp)
    7a80:	dc000017 	ldw	r16,0(sp)
    7a84:	dec00304 	addi	sp,sp,12
    7a88:	f800283a 	ret
    7a8c:	00085900 	call	8590 <__sinit>
    7a90:	003fee06 	br	7a4c <__alt_mem_epcs_flash_controller_0+0xff806a4c>
    7a94:	00bfffc4 	movi	r2,-1
    7a98:	003ff706 	br	7a78 <__alt_mem_epcs_flash_controller_0+0xff806a78>

00007a9c <__srget>:
    7a9c:	00800074 	movhi	r2,1
    7aa0:	10ae3d04 	addi	r2,r2,-18188
    7aa4:	200b883a 	mov	r5,r4
    7aa8:	11000017 	ldw	r4,0(r2)
    7aac:	0007a281 	jmpi	7a28 <__srget_r>

00007ab0 <_sbrk_r>:
    7ab0:	defffd04 	addi	sp,sp,-12
    7ab4:	dc000015 	stw	r16,0(sp)
    7ab8:	04000074 	movhi	r16,1
    7abc:	dc400115 	stw	r17,4(sp)
    7ac0:	84352004 	addi	r16,r16,-11136
    7ac4:	2023883a 	mov	r17,r4
    7ac8:	2809883a 	mov	r4,r5
    7acc:	dfc00215 	stw	ra,8(sp)
    7ad0:	80000015 	stw	zero,0(r16)
    7ad4:	00099840 	call	9984 <sbrk>
    7ad8:	00ffffc4 	movi	r3,-1
    7adc:	10c00526 	beq	r2,r3,7af4 <_sbrk_r+0x44>
    7ae0:	dfc00217 	ldw	ra,8(sp)
    7ae4:	dc400117 	ldw	r17,4(sp)
    7ae8:	dc000017 	ldw	r16,0(sp)
    7aec:	dec00304 	addi	sp,sp,12
    7af0:	f800283a 	ret
    7af4:	80c00017 	ldw	r3,0(r16)
    7af8:	183ff926 	beq	r3,zero,7ae0 <__alt_mem_epcs_flash_controller_0+0xff806ae0>
    7afc:	88c00015 	stw	r3,0(r17)
    7b00:	003ff706 	br	7ae0 <__alt_mem_epcs_flash_controller_0+0xff806ae0>

00007b04 <strlen>:
    7b04:	208000cc 	andi	r2,r4,3
    7b08:	10002026 	beq	r2,zero,7b8c <strlen+0x88>
    7b0c:	20800007 	ldb	r2,0(r4)
    7b10:	10002026 	beq	r2,zero,7b94 <strlen+0x90>
    7b14:	2005883a 	mov	r2,r4
    7b18:	00000206 	br	7b24 <strlen+0x20>
    7b1c:	10c00007 	ldb	r3,0(r2)
    7b20:	18001826 	beq	r3,zero,7b84 <strlen+0x80>
    7b24:	10800044 	addi	r2,r2,1
    7b28:	10c000cc 	andi	r3,r2,3
    7b2c:	183ffb1e 	bne	r3,zero,7b1c <__alt_mem_epcs_flash_controller_0+0xff806b1c>
    7b30:	10c00017 	ldw	r3,0(r2)
    7b34:	01ffbff4 	movhi	r7,65279
    7b38:	39ffbfc4 	addi	r7,r7,-257
    7b3c:	00ca303a 	nor	r5,zero,r3
    7b40:	01a02074 	movhi	r6,32897
    7b44:	19c7883a 	add	r3,r3,r7
    7b48:	31a02004 	addi	r6,r6,-32640
    7b4c:	1946703a 	and	r3,r3,r5
    7b50:	1986703a 	and	r3,r3,r6
    7b54:	1800091e 	bne	r3,zero,7b7c <strlen+0x78>
    7b58:	10800104 	addi	r2,r2,4
    7b5c:	10c00017 	ldw	r3,0(r2)
    7b60:	19cb883a 	add	r5,r3,r7
    7b64:	00c6303a 	nor	r3,zero,r3
    7b68:	28c6703a 	and	r3,r5,r3
    7b6c:	1986703a 	and	r3,r3,r6
    7b70:	183ff926 	beq	r3,zero,7b58 <__alt_mem_epcs_flash_controller_0+0xff806b58>
    7b74:	00000106 	br	7b7c <strlen+0x78>
    7b78:	10800044 	addi	r2,r2,1
    7b7c:	10c00007 	ldb	r3,0(r2)
    7b80:	183ffd1e 	bne	r3,zero,7b78 <__alt_mem_epcs_flash_controller_0+0xff806b78>
    7b84:	1105c83a 	sub	r2,r2,r4
    7b88:	f800283a 	ret
    7b8c:	2005883a 	mov	r2,r4
    7b90:	003fe706 	br	7b30 <__alt_mem_epcs_flash_controller_0+0xff806b30>
    7b94:	0005883a 	mov	r2,zero
    7b98:	f800283a 	ret

00007b9c <__swsetup_r>:
    7b9c:	00800074 	movhi	r2,1
    7ba0:	defffd04 	addi	sp,sp,-12
    7ba4:	10ae3d04 	addi	r2,r2,-18188
    7ba8:	dc400115 	stw	r17,4(sp)
    7bac:	2023883a 	mov	r17,r4
    7bb0:	11000017 	ldw	r4,0(r2)
    7bb4:	dc000015 	stw	r16,0(sp)
    7bb8:	dfc00215 	stw	ra,8(sp)
    7bbc:	2821883a 	mov	r16,r5
    7bc0:	20000226 	beq	r4,zero,7bcc <__swsetup_r+0x30>
    7bc4:	20800e17 	ldw	r2,56(r4)
    7bc8:	10003126 	beq	r2,zero,7c90 <__swsetup_r+0xf4>
    7bcc:	8080030b 	ldhu	r2,12(r16)
    7bd0:	10c0020c 	andi	r3,r2,8
    7bd4:	1009883a 	mov	r4,r2
    7bd8:	18000f26 	beq	r3,zero,7c18 <__swsetup_r+0x7c>
    7bdc:	80c00417 	ldw	r3,16(r16)
    7be0:	18001526 	beq	r3,zero,7c38 <__swsetup_r+0x9c>
    7be4:	1100004c 	andi	r4,r2,1
    7be8:	20001c1e 	bne	r4,zero,7c5c <__swsetup_r+0xc0>
    7bec:	1080008c 	andi	r2,r2,2
    7bf0:	1000291e 	bne	r2,zero,7c98 <__swsetup_r+0xfc>
    7bf4:	80800517 	ldw	r2,20(r16)
    7bf8:	80800215 	stw	r2,8(r16)
    7bfc:	18001c26 	beq	r3,zero,7c70 <__swsetup_r+0xd4>
    7c00:	0005883a 	mov	r2,zero
    7c04:	dfc00217 	ldw	ra,8(sp)
    7c08:	dc400117 	ldw	r17,4(sp)
    7c0c:	dc000017 	ldw	r16,0(sp)
    7c10:	dec00304 	addi	sp,sp,12
    7c14:	f800283a 	ret
    7c18:	2080040c 	andi	r2,r4,16
    7c1c:	10002e26 	beq	r2,zero,7cd8 <__swsetup_r+0x13c>
    7c20:	2080010c 	andi	r2,r4,4
    7c24:	10001e1e 	bne	r2,zero,7ca0 <__swsetup_r+0x104>
    7c28:	80c00417 	ldw	r3,16(r16)
    7c2c:	20800214 	ori	r2,r4,8
    7c30:	8080030d 	sth	r2,12(r16)
    7c34:	183feb1e 	bne	r3,zero,7be4 <__alt_mem_epcs_flash_controller_0+0xff806be4>
    7c38:	1100a00c 	andi	r4,r2,640
    7c3c:	01408004 	movi	r5,512
    7c40:	217fe826 	beq	r4,r5,7be4 <__alt_mem_epcs_flash_controller_0+0xff806be4>
    7c44:	800b883a 	mov	r5,r16
    7c48:	8809883a 	mov	r4,r17
    7c4c:	0008b9c0 	call	8b9c <__smakebuf_r>
    7c50:	8080030b 	ldhu	r2,12(r16)
    7c54:	80c00417 	ldw	r3,16(r16)
    7c58:	003fe206 	br	7be4 <__alt_mem_epcs_flash_controller_0+0xff806be4>
    7c5c:	80800517 	ldw	r2,20(r16)
    7c60:	80000215 	stw	zero,8(r16)
    7c64:	0085c83a 	sub	r2,zero,r2
    7c68:	80800615 	stw	r2,24(r16)
    7c6c:	183fe41e 	bne	r3,zero,7c00 <__alt_mem_epcs_flash_controller_0+0xff806c00>
    7c70:	80c0030b 	ldhu	r3,12(r16)
    7c74:	0005883a 	mov	r2,zero
    7c78:	1900200c 	andi	r4,r3,128
    7c7c:	203fe126 	beq	r4,zero,7c04 <__alt_mem_epcs_flash_controller_0+0xff806c04>
    7c80:	18c01014 	ori	r3,r3,64
    7c84:	80c0030d 	sth	r3,12(r16)
    7c88:	00bfffc4 	movi	r2,-1
    7c8c:	003fdd06 	br	7c04 <__alt_mem_epcs_flash_controller_0+0xff806c04>
    7c90:	00085900 	call	8590 <__sinit>
    7c94:	003fcd06 	br	7bcc <__alt_mem_epcs_flash_controller_0+0xff806bcc>
    7c98:	0005883a 	mov	r2,zero
    7c9c:	003fd606 	br	7bf8 <__alt_mem_epcs_flash_controller_0+0xff806bf8>
    7ca0:	81400c17 	ldw	r5,48(r16)
    7ca4:	28000626 	beq	r5,zero,7cc0 <__swsetup_r+0x124>
    7ca8:	80801004 	addi	r2,r16,64
    7cac:	28800326 	beq	r5,r2,7cbc <__swsetup_r+0x120>
    7cb0:	8809883a 	mov	r4,r17
    7cb4:	00087040 	call	8704 <_free_r>
    7cb8:	8100030b 	ldhu	r4,12(r16)
    7cbc:	80000c15 	stw	zero,48(r16)
    7cc0:	80c00417 	ldw	r3,16(r16)
    7cc4:	00bff6c4 	movi	r2,-37
    7cc8:	1108703a 	and	r4,r2,r4
    7ccc:	80000115 	stw	zero,4(r16)
    7cd0:	80c00015 	stw	r3,0(r16)
    7cd4:	003fd506 	br	7c2c <__alt_mem_epcs_flash_controller_0+0xff806c2c>
    7cd8:	00800244 	movi	r2,9
    7cdc:	88800015 	stw	r2,0(r17)
    7ce0:	20801014 	ori	r2,r4,64
    7ce4:	8080030d 	sth	r2,12(r16)
    7ce8:	00bfffc4 	movi	r2,-1
    7cec:	003fc506 	br	7c04 <__alt_mem_epcs_flash_controller_0+0xff806c04>

00007cf0 <__register_exitproc>:
    7cf0:	defffa04 	addi	sp,sp,-24
    7cf4:	dc000315 	stw	r16,12(sp)
    7cf8:	04000074 	movhi	r16,1
    7cfc:	842e3c04 	addi	r16,r16,-18192
    7d00:	80c00017 	ldw	r3,0(r16)
    7d04:	dc400415 	stw	r17,16(sp)
    7d08:	dfc00515 	stw	ra,20(sp)
    7d0c:	18805217 	ldw	r2,328(r3)
    7d10:	2023883a 	mov	r17,r4
    7d14:	10003726 	beq	r2,zero,7df4 <__register_exitproc+0x104>
    7d18:	10c00117 	ldw	r3,4(r2)
    7d1c:	010007c4 	movi	r4,31
    7d20:	20c00e16 	blt	r4,r3,7d5c <__register_exitproc+0x6c>
    7d24:	1a000044 	addi	r8,r3,1
    7d28:	8800221e 	bne	r17,zero,7db4 <__register_exitproc+0xc4>
    7d2c:	18c00084 	addi	r3,r3,2
    7d30:	18c7883a 	add	r3,r3,r3
    7d34:	18c7883a 	add	r3,r3,r3
    7d38:	12000115 	stw	r8,4(r2)
    7d3c:	10c7883a 	add	r3,r2,r3
    7d40:	19400015 	stw	r5,0(r3)
    7d44:	0005883a 	mov	r2,zero
    7d48:	dfc00517 	ldw	ra,20(sp)
    7d4c:	dc400417 	ldw	r17,16(sp)
    7d50:	dc000317 	ldw	r16,12(sp)
    7d54:	dec00604 	addi	sp,sp,24
    7d58:	f800283a 	ret
    7d5c:	00800034 	movhi	r2,0
    7d60:	10800004 	addi	r2,r2,0
    7d64:	10002626 	beq	r2,zero,7e00 <__register_exitproc+0x110>
    7d68:	01006404 	movi	r4,400
    7d6c:	d9400015 	stw	r5,0(sp)
    7d70:	d9800115 	stw	r6,4(sp)
    7d74:	d9c00215 	stw	r7,8(sp)
    7d78:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
    7d7c:	d9400017 	ldw	r5,0(sp)
    7d80:	d9800117 	ldw	r6,4(sp)
    7d84:	d9c00217 	ldw	r7,8(sp)
    7d88:	10001d26 	beq	r2,zero,7e00 <__register_exitproc+0x110>
    7d8c:	81000017 	ldw	r4,0(r16)
    7d90:	10000115 	stw	zero,4(r2)
    7d94:	02000044 	movi	r8,1
    7d98:	22405217 	ldw	r9,328(r4)
    7d9c:	0007883a 	mov	r3,zero
    7da0:	12400015 	stw	r9,0(r2)
    7da4:	20805215 	stw	r2,328(r4)
    7da8:	10006215 	stw	zero,392(r2)
    7dac:	10006315 	stw	zero,396(r2)
    7db0:	883fde26 	beq	r17,zero,7d2c <__alt_mem_epcs_flash_controller_0+0xff806d2c>
    7db4:	18c9883a 	add	r4,r3,r3
    7db8:	2109883a 	add	r4,r4,r4
    7dbc:	1109883a 	add	r4,r2,r4
    7dc0:	21802215 	stw	r6,136(r4)
    7dc4:	01800044 	movi	r6,1
    7dc8:	12406217 	ldw	r9,392(r2)
    7dcc:	30cc983a 	sll	r6,r6,r3
    7dd0:	4992b03a 	or	r9,r9,r6
    7dd4:	12406215 	stw	r9,392(r2)
    7dd8:	21c04215 	stw	r7,264(r4)
    7ddc:	01000084 	movi	r4,2
    7de0:	893fd21e 	bne	r17,r4,7d2c <__alt_mem_epcs_flash_controller_0+0xff806d2c>
    7de4:	11006317 	ldw	r4,396(r2)
    7de8:	218cb03a 	or	r6,r4,r6
    7dec:	11806315 	stw	r6,396(r2)
    7df0:	003fce06 	br	7d2c <__alt_mem_epcs_flash_controller_0+0xff806d2c>
    7df4:	18805304 	addi	r2,r3,332
    7df8:	18805215 	stw	r2,328(r3)
    7dfc:	003fc606 	br	7d18 <__alt_mem_epcs_flash_controller_0+0xff806d18>
    7e00:	00bfffc4 	movi	r2,-1
    7e04:	003fd006 	br	7d48 <__alt_mem_epcs_flash_controller_0+0xff806d48>

00007e08 <__call_exitprocs>:
    7e08:	defff504 	addi	sp,sp,-44
    7e0c:	df000915 	stw	fp,36(sp)
    7e10:	dd400615 	stw	r21,24(sp)
    7e14:	dc800315 	stw	r18,12(sp)
    7e18:	dfc00a15 	stw	ra,40(sp)
    7e1c:	ddc00815 	stw	r23,32(sp)
    7e20:	dd800715 	stw	r22,28(sp)
    7e24:	dd000515 	stw	r20,20(sp)
    7e28:	dcc00415 	stw	r19,16(sp)
    7e2c:	dc400215 	stw	r17,8(sp)
    7e30:	dc000115 	stw	r16,4(sp)
    7e34:	d9000015 	stw	r4,0(sp)
    7e38:	2839883a 	mov	fp,r5
    7e3c:	04800044 	movi	r18,1
    7e40:	057fffc4 	movi	r21,-1
    7e44:	00800074 	movhi	r2,1
    7e48:	10ae3c04 	addi	r2,r2,-18192
    7e4c:	12000017 	ldw	r8,0(r2)
    7e50:	45005217 	ldw	r20,328(r8)
    7e54:	44c05204 	addi	r19,r8,328
    7e58:	a0001c26 	beq	r20,zero,7ecc <__call_exitprocs+0xc4>
    7e5c:	a0800117 	ldw	r2,4(r20)
    7e60:	15ffffc4 	addi	r23,r2,-1
    7e64:	b8000d16 	blt	r23,zero,7e9c <__call_exitprocs+0x94>
    7e68:	14000044 	addi	r16,r2,1
    7e6c:	8421883a 	add	r16,r16,r16
    7e70:	8421883a 	add	r16,r16,r16
    7e74:	84402004 	addi	r17,r16,128
    7e78:	a463883a 	add	r17,r20,r17
    7e7c:	a421883a 	add	r16,r20,r16
    7e80:	e0001e26 	beq	fp,zero,7efc <__call_exitprocs+0xf4>
    7e84:	80804017 	ldw	r2,256(r16)
    7e88:	e0801c26 	beq	fp,r2,7efc <__call_exitprocs+0xf4>
    7e8c:	bdffffc4 	addi	r23,r23,-1
    7e90:	843fff04 	addi	r16,r16,-4
    7e94:	8c7fff04 	addi	r17,r17,-4
    7e98:	bd7ff91e 	bne	r23,r21,7e80 <__alt_mem_epcs_flash_controller_0+0xff806e80>
    7e9c:	00800034 	movhi	r2,0
    7ea0:	10800004 	addi	r2,r2,0
    7ea4:	10000926 	beq	r2,zero,7ecc <__call_exitprocs+0xc4>
    7ea8:	a0800117 	ldw	r2,4(r20)
    7eac:	1000301e 	bne	r2,zero,7f70 <__call_exitprocs+0x168>
    7eb0:	a0800017 	ldw	r2,0(r20)
    7eb4:	10003226 	beq	r2,zero,7f80 <__call_exitprocs+0x178>
    7eb8:	a009883a 	mov	r4,r20
    7ebc:	98800015 	stw	r2,0(r19)
    7ec0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
    7ec4:	9d000017 	ldw	r20,0(r19)
    7ec8:	a03fe41e 	bne	r20,zero,7e5c <__alt_mem_epcs_flash_controller_0+0xff806e5c>
    7ecc:	dfc00a17 	ldw	ra,40(sp)
    7ed0:	df000917 	ldw	fp,36(sp)
    7ed4:	ddc00817 	ldw	r23,32(sp)
    7ed8:	dd800717 	ldw	r22,28(sp)
    7edc:	dd400617 	ldw	r21,24(sp)
    7ee0:	dd000517 	ldw	r20,20(sp)
    7ee4:	dcc00417 	ldw	r19,16(sp)
    7ee8:	dc800317 	ldw	r18,12(sp)
    7eec:	dc400217 	ldw	r17,8(sp)
    7ef0:	dc000117 	ldw	r16,4(sp)
    7ef4:	dec00b04 	addi	sp,sp,44
    7ef8:	f800283a 	ret
    7efc:	a0800117 	ldw	r2,4(r20)
    7f00:	80c00017 	ldw	r3,0(r16)
    7f04:	10bfffc4 	addi	r2,r2,-1
    7f08:	15c01426 	beq	r2,r23,7f5c <__call_exitprocs+0x154>
    7f0c:	80000015 	stw	zero,0(r16)
    7f10:	183fde26 	beq	r3,zero,7e8c <__alt_mem_epcs_flash_controller_0+0xff806e8c>
    7f14:	95c8983a 	sll	r4,r18,r23
    7f18:	a0806217 	ldw	r2,392(r20)
    7f1c:	a5800117 	ldw	r22,4(r20)
    7f20:	2084703a 	and	r2,r4,r2
    7f24:	10000b26 	beq	r2,zero,7f54 <__call_exitprocs+0x14c>
    7f28:	a0806317 	ldw	r2,396(r20)
    7f2c:	2088703a 	and	r4,r4,r2
    7f30:	20000c1e 	bne	r4,zero,7f64 <__call_exitprocs+0x15c>
    7f34:	89400017 	ldw	r5,0(r17)
    7f38:	d9000017 	ldw	r4,0(sp)
    7f3c:	183ee83a 	callr	r3
    7f40:	a0800117 	ldw	r2,4(r20)
    7f44:	15bfbf1e 	bne	r2,r22,7e44 <__alt_mem_epcs_flash_controller_0+0xff806e44>
    7f48:	98800017 	ldw	r2,0(r19)
    7f4c:	153fcf26 	beq	r2,r20,7e8c <__alt_mem_epcs_flash_controller_0+0xff806e8c>
    7f50:	003fbc06 	br	7e44 <__alt_mem_epcs_flash_controller_0+0xff806e44>
    7f54:	183ee83a 	callr	r3
    7f58:	003ff906 	br	7f40 <__alt_mem_epcs_flash_controller_0+0xff806f40>
    7f5c:	a5c00115 	stw	r23,4(r20)
    7f60:	003feb06 	br	7f10 <__alt_mem_epcs_flash_controller_0+0xff806f10>
    7f64:	89000017 	ldw	r4,0(r17)
    7f68:	183ee83a 	callr	r3
    7f6c:	003ff406 	br	7f40 <__alt_mem_epcs_flash_controller_0+0xff806f40>
    7f70:	a0800017 	ldw	r2,0(r20)
    7f74:	a027883a 	mov	r19,r20
    7f78:	1029883a 	mov	r20,r2
    7f7c:	003fb606 	br	7e58 <__alt_mem_epcs_flash_controller_0+0xff806e58>
    7f80:	0005883a 	mov	r2,zero
    7f84:	003ffb06 	br	7f74 <__alt_mem_epcs_flash_controller_0+0xff806f74>

00007f88 <__sflush_r>:
    7f88:	2880030b 	ldhu	r2,12(r5)
    7f8c:	defffb04 	addi	sp,sp,-20
    7f90:	dcc00315 	stw	r19,12(sp)
    7f94:	dc400115 	stw	r17,4(sp)
    7f98:	dfc00415 	stw	ra,16(sp)
    7f9c:	dc800215 	stw	r18,8(sp)
    7fa0:	dc000015 	stw	r16,0(sp)
    7fa4:	10c0020c 	andi	r3,r2,8
    7fa8:	2823883a 	mov	r17,r5
    7fac:	2027883a 	mov	r19,r4
    7fb0:	1800311e 	bne	r3,zero,8078 <__sflush_r+0xf0>
    7fb4:	28c00117 	ldw	r3,4(r5)
    7fb8:	10820014 	ori	r2,r2,2048
    7fbc:	2880030d 	sth	r2,12(r5)
    7fc0:	00c04b0e 	bge	zero,r3,80f0 <__sflush_r+0x168>
    7fc4:	8a000a17 	ldw	r8,40(r17)
    7fc8:	40002326 	beq	r8,zero,8058 <__sflush_r+0xd0>
    7fcc:	9c000017 	ldw	r16,0(r19)
    7fd0:	10c4000c 	andi	r3,r2,4096
    7fd4:	98000015 	stw	zero,0(r19)
    7fd8:	18004826 	beq	r3,zero,80fc <__sflush_r+0x174>
    7fdc:	89801417 	ldw	r6,80(r17)
    7fe0:	10c0010c 	andi	r3,r2,4
    7fe4:	18000626 	beq	r3,zero,8000 <__sflush_r+0x78>
    7fe8:	88c00117 	ldw	r3,4(r17)
    7fec:	88800c17 	ldw	r2,48(r17)
    7ff0:	30cdc83a 	sub	r6,r6,r3
    7ff4:	10000226 	beq	r2,zero,8000 <__sflush_r+0x78>
    7ff8:	88800f17 	ldw	r2,60(r17)
    7ffc:	308dc83a 	sub	r6,r6,r2
    8000:	89400717 	ldw	r5,28(r17)
    8004:	000f883a 	mov	r7,zero
    8008:	9809883a 	mov	r4,r19
    800c:	403ee83a 	callr	r8
    8010:	00ffffc4 	movi	r3,-1
    8014:	10c04426 	beq	r2,r3,8128 <__sflush_r+0x1a0>
    8018:	88c0030b 	ldhu	r3,12(r17)
    801c:	89000417 	ldw	r4,16(r17)
    8020:	88000115 	stw	zero,4(r17)
    8024:	197dffcc 	andi	r5,r3,63487
    8028:	8940030d 	sth	r5,12(r17)
    802c:	89000015 	stw	r4,0(r17)
    8030:	18c4000c 	andi	r3,r3,4096
    8034:	18002c1e 	bne	r3,zero,80e8 <__sflush_r+0x160>
    8038:	89400c17 	ldw	r5,48(r17)
    803c:	9c000015 	stw	r16,0(r19)
    8040:	28000526 	beq	r5,zero,8058 <__sflush_r+0xd0>
    8044:	88801004 	addi	r2,r17,64
    8048:	28800226 	beq	r5,r2,8054 <__sflush_r+0xcc>
    804c:	9809883a 	mov	r4,r19
    8050:	00087040 	call	8704 <_free_r>
    8054:	88000c15 	stw	zero,48(r17)
    8058:	0005883a 	mov	r2,zero
    805c:	dfc00417 	ldw	ra,16(sp)
    8060:	dcc00317 	ldw	r19,12(sp)
    8064:	dc800217 	ldw	r18,8(sp)
    8068:	dc400117 	ldw	r17,4(sp)
    806c:	dc000017 	ldw	r16,0(sp)
    8070:	dec00504 	addi	sp,sp,20
    8074:	f800283a 	ret
    8078:	2c800417 	ldw	r18,16(r5)
    807c:	903ff626 	beq	r18,zero,8058 <__alt_mem_epcs_flash_controller_0+0xff807058>
    8080:	2c000017 	ldw	r16,0(r5)
    8084:	108000cc 	andi	r2,r2,3
    8088:	2c800015 	stw	r18,0(r5)
    808c:	84a1c83a 	sub	r16,r16,r18
    8090:	1000131e 	bne	r2,zero,80e0 <__sflush_r+0x158>
    8094:	28800517 	ldw	r2,20(r5)
    8098:	88800215 	stw	r2,8(r17)
    809c:	04000316 	blt	zero,r16,80ac <__sflush_r+0x124>
    80a0:	003fed06 	br	8058 <__alt_mem_epcs_flash_controller_0+0xff807058>
    80a4:	90a5883a 	add	r18,r18,r2
    80a8:	043feb0e 	bge	zero,r16,8058 <__alt_mem_epcs_flash_controller_0+0xff807058>
    80ac:	88800917 	ldw	r2,36(r17)
    80b0:	89400717 	ldw	r5,28(r17)
    80b4:	800f883a 	mov	r7,r16
    80b8:	900d883a 	mov	r6,r18
    80bc:	9809883a 	mov	r4,r19
    80c0:	103ee83a 	callr	r2
    80c4:	80a1c83a 	sub	r16,r16,r2
    80c8:	00bff616 	blt	zero,r2,80a4 <__alt_mem_epcs_flash_controller_0+0xff8070a4>
    80cc:	88c0030b 	ldhu	r3,12(r17)
    80d0:	00bfffc4 	movi	r2,-1
    80d4:	18c01014 	ori	r3,r3,64
    80d8:	88c0030d 	sth	r3,12(r17)
    80dc:	003fdf06 	br	805c <__alt_mem_epcs_flash_controller_0+0xff80705c>
    80e0:	0005883a 	mov	r2,zero
    80e4:	003fec06 	br	8098 <__alt_mem_epcs_flash_controller_0+0xff807098>
    80e8:	88801415 	stw	r2,80(r17)
    80ec:	003fd206 	br	8038 <__alt_mem_epcs_flash_controller_0+0xff807038>
    80f0:	28c00f17 	ldw	r3,60(r5)
    80f4:	00ffb316 	blt	zero,r3,7fc4 <__alt_mem_epcs_flash_controller_0+0xff806fc4>
    80f8:	003fd706 	br	8058 <__alt_mem_epcs_flash_controller_0+0xff807058>
    80fc:	89400717 	ldw	r5,28(r17)
    8100:	000d883a 	mov	r6,zero
    8104:	01c00044 	movi	r7,1
    8108:	9809883a 	mov	r4,r19
    810c:	403ee83a 	callr	r8
    8110:	100d883a 	mov	r6,r2
    8114:	00bfffc4 	movi	r2,-1
    8118:	30801426 	beq	r6,r2,816c <__sflush_r+0x1e4>
    811c:	8880030b 	ldhu	r2,12(r17)
    8120:	8a000a17 	ldw	r8,40(r17)
    8124:	003fae06 	br	7fe0 <__alt_mem_epcs_flash_controller_0+0xff806fe0>
    8128:	98c00017 	ldw	r3,0(r19)
    812c:	183fba26 	beq	r3,zero,8018 <__alt_mem_epcs_flash_controller_0+0xff807018>
    8130:	01000744 	movi	r4,29
    8134:	19000626 	beq	r3,r4,8150 <__sflush_r+0x1c8>
    8138:	01000584 	movi	r4,22
    813c:	19000426 	beq	r3,r4,8150 <__sflush_r+0x1c8>
    8140:	88c0030b 	ldhu	r3,12(r17)
    8144:	18c01014 	ori	r3,r3,64
    8148:	88c0030d 	sth	r3,12(r17)
    814c:	003fc306 	br	805c <__alt_mem_epcs_flash_controller_0+0xff80705c>
    8150:	8880030b 	ldhu	r2,12(r17)
    8154:	88c00417 	ldw	r3,16(r17)
    8158:	88000115 	stw	zero,4(r17)
    815c:	10bdffcc 	andi	r2,r2,63487
    8160:	8880030d 	sth	r2,12(r17)
    8164:	88c00015 	stw	r3,0(r17)
    8168:	003fb306 	br	8038 <__alt_mem_epcs_flash_controller_0+0xff807038>
    816c:	98800017 	ldw	r2,0(r19)
    8170:	103fea26 	beq	r2,zero,811c <__alt_mem_epcs_flash_controller_0+0xff80711c>
    8174:	00c00744 	movi	r3,29
    8178:	10c00226 	beq	r2,r3,8184 <__sflush_r+0x1fc>
    817c:	00c00584 	movi	r3,22
    8180:	10c0031e 	bne	r2,r3,8190 <__sflush_r+0x208>
    8184:	9c000015 	stw	r16,0(r19)
    8188:	0005883a 	mov	r2,zero
    818c:	003fb306 	br	805c <__alt_mem_epcs_flash_controller_0+0xff80705c>
    8190:	88c0030b 	ldhu	r3,12(r17)
    8194:	3005883a 	mov	r2,r6
    8198:	18c01014 	ori	r3,r3,64
    819c:	88c0030d 	sth	r3,12(r17)
    81a0:	003fae06 	br	805c <__alt_mem_epcs_flash_controller_0+0xff80705c>

000081a4 <_fflush_r>:
    81a4:	defffd04 	addi	sp,sp,-12
    81a8:	dc000115 	stw	r16,4(sp)
    81ac:	dfc00215 	stw	ra,8(sp)
    81b0:	2021883a 	mov	r16,r4
    81b4:	20000226 	beq	r4,zero,81c0 <_fflush_r+0x1c>
    81b8:	20800e17 	ldw	r2,56(r4)
    81bc:	10000c26 	beq	r2,zero,81f0 <_fflush_r+0x4c>
    81c0:	2880030f 	ldh	r2,12(r5)
    81c4:	1000051e 	bne	r2,zero,81dc <_fflush_r+0x38>
    81c8:	0005883a 	mov	r2,zero
    81cc:	dfc00217 	ldw	ra,8(sp)
    81d0:	dc000117 	ldw	r16,4(sp)
    81d4:	dec00304 	addi	sp,sp,12
    81d8:	f800283a 	ret
    81dc:	8009883a 	mov	r4,r16
    81e0:	dfc00217 	ldw	ra,8(sp)
    81e4:	dc000117 	ldw	r16,4(sp)
    81e8:	dec00304 	addi	sp,sp,12
    81ec:	0007f881 	jmpi	7f88 <__sflush_r>
    81f0:	d9400015 	stw	r5,0(sp)
    81f4:	00085900 	call	8590 <__sinit>
    81f8:	d9400017 	ldw	r5,0(sp)
    81fc:	003ff006 	br	81c0 <__alt_mem_epcs_flash_controller_0+0xff8071c0>

00008200 <fflush>:
    8200:	20000526 	beq	r4,zero,8218 <fflush+0x18>
    8204:	00800074 	movhi	r2,1
    8208:	10ae3d04 	addi	r2,r2,-18188
    820c:	200b883a 	mov	r5,r4
    8210:	11000017 	ldw	r4,0(r2)
    8214:	00081a41 	jmpi	81a4 <_fflush_r>
    8218:	00800074 	movhi	r2,1
    821c:	10ae3c04 	addi	r2,r2,-18192
    8220:	11000017 	ldw	r4,0(r2)
    8224:	01400074 	movhi	r5,1
    8228:	29606904 	addi	r5,r5,-32348
    822c:	0008ad81 	jmpi	8ad8 <_fwalk_reent>

00008230 <__fp_unlock>:
    8230:	0005883a 	mov	r2,zero
    8234:	f800283a 	ret

00008238 <_cleanup_r>:
    8238:	01400074 	movhi	r5,1
    823c:	29649804 	addi	r5,r5,-28064
    8240:	0008ad81 	jmpi	8ad8 <_fwalk_reent>

00008244 <__sinit.part.1>:
    8244:	defff704 	addi	sp,sp,-36
    8248:	00c00074 	movhi	r3,1
    824c:	dfc00815 	stw	ra,32(sp)
    8250:	ddc00715 	stw	r23,28(sp)
    8254:	dd800615 	stw	r22,24(sp)
    8258:	dd400515 	stw	r21,20(sp)
    825c:	dd000415 	stw	r20,16(sp)
    8260:	dcc00315 	stw	r19,12(sp)
    8264:	dc800215 	stw	r18,8(sp)
    8268:	dc400115 	stw	r17,4(sp)
    826c:	dc000015 	stw	r16,0(sp)
    8270:	18e08e04 	addi	r3,r3,-32200
    8274:	24000117 	ldw	r16,4(r4)
    8278:	20c00f15 	stw	r3,60(r4)
    827c:	2080bb04 	addi	r2,r4,748
    8280:	00c000c4 	movi	r3,3
    8284:	20c0b915 	stw	r3,740(r4)
    8288:	2080ba15 	stw	r2,744(r4)
    828c:	2000b815 	stw	zero,736(r4)
    8290:	05c00204 	movi	r23,8
    8294:	00800104 	movi	r2,4
    8298:	2025883a 	mov	r18,r4
    829c:	b80d883a 	mov	r6,r23
    82a0:	81001704 	addi	r4,r16,92
    82a4:	000b883a 	mov	r5,zero
    82a8:	80000015 	stw	zero,0(r16)
    82ac:	80000115 	stw	zero,4(r16)
    82b0:	80000215 	stw	zero,8(r16)
    82b4:	8080030d 	sth	r2,12(r16)
    82b8:	80001915 	stw	zero,100(r16)
    82bc:	8000038d 	sth	zero,14(r16)
    82c0:	80000415 	stw	zero,16(r16)
    82c4:	80000515 	stw	zero,20(r16)
    82c8:	80000615 	stw	zero,24(r16)
    82cc:	0008d580 	call	8d58 <memset>
    82d0:	05800074 	movhi	r22,1
    82d4:	94400217 	ldw	r17,8(r18)
    82d8:	05400074 	movhi	r21,1
    82dc:	05000074 	movhi	r20,1
    82e0:	04c00074 	movhi	r19,1
    82e4:	b5a41c04 	addi	r22,r22,-28560
    82e8:	ad643304 	addi	r21,r21,-28468
    82ec:	a5245204 	addi	r20,r20,-28344
    82f0:	9ce46904 	addi	r19,r19,-28252
    82f4:	85800815 	stw	r22,32(r16)
    82f8:	85400915 	stw	r21,36(r16)
    82fc:	85000a15 	stw	r20,40(r16)
    8300:	84c00b15 	stw	r19,44(r16)
    8304:	84000715 	stw	r16,28(r16)
    8308:	00800284 	movi	r2,10
    830c:	8880030d 	sth	r2,12(r17)
    8310:	00800044 	movi	r2,1
    8314:	b80d883a 	mov	r6,r23
    8318:	89001704 	addi	r4,r17,92
    831c:	000b883a 	mov	r5,zero
    8320:	88000015 	stw	zero,0(r17)
    8324:	88000115 	stw	zero,4(r17)
    8328:	88000215 	stw	zero,8(r17)
    832c:	88001915 	stw	zero,100(r17)
    8330:	8880038d 	sth	r2,14(r17)
    8334:	88000415 	stw	zero,16(r17)
    8338:	88000515 	stw	zero,20(r17)
    833c:	88000615 	stw	zero,24(r17)
    8340:	0008d580 	call	8d58 <memset>
    8344:	94000317 	ldw	r16,12(r18)
    8348:	00800484 	movi	r2,18
    834c:	8c400715 	stw	r17,28(r17)
    8350:	8d800815 	stw	r22,32(r17)
    8354:	8d400915 	stw	r21,36(r17)
    8358:	8d000a15 	stw	r20,40(r17)
    835c:	8cc00b15 	stw	r19,44(r17)
    8360:	8080030d 	sth	r2,12(r16)
    8364:	00800084 	movi	r2,2
    8368:	80000015 	stw	zero,0(r16)
    836c:	80000115 	stw	zero,4(r16)
    8370:	80000215 	stw	zero,8(r16)
    8374:	80001915 	stw	zero,100(r16)
    8378:	8080038d 	sth	r2,14(r16)
    837c:	80000415 	stw	zero,16(r16)
    8380:	80000515 	stw	zero,20(r16)
    8384:	80000615 	stw	zero,24(r16)
    8388:	b80d883a 	mov	r6,r23
    838c:	000b883a 	mov	r5,zero
    8390:	81001704 	addi	r4,r16,92
    8394:	0008d580 	call	8d58 <memset>
    8398:	00800044 	movi	r2,1
    839c:	84000715 	stw	r16,28(r16)
    83a0:	85800815 	stw	r22,32(r16)
    83a4:	85400915 	stw	r21,36(r16)
    83a8:	85000a15 	stw	r20,40(r16)
    83ac:	84c00b15 	stw	r19,44(r16)
    83b0:	90800e15 	stw	r2,56(r18)
    83b4:	dfc00817 	ldw	ra,32(sp)
    83b8:	ddc00717 	ldw	r23,28(sp)
    83bc:	dd800617 	ldw	r22,24(sp)
    83c0:	dd400517 	ldw	r21,20(sp)
    83c4:	dd000417 	ldw	r20,16(sp)
    83c8:	dcc00317 	ldw	r19,12(sp)
    83cc:	dc800217 	ldw	r18,8(sp)
    83d0:	dc400117 	ldw	r17,4(sp)
    83d4:	dc000017 	ldw	r16,0(sp)
    83d8:	dec00904 	addi	sp,sp,36
    83dc:	f800283a 	ret

000083e0 <__fp_lock>:
    83e0:	0005883a 	mov	r2,zero
    83e4:	f800283a 	ret

000083e8 <__sfmoreglue>:
    83e8:	defffc04 	addi	sp,sp,-16
    83ec:	dc800215 	stw	r18,8(sp)
    83f0:	2825883a 	mov	r18,r5
    83f4:	dc000015 	stw	r16,0(sp)
    83f8:	01401a04 	movi	r5,104
    83fc:	2021883a 	mov	r16,r4
    8400:	913fffc4 	addi	r4,r18,-1
    8404:	dfc00315 	stw	ra,12(sp)
    8408:	dc400115 	stw	r17,4(sp)
    840c:	00030c80 	call	30c8 <__mulsi3>
    8410:	8009883a 	mov	r4,r16
    8414:	11401d04 	addi	r5,r2,116
    8418:	1023883a 	mov	r17,r2
    841c:	00068b40 	call	68b4 <_malloc_r>
    8420:	1021883a 	mov	r16,r2
    8424:	10000726 	beq	r2,zero,8444 <__sfmoreglue+0x5c>
    8428:	11000304 	addi	r4,r2,12
    842c:	10000015 	stw	zero,0(r2)
    8430:	14800115 	stw	r18,4(r2)
    8434:	11000215 	stw	r4,8(r2)
    8438:	89801a04 	addi	r6,r17,104
    843c:	000b883a 	mov	r5,zero
    8440:	0008d580 	call	8d58 <memset>
    8444:	8005883a 	mov	r2,r16
    8448:	dfc00317 	ldw	ra,12(sp)
    844c:	dc800217 	ldw	r18,8(sp)
    8450:	dc400117 	ldw	r17,4(sp)
    8454:	dc000017 	ldw	r16,0(sp)
    8458:	dec00404 	addi	sp,sp,16
    845c:	f800283a 	ret

00008460 <__sfp>:
    8460:	defffb04 	addi	sp,sp,-20
    8464:	dc000015 	stw	r16,0(sp)
    8468:	04000074 	movhi	r16,1
    846c:	842e3c04 	addi	r16,r16,-18192
    8470:	dcc00315 	stw	r19,12(sp)
    8474:	2027883a 	mov	r19,r4
    8478:	81000017 	ldw	r4,0(r16)
    847c:	dfc00415 	stw	ra,16(sp)
    8480:	dc800215 	stw	r18,8(sp)
    8484:	20800e17 	ldw	r2,56(r4)
    8488:	dc400115 	stw	r17,4(sp)
    848c:	1000021e 	bne	r2,zero,8498 <__sfp+0x38>
    8490:	00082440 	call	8244 <__sinit.part.1>
    8494:	81000017 	ldw	r4,0(r16)
    8498:	2480b804 	addi	r18,r4,736
    849c:	047fffc4 	movi	r17,-1
    84a0:	91000117 	ldw	r4,4(r18)
    84a4:	94000217 	ldw	r16,8(r18)
    84a8:	213fffc4 	addi	r4,r4,-1
    84ac:	20000a16 	blt	r4,zero,84d8 <__sfp+0x78>
    84b0:	8080030f 	ldh	r2,12(r16)
    84b4:	10000c26 	beq	r2,zero,84e8 <__sfp+0x88>
    84b8:	80c01d04 	addi	r3,r16,116
    84bc:	00000206 	br	84c8 <__sfp+0x68>
    84c0:	18bfe60f 	ldh	r2,-104(r3)
    84c4:	10000826 	beq	r2,zero,84e8 <__sfp+0x88>
    84c8:	213fffc4 	addi	r4,r4,-1
    84cc:	1c3ffd04 	addi	r16,r3,-12
    84d0:	18c01a04 	addi	r3,r3,104
    84d4:	247ffa1e 	bne	r4,r17,84c0 <__alt_mem_epcs_flash_controller_0+0xff8074c0>
    84d8:	90800017 	ldw	r2,0(r18)
    84dc:	10001d26 	beq	r2,zero,8554 <__sfp+0xf4>
    84e0:	1025883a 	mov	r18,r2
    84e4:	003fee06 	br	84a0 <__alt_mem_epcs_flash_controller_0+0xff8074a0>
    84e8:	00bfffc4 	movi	r2,-1
    84ec:	8080038d 	sth	r2,14(r16)
    84f0:	00800044 	movi	r2,1
    84f4:	8080030d 	sth	r2,12(r16)
    84f8:	80001915 	stw	zero,100(r16)
    84fc:	80000015 	stw	zero,0(r16)
    8500:	80000215 	stw	zero,8(r16)
    8504:	80000115 	stw	zero,4(r16)
    8508:	80000415 	stw	zero,16(r16)
    850c:	80000515 	stw	zero,20(r16)
    8510:	80000615 	stw	zero,24(r16)
    8514:	01800204 	movi	r6,8
    8518:	000b883a 	mov	r5,zero
    851c:	81001704 	addi	r4,r16,92
    8520:	0008d580 	call	8d58 <memset>
    8524:	8005883a 	mov	r2,r16
    8528:	80000c15 	stw	zero,48(r16)
    852c:	80000d15 	stw	zero,52(r16)
    8530:	80001115 	stw	zero,68(r16)
    8534:	80001215 	stw	zero,72(r16)
    8538:	dfc00417 	ldw	ra,16(sp)
    853c:	dcc00317 	ldw	r19,12(sp)
    8540:	dc800217 	ldw	r18,8(sp)
    8544:	dc400117 	ldw	r17,4(sp)
    8548:	dc000017 	ldw	r16,0(sp)
    854c:	dec00504 	addi	sp,sp,20
    8550:	f800283a 	ret
    8554:	01400104 	movi	r5,4
    8558:	9809883a 	mov	r4,r19
    855c:	00083e80 	call	83e8 <__sfmoreglue>
    8560:	90800015 	stw	r2,0(r18)
    8564:	103fde1e 	bne	r2,zero,84e0 <__alt_mem_epcs_flash_controller_0+0xff8074e0>
    8568:	00800304 	movi	r2,12
    856c:	98800015 	stw	r2,0(r19)
    8570:	0005883a 	mov	r2,zero
    8574:	003ff006 	br	8538 <__alt_mem_epcs_flash_controller_0+0xff807538>

00008578 <_cleanup>:
    8578:	00800074 	movhi	r2,1
    857c:	10ae3c04 	addi	r2,r2,-18192
    8580:	11000017 	ldw	r4,0(r2)
    8584:	01400074 	movhi	r5,1
    8588:	29649804 	addi	r5,r5,-28064
    858c:	0008ad81 	jmpi	8ad8 <_fwalk_reent>

00008590 <__sinit>:
    8590:	20800e17 	ldw	r2,56(r4)
    8594:	10000126 	beq	r2,zero,859c <__sinit+0xc>
    8598:	f800283a 	ret
    859c:	00082441 	jmpi	8244 <__sinit.part.1>

000085a0 <__sfp_lock_acquire>:
    85a0:	f800283a 	ret

000085a4 <__sfp_lock_release>:
    85a4:	f800283a 	ret

000085a8 <__sinit_lock_acquire>:
    85a8:	f800283a 	ret

000085ac <__sinit_lock_release>:
    85ac:	f800283a 	ret

000085b0 <__fp_lock_all>:
    85b0:	00800074 	movhi	r2,1
    85b4:	10ae3d04 	addi	r2,r2,-18188
    85b8:	11000017 	ldw	r4,0(r2)
    85bc:	01400074 	movhi	r5,1
    85c0:	2960f804 	addi	r5,r5,-31776
    85c4:	0008a141 	jmpi	8a14 <_fwalk>

000085c8 <__fp_unlock_all>:
    85c8:	00800074 	movhi	r2,1
    85cc:	10ae3d04 	addi	r2,r2,-18188
    85d0:	11000017 	ldw	r4,0(r2)
    85d4:	01400074 	movhi	r5,1
    85d8:	29608c04 	addi	r5,r5,-32208
    85dc:	0008a141 	jmpi	8a14 <_fwalk>

000085e0 <_malloc_trim_r>:
    85e0:	defffb04 	addi	sp,sp,-20
    85e4:	dcc00315 	stw	r19,12(sp)
    85e8:	04c00074 	movhi	r19,1
    85ec:	dc800215 	stw	r18,8(sp)
    85f0:	dc400115 	stw	r17,4(sp)
    85f4:	dc000015 	stw	r16,0(sp)
    85f8:	dfc00415 	stw	ra,16(sp)
    85fc:	2821883a 	mov	r16,r5
    8600:	9ced2f04 	addi	r19,r19,-19268
    8604:	2025883a 	mov	r18,r4
    8608:	00097fc0 	call	97fc <__malloc_lock>
    860c:	98800217 	ldw	r2,8(r19)
    8610:	14400117 	ldw	r17,4(r2)
    8614:	00bfff04 	movi	r2,-4
    8618:	88a2703a 	and	r17,r17,r2
    861c:	8c21c83a 	sub	r16,r17,r16
    8620:	8403fbc4 	addi	r16,r16,4079
    8624:	8020d33a 	srli	r16,r16,12
    8628:	0083ffc4 	movi	r2,4095
    862c:	843fffc4 	addi	r16,r16,-1
    8630:	8020933a 	slli	r16,r16,12
    8634:	1400060e 	bge	r2,r16,8650 <_malloc_trim_r+0x70>
    8638:	000b883a 	mov	r5,zero
    863c:	9009883a 	mov	r4,r18
    8640:	0007ab00 	call	7ab0 <_sbrk_r>
    8644:	98c00217 	ldw	r3,8(r19)
    8648:	1c47883a 	add	r3,r3,r17
    864c:	10c00a26 	beq	r2,r3,8678 <_malloc_trim_r+0x98>
    8650:	9009883a 	mov	r4,r18
    8654:	00098200 	call	9820 <__malloc_unlock>
    8658:	0005883a 	mov	r2,zero
    865c:	dfc00417 	ldw	ra,16(sp)
    8660:	dcc00317 	ldw	r19,12(sp)
    8664:	dc800217 	ldw	r18,8(sp)
    8668:	dc400117 	ldw	r17,4(sp)
    866c:	dc000017 	ldw	r16,0(sp)
    8670:	dec00504 	addi	sp,sp,20
    8674:	f800283a 	ret
    8678:	040bc83a 	sub	r5,zero,r16
    867c:	9009883a 	mov	r4,r18
    8680:	0007ab00 	call	7ab0 <_sbrk_r>
    8684:	00ffffc4 	movi	r3,-1
    8688:	10c00d26 	beq	r2,r3,86c0 <_malloc_trim_r+0xe0>
    868c:	00c00074 	movhi	r3,1
    8690:	18f52404 	addi	r3,r3,-11120
    8694:	18800017 	ldw	r2,0(r3)
    8698:	99000217 	ldw	r4,8(r19)
    869c:	8c23c83a 	sub	r17,r17,r16
    86a0:	8c400054 	ori	r17,r17,1
    86a4:	1421c83a 	sub	r16,r2,r16
    86a8:	24400115 	stw	r17,4(r4)
    86ac:	9009883a 	mov	r4,r18
    86b0:	1c000015 	stw	r16,0(r3)
    86b4:	00098200 	call	9820 <__malloc_unlock>
    86b8:	00800044 	movi	r2,1
    86bc:	003fe706 	br	865c <__alt_mem_epcs_flash_controller_0+0xff80765c>
    86c0:	000b883a 	mov	r5,zero
    86c4:	9009883a 	mov	r4,r18
    86c8:	0007ab00 	call	7ab0 <_sbrk_r>
    86cc:	99000217 	ldw	r4,8(r19)
    86d0:	014003c4 	movi	r5,15
    86d4:	1107c83a 	sub	r3,r2,r4
    86d8:	28ffdd0e 	bge	r5,r3,8650 <__alt_mem_epcs_flash_controller_0+0xff807650>
    86dc:	01400074 	movhi	r5,1
    86e0:	296e3e04 	addi	r5,r5,-18184
    86e4:	29400017 	ldw	r5,0(r5)
    86e8:	18c00054 	ori	r3,r3,1
    86ec:	20c00115 	stw	r3,4(r4)
    86f0:	00c00074 	movhi	r3,1
    86f4:	1145c83a 	sub	r2,r2,r5
    86f8:	18f52404 	addi	r3,r3,-11120
    86fc:	18800015 	stw	r2,0(r3)
    8700:	003fd306 	br	8650 <__alt_mem_epcs_flash_controller_0+0xff807650>

00008704 <_free_r>:
    8704:	28004126 	beq	r5,zero,880c <_free_r+0x108>
    8708:	defffd04 	addi	sp,sp,-12
    870c:	dc400115 	stw	r17,4(sp)
    8710:	dc000015 	stw	r16,0(sp)
    8714:	2023883a 	mov	r17,r4
    8718:	2821883a 	mov	r16,r5
    871c:	dfc00215 	stw	ra,8(sp)
    8720:	00097fc0 	call	97fc <__malloc_lock>
    8724:	81ffff17 	ldw	r7,-4(r16)
    8728:	00bfff84 	movi	r2,-2
    872c:	01000074 	movhi	r4,1
    8730:	81bffe04 	addi	r6,r16,-8
    8734:	3884703a 	and	r2,r7,r2
    8738:	212d2f04 	addi	r4,r4,-19268
    873c:	308b883a 	add	r5,r6,r2
    8740:	2a400117 	ldw	r9,4(r5)
    8744:	22000217 	ldw	r8,8(r4)
    8748:	00ffff04 	movi	r3,-4
    874c:	48c6703a 	and	r3,r9,r3
    8750:	2a005726 	beq	r5,r8,88b0 <_free_r+0x1ac>
    8754:	28c00115 	stw	r3,4(r5)
    8758:	39c0004c 	andi	r7,r7,1
    875c:	3800091e 	bne	r7,zero,8784 <_free_r+0x80>
    8760:	823ffe17 	ldw	r8,-8(r16)
    8764:	22400204 	addi	r9,r4,8
    8768:	320dc83a 	sub	r6,r6,r8
    876c:	31c00217 	ldw	r7,8(r6)
    8770:	1205883a 	add	r2,r2,r8
    8774:	3a406526 	beq	r7,r9,890c <_free_r+0x208>
    8778:	32000317 	ldw	r8,12(r6)
    877c:	3a000315 	stw	r8,12(r7)
    8780:	41c00215 	stw	r7,8(r8)
    8784:	28cf883a 	add	r7,r5,r3
    8788:	39c00117 	ldw	r7,4(r7)
    878c:	39c0004c 	andi	r7,r7,1
    8790:	38003a26 	beq	r7,zero,887c <_free_r+0x178>
    8794:	10c00054 	ori	r3,r2,1
    8798:	30c00115 	stw	r3,4(r6)
    879c:	3087883a 	add	r3,r6,r2
    87a0:	18800015 	stw	r2,0(r3)
    87a4:	00c07fc4 	movi	r3,511
    87a8:	18801936 	bltu	r3,r2,8810 <_free_r+0x10c>
    87ac:	1004d0fa 	srli	r2,r2,3
    87b0:	01c00044 	movi	r7,1
    87b4:	21400117 	ldw	r5,4(r4)
    87b8:	10c00044 	addi	r3,r2,1
    87bc:	18c7883a 	add	r3,r3,r3
    87c0:	1005d0ba 	srai	r2,r2,2
    87c4:	18c7883a 	add	r3,r3,r3
    87c8:	18c7883a 	add	r3,r3,r3
    87cc:	1907883a 	add	r3,r3,r4
    87d0:	3884983a 	sll	r2,r7,r2
    87d4:	19c00017 	ldw	r7,0(r3)
    87d8:	1a3ffe04 	addi	r8,r3,-8
    87dc:	1144b03a 	or	r2,r2,r5
    87e0:	32000315 	stw	r8,12(r6)
    87e4:	31c00215 	stw	r7,8(r6)
    87e8:	20800115 	stw	r2,4(r4)
    87ec:	19800015 	stw	r6,0(r3)
    87f0:	39800315 	stw	r6,12(r7)
    87f4:	8809883a 	mov	r4,r17
    87f8:	dfc00217 	ldw	ra,8(sp)
    87fc:	dc400117 	ldw	r17,4(sp)
    8800:	dc000017 	ldw	r16,0(sp)
    8804:	dec00304 	addi	sp,sp,12
    8808:	00098201 	jmpi	9820 <__malloc_unlock>
    880c:	f800283a 	ret
    8810:	100ad27a 	srli	r5,r2,9
    8814:	00c00104 	movi	r3,4
    8818:	19404a36 	bltu	r3,r5,8944 <_free_r+0x240>
    881c:	100ad1ba 	srli	r5,r2,6
    8820:	28c00e44 	addi	r3,r5,57
    8824:	18c7883a 	add	r3,r3,r3
    8828:	29400e04 	addi	r5,r5,56
    882c:	18c7883a 	add	r3,r3,r3
    8830:	18c7883a 	add	r3,r3,r3
    8834:	1909883a 	add	r4,r3,r4
    8838:	20c00017 	ldw	r3,0(r4)
    883c:	01c00074 	movhi	r7,1
    8840:	213ffe04 	addi	r4,r4,-8
    8844:	39ed2f04 	addi	r7,r7,-19268
    8848:	20c04426 	beq	r4,r3,895c <_free_r+0x258>
    884c:	01ffff04 	movi	r7,-4
    8850:	19400117 	ldw	r5,4(r3)
    8854:	29ca703a 	and	r5,r5,r7
    8858:	1140022e 	bgeu	r2,r5,8864 <_free_r+0x160>
    885c:	18c00217 	ldw	r3,8(r3)
    8860:	20fffb1e 	bne	r4,r3,8850 <__alt_mem_epcs_flash_controller_0+0xff807850>
    8864:	19000317 	ldw	r4,12(r3)
    8868:	31000315 	stw	r4,12(r6)
    886c:	30c00215 	stw	r3,8(r6)
    8870:	21800215 	stw	r6,8(r4)
    8874:	19800315 	stw	r6,12(r3)
    8878:	003fde06 	br	87f4 <__alt_mem_epcs_flash_controller_0+0xff8077f4>
    887c:	29c00217 	ldw	r7,8(r5)
    8880:	10c5883a 	add	r2,r2,r3
    8884:	00c00074 	movhi	r3,1
    8888:	18ed3104 	addi	r3,r3,-19260
    888c:	38c03b26 	beq	r7,r3,897c <_free_r+0x278>
    8890:	2a000317 	ldw	r8,12(r5)
    8894:	11400054 	ori	r5,r2,1
    8898:	3087883a 	add	r3,r6,r2
    889c:	3a000315 	stw	r8,12(r7)
    88a0:	41c00215 	stw	r7,8(r8)
    88a4:	31400115 	stw	r5,4(r6)
    88a8:	18800015 	stw	r2,0(r3)
    88ac:	003fbd06 	br	87a4 <__alt_mem_epcs_flash_controller_0+0xff8077a4>
    88b0:	39c0004c 	andi	r7,r7,1
    88b4:	10c5883a 	add	r2,r2,r3
    88b8:	3800071e 	bne	r7,zero,88d8 <_free_r+0x1d4>
    88bc:	81fffe17 	ldw	r7,-8(r16)
    88c0:	31cdc83a 	sub	r6,r6,r7
    88c4:	30c00317 	ldw	r3,12(r6)
    88c8:	31400217 	ldw	r5,8(r6)
    88cc:	11c5883a 	add	r2,r2,r7
    88d0:	28c00315 	stw	r3,12(r5)
    88d4:	19400215 	stw	r5,8(r3)
    88d8:	10c00054 	ori	r3,r2,1
    88dc:	30c00115 	stw	r3,4(r6)
    88e0:	00c00074 	movhi	r3,1
    88e4:	18ee3f04 	addi	r3,r3,-18180
    88e8:	18c00017 	ldw	r3,0(r3)
    88ec:	21800215 	stw	r6,8(r4)
    88f0:	10ffc036 	bltu	r2,r3,87f4 <__alt_mem_epcs_flash_controller_0+0xff8077f4>
    88f4:	00800074 	movhi	r2,1
    88f8:	10b52304 	addi	r2,r2,-11124
    88fc:	11400017 	ldw	r5,0(r2)
    8900:	8809883a 	mov	r4,r17
    8904:	00085e00 	call	85e0 <_malloc_trim_r>
    8908:	003fba06 	br	87f4 <__alt_mem_epcs_flash_controller_0+0xff8077f4>
    890c:	28c9883a 	add	r4,r5,r3
    8910:	21000117 	ldw	r4,4(r4)
    8914:	2100004c 	andi	r4,r4,1
    8918:	2000391e 	bne	r4,zero,8a00 <_free_r+0x2fc>
    891c:	29c00217 	ldw	r7,8(r5)
    8920:	29000317 	ldw	r4,12(r5)
    8924:	1885883a 	add	r2,r3,r2
    8928:	10c00054 	ori	r3,r2,1
    892c:	39000315 	stw	r4,12(r7)
    8930:	21c00215 	stw	r7,8(r4)
    8934:	30c00115 	stw	r3,4(r6)
    8938:	308d883a 	add	r6,r6,r2
    893c:	30800015 	stw	r2,0(r6)
    8940:	003fac06 	br	87f4 <__alt_mem_epcs_flash_controller_0+0xff8077f4>
    8944:	00c00504 	movi	r3,20
    8948:	19401536 	bltu	r3,r5,89a0 <_free_r+0x29c>
    894c:	28c01704 	addi	r3,r5,92
    8950:	18c7883a 	add	r3,r3,r3
    8954:	294016c4 	addi	r5,r5,91
    8958:	003fb406 	br	882c <__alt_mem_epcs_flash_controller_0+0xff80782c>
    895c:	280bd0ba 	srai	r5,r5,2
    8960:	00c00044 	movi	r3,1
    8964:	38800117 	ldw	r2,4(r7)
    8968:	194a983a 	sll	r5,r3,r5
    896c:	2007883a 	mov	r3,r4
    8970:	2884b03a 	or	r2,r5,r2
    8974:	38800115 	stw	r2,4(r7)
    8978:	003fbb06 	br	8868 <__alt_mem_epcs_flash_controller_0+0xff807868>
    897c:	21800515 	stw	r6,20(r4)
    8980:	21800415 	stw	r6,16(r4)
    8984:	10c00054 	ori	r3,r2,1
    8988:	31c00315 	stw	r7,12(r6)
    898c:	31c00215 	stw	r7,8(r6)
    8990:	30c00115 	stw	r3,4(r6)
    8994:	308d883a 	add	r6,r6,r2
    8998:	30800015 	stw	r2,0(r6)
    899c:	003f9506 	br	87f4 <__alt_mem_epcs_flash_controller_0+0xff8077f4>
    89a0:	00c01504 	movi	r3,84
    89a4:	19400536 	bltu	r3,r5,89bc <_free_r+0x2b8>
    89a8:	100ad33a 	srli	r5,r2,12
    89ac:	28c01bc4 	addi	r3,r5,111
    89b0:	18c7883a 	add	r3,r3,r3
    89b4:	29401b84 	addi	r5,r5,110
    89b8:	003f9c06 	br	882c <__alt_mem_epcs_flash_controller_0+0xff80782c>
    89bc:	00c05504 	movi	r3,340
    89c0:	19400536 	bltu	r3,r5,89d8 <_free_r+0x2d4>
    89c4:	100ad3fa 	srli	r5,r2,15
    89c8:	28c01e04 	addi	r3,r5,120
    89cc:	18c7883a 	add	r3,r3,r3
    89d0:	29401dc4 	addi	r5,r5,119
    89d4:	003f9506 	br	882c <__alt_mem_epcs_flash_controller_0+0xff80782c>
    89d8:	00c15504 	movi	r3,1364
    89dc:	19400536 	bltu	r3,r5,89f4 <_free_r+0x2f0>
    89e0:	100ad4ba 	srli	r5,r2,18
    89e4:	28c01f44 	addi	r3,r5,125
    89e8:	18c7883a 	add	r3,r3,r3
    89ec:	29401f04 	addi	r5,r5,124
    89f0:	003f8e06 	br	882c <__alt_mem_epcs_flash_controller_0+0xff80782c>
    89f4:	00c03f84 	movi	r3,254
    89f8:	01401f84 	movi	r5,126
    89fc:	003f8b06 	br	882c <__alt_mem_epcs_flash_controller_0+0xff80782c>
    8a00:	10c00054 	ori	r3,r2,1
    8a04:	30c00115 	stw	r3,4(r6)
    8a08:	308d883a 	add	r6,r6,r2
    8a0c:	30800015 	stw	r2,0(r6)
    8a10:	003f7806 	br	87f4 <__alt_mem_epcs_flash_controller_0+0xff8077f4>

00008a14 <_fwalk>:
    8a14:	defff704 	addi	sp,sp,-36
    8a18:	dd000415 	stw	r20,16(sp)
    8a1c:	dfc00815 	stw	ra,32(sp)
    8a20:	ddc00715 	stw	r23,28(sp)
    8a24:	dd800615 	stw	r22,24(sp)
    8a28:	dd400515 	stw	r21,20(sp)
    8a2c:	dcc00315 	stw	r19,12(sp)
    8a30:	dc800215 	stw	r18,8(sp)
    8a34:	dc400115 	stw	r17,4(sp)
    8a38:	dc000015 	stw	r16,0(sp)
    8a3c:	2500b804 	addi	r20,r4,736
    8a40:	a0002326 	beq	r20,zero,8ad0 <_fwalk+0xbc>
    8a44:	282b883a 	mov	r21,r5
    8a48:	002f883a 	mov	r23,zero
    8a4c:	05800044 	movi	r22,1
    8a50:	04ffffc4 	movi	r19,-1
    8a54:	a4400117 	ldw	r17,4(r20)
    8a58:	a4800217 	ldw	r18,8(r20)
    8a5c:	8c7fffc4 	addi	r17,r17,-1
    8a60:	88000d16 	blt	r17,zero,8a98 <_fwalk+0x84>
    8a64:	94000304 	addi	r16,r18,12
    8a68:	94800384 	addi	r18,r18,14
    8a6c:	8080000b 	ldhu	r2,0(r16)
    8a70:	8c7fffc4 	addi	r17,r17,-1
    8a74:	813ffd04 	addi	r4,r16,-12
    8a78:	b080042e 	bgeu	r22,r2,8a8c <_fwalk+0x78>
    8a7c:	9080000f 	ldh	r2,0(r18)
    8a80:	14c00226 	beq	r2,r19,8a8c <_fwalk+0x78>
    8a84:	a83ee83a 	callr	r21
    8a88:	b8aeb03a 	or	r23,r23,r2
    8a8c:	84001a04 	addi	r16,r16,104
    8a90:	94801a04 	addi	r18,r18,104
    8a94:	8cfff51e 	bne	r17,r19,8a6c <__alt_mem_epcs_flash_controller_0+0xff807a6c>
    8a98:	a5000017 	ldw	r20,0(r20)
    8a9c:	a03fed1e 	bne	r20,zero,8a54 <__alt_mem_epcs_flash_controller_0+0xff807a54>
    8aa0:	b805883a 	mov	r2,r23
    8aa4:	dfc00817 	ldw	ra,32(sp)
    8aa8:	ddc00717 	ldw	r23,28(sp)
    8aac:	dd800617 	ldw	r22,24(sp)
    8ab0:	dd400517 	ldw	r21,20(sp)
    8ab4:	dd000417 	ldw	r20,16(sp)
    8ab8:	dcc00317 	ldw	r19,12(sp)
    8abc:	dc800217 	ldw	r18,8(sp)
    8ac0:	dc400117 	ldw	r17,4(sp)
    8ac4:	dc000017 	ldw	r16,0(sp)
    8ac8:	dec00904 	addi	sp,sp,36
    8acc:	f800283a 	ret
    8ad0:	002f883a 	mov	r23,zero
    8ad4:	003ff206 	br	8aa0 <__alt_mem_epcs_flash_controller_0+0xff807aa0>

00008ad8 <_fwalk_reent>:
    8ad8:	defff704 	addi	sp,sp,-36
    8adc:	dd000415 	stw	r20,16(sp)
    8ae0:	dfc00815 	stw	ra,32(sp)
    8ae4:	ddc00715 	stw	r23,28(sp)
    8ae8:	dd800615 	stw	r22,24(sp)
    8aec:	dd400515 	stw	r21,20(sp)
    8af0:	dcc00315 	stw	r19,12(sp)
    8af4:	dc800215 	stw	r18,8(sp)
    8af8:	dc400115 	stw	r17,4(sp)
    8afc:	dc000015 	stw	r16,0(sp)
    8b00:	2500b804 	addi	r20,r4,736
    8b04:	a0002326 	beq	r20,zero,8b94 <_fwalk_reent+0xbc>
    8b08:	282b883a 	mov	r21,r5
    8b0c:	2027883a 	mov	r19,r4
    8b10:	002f883a 	mov	r23,zero
    8b14:	05800044 	movi	r22,1
    8b18:	04bfffc4 	movi	r18,-1
    8b1c:	a4400117 	ldw	r17,4(r20)
    8b20:	a4000217 	ldw	r16,8(r20)
    8b24:	8c7fffc4 	addi	r17,r17,-1
    8b28:	88000c16 	blt	r17,zero,8b5c <_fwalk_reent+0x84>
    8b2c:	84000304 	addi	r16,r16,12
    8b30:	8080000b 	ldhu	r2,0(r16)
    8b34:	8c7fffc4 	addi	r17,r17,-1
    8b38:	817ffd04 	addi	r5,r16,-12
    8b3c:	b080052e 	bgeu	r22,r2,8b54 <_fwalk_reent+0x7c>
    8b40:	8080008f 	ldh	r2,2(r16)
    8b44:	9809883a 	mov	r4,r19
    8b48:	14800226 	beq	r2,r18,8b54 <_fwalk_reent+0x7c>
    8b4c:	a83ee83a 	callr	r21
    8b50:	b8aeb03a 	or	r23,r23,r2
    8b54:	84001a04 	addi	r16,r16,104
    8b58:	8cbff51e 	bne	r17,r18,8b30 <__alt_mem_epcs_flash_controller_0+0xff807b30>
    8b5c:	a5000017 	ldw	r20,0(r20)
    8b60:	a03fee1e 	bne	r20,zero,8b1c <__alt_mem_epcs_flash_controller_0+0xff807b1c>
    8b64:	b805883a 	mov	r2,r23
    8b68:	dfc00817 	ldw	ra,32(sp)
    8b6c:	ddc00717 	ldw	r23,28(sp)
    8b70:	dd800617 	ldw	r22,24(sp)
    8b74:	dd400517 	ldw	r21,20(sp)
    8b78:	dd000417 	ldw	r20,16(sp)
    8b7c:	dcc00317 	ldw	r19,12(sp)
    8b80:	dc800217 	ldw	r18,8(sp)
    8b84:	dc400117 	ldw	r17,4(sp)
    8b88:	dc000017 	ldw	r16,0(sp)
    8b8c:	dec00904 	addi	sp,sp,36
    8b90:	f800283a 	ret
    8b94:	002f883a 	mov	r23,zero
    8b98:	003ff206 	br	8b64 <__alt_mem_epcs_flash_controller_0+0xff807b64>

00008b9c <__smakebuf_r>:
    8b9c:	2880030b 	ldhu	r2,12(r5)
    8ba0:	10c0008c 	andi	r3,r2,2
    8ba4:	1800411e 	bne	r3,zero,8cac <__smakebuf_r+0x110>
    8ba8:	deffec04 	addi	sp,sp,-80
    8bac:	dc000f15 	stw	r16,60(sp)
    8bb0:	2821883a 	mov	r16,r5
    8bb4:	2940038f 	ldh	r5,14(r5)
    8bb8:	dc401015 	stw	r17,64(sp)
    8bbc:	dfc01315 	stw	ra,76(sp)
    8bc0:	dcc01215 	stw	r19,72(sp)
    8bc4:	dc801115 	stw	r18,68(sp)
    8bc8:	2023883a 	mov	r17,r4
    8bcc:	28001c16 	blt	r5,zero,8c40 <__smakebuf_r+0xa4>
    8bd0:	d80d883a 	mov	r6,sp
    8bd4:	00093640 	call	9364 <_fstat_r>
    8bd8:	10001816 	blt	r2,zero,8c3c <__smakebuf_r+0xa0>
    8bdc:	d8800117 	ldw	r2,4(sp)
    8be0:	00e00014 	movui	r3,32768
    8be4:	10bc000c 	andi	r2,r2,61440
    8be8:	14c80020 	cmpeqi	r19,r2,8192
    8bec:	10c03726 	beq	r2,r3,8ccc <__smakebuf_r+0x130>
    8bf0:	80c0030b 	ldhu	r3,12(r16)
    8bf4:	18c20014 	ori	r3,r3,2048
    8bf8:	80c0030d 	sth	r3,12(r16)
    8bfc:	00c80004 	movi	r3,8192
    8c00:	10c0521e 	bne	r2,r3,8d4c <__smakebuf_r+0x1b0>
    8c04:	8140038f 	ldh	r5,14(r16)
    8c08:	8809883a 	mov	r4,r17
    8c0c:	00093c00 	call	93c0 <_isatty_r>
    8c10:	10004c26 	beq	r2,zero,8d44 <__smakebuf_r+0x1a8>
    8c14:	8080030b 	ldhu	r2,12(r16)
    8c18:	80c010c4 	addi	r3,r16,67
    8c1c:	80c00015 	stw	r3,0(r16)
    8c20:	10800054 	ori	r2,r2,1
    8c24:	8080030d 	sth	r2,12(r16)
    8c28:	00800044 	movi	r2,1
    8c2c:	80c00415 	stw	r3,16(r16)
    8c30:	80800515 	stw	r2,20(r16)
    8c34:	04810004 	movi	r18,1024
    8c38:	00000706 	br	8c58 <__smakebuf_r+0xbc>
    8c3c:	8080030b 	ldhu	r2,12(r16)
    8c40:	10c0200c 	andi	r3,r2,128
    8c44:	18001f1e 	bne	r3,zero,8cc4 <__smakebuf_r+0x128>
    8c48:	04810004 	movi	r18,1024
    8c4c:	10820014 	ori	r2,r2,2048
    8c50:	8080030d 	sth	r2,12(r16)
    8c54:	0027883a 	mov	r19,zero
    8c58:	900b883a 	mov	r5,r18
    8c5c:	8809883a 	mov	r4,r17
    8c60:	00068b40 	call	68b4 <_malloc_r>
    8c64:	10002c26 	beq	r2,zero,8d18 <__smakebuf_r+0x17c>
    8c68:	80c0030b 	ldhu	r3,12(r16)
    8c6c:	01000074 	movhi	r4,1
    8c70:	21208e04 	addi	r4,r4,-32200
    8c74:	89000f15 	stw	r4,60(r17)
    8c78:	18c02014 	ori	r3,r3,128
    8c7c:	80c0030d 	sth	r3,12(r16)
    8c80:	80800015 	stw	r2,0(r16)
    8c84:	80800415 	stw	r2,16(r16)
    8c88:	84800515 	stw	r18,20(r16)
    8c8c:	98001a1e 	bne	r19,zero,8cf8 <__smakebuf_r+0x15c>
    8c90:	dfc01317 	ldw	ra,76(sp)
    8c94:	dcc01217 	ldw	r19,72(sp)
    8c98:	dc801117 	ldw	r18,68(sp)
    8c9c:	dc401017 	ldw	r17,64(sp)
    8ca0:	dc000f17 	ldw	r16,60(sp)
    8ca4:	dec01404 	addi	sp,sp,80
    8ca8:	f800283a 	ret
    8cac:	288010c4 	addi	r2,r5,67
    8cb0:	28800015 	stw	r2,0(r5)
    8cb4:	28800415 	stw	r2,16(r5)
    8cb8:	00800044 	movi	r2,1
    8cbc:	28800515 	stw	r2,20(r5)
    8cc0:	f800283a 	ret
    8cc4:	04801004 	movi	r18,64
    8cc8:	003fe006 	br	8c4c <__alt_mem_epcs_flash_controller_0+0xff807c4c>
    8ccc:	81000a17 	ldw	r4,40(r16)
    8cd0:	00c00074 	movhi	r3,1
    8cd4:	18e45204 	addi	r3,r3,-28344
    8cd8:	20ffc51e 	bne	r4,r3,8bf0 <__alt_mem_epcs_flash_controller_0+0xff807bf0>
    8cdc:	8080030b 	ldhu	r2,12(r16)
    8ce0:	04810004 	movi	r18,1024
    8ce4:	84801315 	stw	r18,76(r16)
    8ce8:	1484b03a 	or	r2,r2,r18
    8cec:	8080030d 	sth	r2,12(r16)
    8cf0:	0027883a 	mov	r19,zero
    8cf4:	003fd806 	br	8c58 <__alt_mem_epcs_flash_controller_0+0xff807c58>
    8cf8:	8140038f 	ldh	r5,14(r16)
    8cfc:	8809883a 	mov	r4,r17
    8d00:	00093c00 	call	93c0 <_isatty_r>
    8d04:	103fe226 	beq	r2,zero,8c90 <__alt_mem_epcs_flash_controller_0+0xff807c90>
    8d08:	8080030b 	ldhu	r2,12(r16)
    8d0c:	10800054 	ori	r2,r2,1
    8d10:	8080030d 	sth	r2,12(r16)
    8d14:	003fde06 	br	8c90 <__alt_mem_epcs_flash_controller_0+0xff807c90>
    8d18:	8080030b 	ldhu	r2,12(r16)
    8d1c:	10c0800c 	andi	r3,r2,512
    8d20:	183fdb1e 	bne	r3,zero,8c90 <__alt_mem_epcs_flash_controller_0+0xff807c90>
    8d24:	10800094 	ori	r2,r2,2
    8d28:	80c010c4 	addi	r3,r16,67
    8d2c:	8080030d 	sth	r2,12(r16)
    8d30:	00800044 	movi	r2,1
    8d34:	80c00015 	stw	r3,0(r16)
    8d38:	80c00415 	stw	r3,16(r16)
    8d3c:	80800515 	stw	r2,20(r16)
    8d40:	003fd306 	br	8c90 <__alt_mem_epcs_flash_controller_0+0xff807c90>
    8d44:	04810004 	movi	r18,1024
    8d48:	003fc306 	br	8c58 <__alt_mem_epcs_flash_controller_0+0xff807c58>
    8d4c:	0027883a 	mov	r19,zero
    8d50:	04810004 	movi	r18,1024
    8d54:	003fc006 	br	8c58 <__alt_mem_epcs_flash_controller_0+0xff807c58>

00008d58 <memset>:
    8d58:	20c000cc 	andi	r3,r4,3
    8d5c:	2005883a 	mov	r2,r4
    8d60:	18004426 	beq	r3,zero,8e74 <memset+0x11c>
    8d64:	31ffffc4 	addi	r7,r6,-1
    8d68:	30004026 	beq	r6,zero,8e6c <memset+0x114>
    8d6c:	2813883a 	mov	r9,r5
    8d70:	200d883a 	mov	r6,r4
    8d74:	2007883a 	mov	r3,r4
    8d78:	00000406 	br	8d8c <memset+0x34>
    8d7c:	3a3fffc4 	addi	r8,r7,-1
    8d80:	31800044 	addi	r6,r6,1
    8d84:	38003926 	beq	r7,zero,8e6c <memset+0x114>
    8d88:	400f883a 	mov	r7,r8
    8d8c:	18c00044 	addi	r3,r3,1
    8d90:	32400005 	stb	r9,0(r6)
    8d94:	1a0000cc 	andi	r8,r3,3
    8d98:	403ff81e 	bne	r8,zero,8d7c <__alt_mem_epcs_flash_controller_0+0xff807d7c>
    8d9c:	010000c4 	movi	r4,3
    8da0:	21c02d2e 	bgeu	r4,r7,8e58 <memset+0x100>
    8da4:	29003fcc 	andi	r4,r5,255
    8da8:	200c923a 	slli	r6,r4,8
    8dac:	3108b03a 	or	r4,r6,r4
    8db0:	200c943a 	slli	r6,r4,16
    8db4:	218cb03a 	or	r6,r4,r6
    8db8:	010003c4 	movi	r4,15
    8dbc:	21c0182e 	bgeu	r4,r7,8e20 <memset+0xc8>
    8dc0:	3b3ffc04 	addi	r12,r7,-16
    8dc4:	6018d13a 	srli	r12,r12,4
    8dc8:	1a000104 	addi	r8,r3,4
    8dcc:	1ac00204 	addi	r11,r3,8
    8dd0:	6008913a 	slli	r4,r12,4
    8dd4:	1a800304 	addi	r10,r3,12
    8dd8:	1813883a 	mov	r9,r3
    8ddc:	21000504 	addi	r4,r4,20
    8de0:	1909883a 	add	r4,r3,r4
    8de4:	49800015 	stw	r6,0(r9)
    8de8:	41800015 	stw	r6,0(r8)
    8dec:	59800015 	stw	r6,0(r11)
    8df0:	51800015 	stw	r6,0(r10)
    8df4:	42000404 	addi	r8,r8,16
    8df8:	4a400404 	addi	r9,r9,16
    8dfc:	5ac00404 	addi	r11,r11,16
    8e00:	52800404 	addi	r10,r10,16
    8e04:	413ff71e 	bne	r8,r4,8de4 <__alt_mem_epcs_flash_controller_0+0xff807de4>
    8e08:	63000044 	addi	r12,r12,1
    8e0c:	6018913a 	slli	r12,r12,4
    8e10:	39c003cc 	andi	r7,r7,15
    8e14:	010000c4 	movi	r4,3
    8e18:	1b07883a 	add	r3,r3,r12
    8e1c:	21c00e2e 	bgeu	r4,r7,8e58 <memset+0x100>
    8e20:	1813883a 	mov	r9,r3
    8e24:	3811883a 	mov	r8,r7
    8e28:	010000c4 	movi	r4,3
    8e2c:	49800015 	stw	r6,0(r9)
    8e30:	423fff04 	addi	r8,r8,-4
    8e34:	4a400104 	addi	r9,r9,4
    8e38:	223ffc36 	bltu	r4,r8,8e2c <__alt_mem_epcs_flash_controller_0+0xff807e2c>
    8e3c:	393fff04 	addi	r4,r7,-4
    8e40:	2008d0ba 	srli	r4,r4,2
    8e44:	39c000cc 	andi	r7,r7,3
    8e48:	21000044 	addi	r4,r4,1
    8e4c:	2109883a 	add	r4,r4,r4
    8e50:	2109883a 	add	r4,r4,r4
    8e54:	1907883a 	add	r3,r3,r4
    8e58:	38000526 	beq	r7,zero,8e70 <memset+0x118>
    8e5c:	19cf883a 	add	r7,r3,r7
    8e60:	19400005 	stb	r5,0(r3)
    8e64:	18c00044 	addi	r3,r3,1
    8e68:	38fffd1e 	bne	r7,r3,8e60 <__alt_mem_epcs_flash_controller_0+0xff807e60>
    8e6c:	f800283a 	ret
    8e70:	f800283a 	ret
    8e74:	2007883a 	mov	r3,r4
    8e78:	300f883a 	mov	r7,r6
    8e7c:	003fc706 	br	8d9c <__alt_mem_epcs_flash_controller_0+0xff807d9c>

00008e80 <lflush>:
    8e80:	2080030b 	ldhu	r2,12(r4)
    8e84:	00c00244 	movi	r3,9
    8e88:	1080024c 	andi	r2,r2,9
    8e8c:	10c00226 	beq	r2,r3,8e98 <lflush+0x18>
    8e90:	0005883a 	mov	r2,zero
    8e94:	f800283a 	ret
    8e98:	00082001 	jmpi	8200 <fflush>

00008e9c <__srefill_r>:
    8e9c:	defffc04 	addi	sp,sp,-16
    8ea0:	dc400115 	stw	r17,4(sp)
    8ea4:	dc000015 	stw	r16,0(sp)
    8ea8:	dfc00315 	stw	ra,12(sp)
    8eac:	dc800215 	stw	r18,8(sp)
    8eb0:	2023883a 	mov	r17,r4
    8eb4:	2821883a 	mov	r16,r5
    8eb8:	20000226 	beq	r4,zero,8ec4 <__srefill_r+0x28>
    8ebc:	20800e17 	ldw	r2,56(r4)
    8ec0:	10003c26 	beq	r2,zero,8fb4 <__srefill_r+0x118>
    8ec4:	80c0030b 	ldhu	r3,12(r16)
    8ec8:	1908000c 	andi	r4,r3,8192
    8ecc:	1805883a 	mov	r2,r3
    8ed0:	2000071e 	bne	r4,zero,8ef0 <__srefill_r+0x54>
    8ed4:	81001917 	ldw	r4,100(r16)
    8ed8:	18880014 	ori	r2,r3,8192
    8edc:	00f7ffc4 	movi	r3,-8193
    8ee0:	20c8703a 	and	r4,r4,r3
    8ee4:	8080030d 	sth	r2,12(r16)
    8ee8:	1007883a 	mov	r3,r2
    8eec:	81001915 	stw	r4,100(r16)
    8ef0:	80000115 	stw	zero,4(r16)
    8ef4:	1100080c 	andi	r4,r2,32
    8ef8:	2000571e 	bne	r4,zero,9058 <__srefill_r+0x1bc>
    8efc:	1100010c 	andi	r4,r2,4
    8f00:	20001f26 	beq	r4,zero,8f80 <__srefill_r+0xe4>
    8f04:	81400c17 	ldw	r5,48(r16)
    8f08:	28000826 	beq	r5,zero,8f2c <__srefill_r+0x90>
    8f0c:	80801004 	addi	r2,r16,64
    8f10:	28800226 	beq	r5,r2,8f1c <__srefill_r+0x80>
    8f14:	8809883a 	mov	r4,r17
    8f18:	00087040 	call	8704 <_free_r>
    8f1c:	80800f17 	ldw	r2,60(r16)
    8f20:	80000c15 	stw	zero,48(r16)
    8f24:	80800115 	stw	r2,4(r16)
    8f28:	1000391e 	bne	r2,zero,9010 <__srefill_r+0x174>
    8f2c:	80800417 	ldw	r2,16(r16)
    8f30:	10004b26 	beq	r2,zero,9060 <__srefill_r+0x1c4>
    8f34:	8480030b 	ldhu	r18,12(r16)
    8f38:	908000cc 	andi	r2,r18,3
    8f3c:	10001f1e 	bne	r2,zero,8fbc <__srefill_r+0x120>
    8f40:	81800417 	ldw	r6,16(r16)
    8f44:	80800817 	ldw	r2,32(r16)
    8f48:	81c00517 	ldw	r7,20(r16)
    8f4c:	81400717 	ldw	r5,28(r16)
    8f50:	81800015 	stw	r6,0(r16)
    8f54:	8809883a 	mov	r4,r17
    8f58:	103ee83a 	callr	r2
    8f5c:	80800115 	stw	r2,4(r16)
    8f60:	00800e0e 	bge	zero,r2,8f9c <__srefill_r+0x100>
    8f64:	0005883a 	mov	r2,zero
    8f68:	dfc00317 	ldw	ra,12(sp)
    8f6c:	dc800217 	ldw	r18,8(sp)
    8f70:	dc400117 	ldw	r17,4(sp)
    8f74:	dc000017 	ldw	r16,0(sp)
    8f78:	dec00404 	addi	sp,sp,16
    8f7c:	f800283a 	ret
    8f80:	1100040c 	andi	r4,r2,16
    8f84:	20003026 	beq	r4,zero,9048 <__srefill_r+0x1ac>
    8f88:	1080020c 	andi	r2,r2,8
    8f8c:	1000241e 	bne	r2,zero,9020 <__srefill_r+0x184>
    8f90:	18c00114 	ori	r3,r3,4
    8f94:	80c0030d 	sth	r3,12(r16)
    8f98:	003fe406 	br	8f2c <__alt_mem_epcs_flash_controller_0+0xff807f2c>
    8f9c:	80c0030b 	ldhu	r3,12(r16)
    8fa0:	1000161e 	bne	r2,zero,8ffc <__srefill_r+0x160>
    8fa4:	18c00814 	ori	r3,r3,32
    8fa8:	00bfffc4 	movi	r2,-1
    8fac:	80c0030d 	sth	r3,12(r16)
    8fb0:	003fed06 	br	8f68 <__alt_mem_epcs_flash_controller_0+0xff807f68>
    8fb4:	00085900 	call	8590 <__sinit>
    8fb8:	003fc206 	br	8ec4 <__alt_mem_epcs_flash_controller_0+0xff807ec4>
    8fbc:	00800074 	movhi	r2,1
    8fc0:	10ae3c04 	addi	r2,r2,-18192
    8fc4:	11000017 	ldw	r4,0(r2)
    8fc8:	01400074 	movhi	r5,1
    8fcc:	00800044 	movi	r2,1
    8fd0:	2963a004 	addi	r5,r5,-29056
    8fd4:	8080030d 	sth	r2,12(r16)
    8fd8:	0008a140 	call	8a14 <_fwalk>
    8fdc:	00800244 	movi	r2,9
    8fe0:	8480030d 	sth	r18,12(r16)
    8fe4:	9480024c 	andi	r18,r18,9
    8fe8:	90bfd51e 	bne	r18,r2,8f40 <__alt_mem_epcs_flash_controller_0+0xff807f40>
    8fec:	800b883a 	mov	r5,r16
    8ff0:	8809883a 	mov	r4,r17
    8ff4:	0007f880 	call	7f88 <__sflush_r>
    8ff8:	003fd106 	br	8f40 <__alt_mem_epcs_flash_controller_0+0xff807f40>
    8ffc:	18c01014 	ori	r3,r3,64
    9000:	80000115 	stw	zero,4(r16)
    9004:	00bfffc4 	movi	r2,-1
    9008:	80c0030d 	sth	r3,12(r16)
    900c:	003fd606 	br	8f68 <__alt_mem_epcs_flash_controller_0+0xff807f68>
    9010:	80c00e17 	ldw	r3,56(r16)
    9014:	0005883a 	mov	r2,zero
    9018:	80c00015 	stw	r3,0(r16)
    901c:	003fd206 	br	8f68 <__alt_mem_epcs_flash_controller_0+0xff807f68>
    9020:	800b883a 	mov	r5,r16
    9024:	8809883a 	mov	r4,r17
    9028:	00081a40 	call	81a4 <_fflush_r>
    902c:	10000a1e 	bne	r2,zero,9058 <__srefill_r+0x1bc>
    9030:	8080030b 	ldhu	r2,12(r16)
    9034:	00fffdc4 	movi	r3,-9
    9038:	80000215 	stw	zero,8(r16)
    903c:	1886703a 	and	r3,r3,r2
    9040:	80000615 	stw	zero,24(r16)
    9044:	003fd206 	br	8f90 <__alt_mem_epcs_flash_controller_0+0xff807f90>
    9048:	00800244 	movi	r2,9
    904c:	88800015 	stw	r2,0(r17)
    9050:	18c01014 	ori	r3,r3,64
    9054:	80c0030d 	sth	r3,12(r16)
    9058:	00bfffc4 	movi	r2,-1
    905c:	003fc206 	br	8f68 <__alt_mem_epcs_flash_controller_0+0xff807f68>
    9060:	800b883a 	mov	r5,r16
    9064:	8809883a 	mov	r4,r17
    9068:	0008b9c0 	call	8b9c <__smakebuf_r>
    906c:	003fb106 	br	8f34 <__alt_mem_epcs_flash_controller_0+0xff807f34>

00009070 <__sread>:
    9070:	defffe04 	addi	sp,sp,-8
    9074:	dc000015 	stw	r16,0(sp)
    9078:	2821883a 	mov	r16,r5
    907c:	2940038f 	ldh	r5,14(r5)
    9080:	dfc00115 	stw	ra,4(sp)
    9084:	00094740 	call	9474 <_read_r>
    9088:	10000716 	blt	r2,zero,90a8 <__sread+0x38>
    908c:	80c01417 	ldw	r3,80(r16)
    9090:	1887883a 	add	r3,r3,r2
    9094:	80c01415 	stw	r3,80(r16)
    9098:	dfc00117 	ldw	ra,4(sp)
    909c:	dc000017 	ldw	r16,0(sp)
    90a0:	dec00204 	addi	sp,sp,8
    90a4:	f800283a 	ret
    90a8:	80c0030b 	ldhu	r3,12(r16)
    90ac:	18fbffcc 	andi	r3,r3,61439
    90b0:	80c0030d 	sth	r3,12(r16)
    90b4:	dfc00117 	ldw	ra,4(sp)
    90b8:	dc000017 	ldw	r16,0(sp)
    90bc:	dec00204 	addi	sp,sp,8
    90c0:	f800283a 	ret

000090c4 <__seofread>:
    90c4:	0005883a 	mov	r2,zero
    90c8:	f800283a 	ret

000090cc <__swrite>:
    90cc:	2880030b 	ldhu	r2,12(r5)
    90d0:	defffb04 	addi	sp,sp,-20
    90d4:	dcc00315 	stw	r19,12(sp)
    90d8:	dc800215 	stw	r18,8(sp)
    90dc:	dc400115 	stw	r17,4(sp)
    90e0:	dc000015 	stw	r16,0(sp)
    90e4:	dfc00415 	stw	ra,16(sp)
    90e8:	10c0400c 	andi	r3,r2,256
    90ec:	2821883a 	mov	r16,r5
    90f0:	2023883a 	mov	r17,r4
    90f4:	3025883a 	mov	r18,r6
    90f8:	3827883a 	mov	r19,r7
    90fc:	18000526 	beq	r3,zero,9114 <__swrite+0x48>
    9100:	2940038f 	ldh	r5,14(r5)
    9104:	01c00084 	movi	r7,2
    9108:	000d883a 	mov	r6,zero
    910c:	00094140 	call	9414 <_lseek_r>
    9110:	8080030b 	ldhu	r2,12(r16)
    9114:	8140038f 	ldh	r5,14(r16)
    9118:	10bbffcc 	andi	r2,r2,61439
    911c:	980f883a 	mov	r7,r19
    9120:	900d883a 	mov	r6,r18
    9124:	8809883a 	mov	r4,r17
    9128:	8080030d 	sth	r2,12(r16)
    912c:	dfc00417 	ldw	ra,16(sp)
    9130:	dcc00317 	ldw	r19,12(sp)
    9134:	dc800217 	ldw	r18,8(sp)
    9138:	dc400117 	ldw	r17,4(sp)
    913c:	dc000017 	ldw	r16,0(sp)
    9140:	dec00504 	addi	sp,sp,20
    9144:	00091ac1 	jmpi	91ac <_write_r>

00009148 <__sseek>:
    9148:	defffe04 	addi	sp,sp,-8
    914c:	dc000015 	stw	r16,0(sp)
    9150:	2821883a 	mov	r16,r5
    9154:	2940038f 	ldh	r5,14(r5)
    9158:	dfc00115 	stw	ra,4(sp)
    915c:	00094140 	call	9414 <_lseek_r>
    9160:	00ffffc4 	movi	r3,-1
    9164:	10c00826 	beq	r2,r3,9188 <__sseek+0x40>
    9168:	80c0030b 	ldhu	r3,12(r16)
    916c:	80801415 	stw	r2,80(r16)
    9170:	18c40014 	ori	r3,r3,4096
    9174:	80c0030d 	sth	r3,12(r16)
    9178:	dfc00117 	ldw	ra,4(sp)
    917c:	dc000017 	ldw	r16,0(sp)
    9180:	dec00204 	addi	sp,sp,8
    9184:	f800283a 	ret
    9188:	80c0030b 	ldhu	r3,12(r16)
    918c:	18fbffcc 	andi	r3,r3,61439
    9190:	80c0030d 	sth	r3,12(r16)
    9194:	dfc00117 	ldw	ra,4(sp)
    9198:	dc000017 	ldw	r16,0(sp)
    919c:	dec00204 	addi	sp,sp,8
    91a0:	f800283a 	ret

000091a4 <__sclose>:
    91a4:	2940038f 	ldh	r5,14(r5)
    91a8:	000920c1 	jmpi	920c <_close_r>

000091ac <_write_r>:
    91ac:	defffd04 	addi	sp,sp,-12
    91b0:	2805883a 	mov	r2,r5
    91b4:	dc000015 	stw	r16,0(sp)
    91b8:	04000074 	movhi	r16,1
    91bc:	dc400115 	stw	r17,4(sp)
    91c0:	300b883a 	mov	r5,r6
    91c4:	84352004 	addi	r16,r16,-11136
    91c8:	2023883a 	mov	r17,r4
    91cc:	380d883a 	mov	r6,r7
    91d0:	1009883a 	mov	r4,r2
    91d4:	dfc00215 	stw	ra,8(sp)
    91d8:	80000015 	stw	zero,0(r16)
    91dc:	0009a700 	call	9a70 <write>
    91e0:	00ffffc4 	movi	r3,-1
    91e4:	10c00526 	beq	r2,r3,91fc <_write_r+0x50>
    91e8:	dfc00217 	ldw	ra,8(sp)
    91ec:	dc400117 	ldw	r17,4(sp)
    91f0:	dc000017 	ldw	r16,0(sp)
    91f4:	dec00304 	addi	sp,sp,12
    91f8:	f800283a 	ret
    91fc:	80c00017 	ldw	r3,0(r16)
    9200:	183ff926 	beq	r3,zero,91e8 <__alt_mem_epcs_flash_controller_0+0xff8081e8>
    9204:	88c00015 	stw	r3,0(r17)
    9208:	003ff706 	br	91e8 <__alt_mem_epcs_flash_controller_0+0xff8081e8>

0000920c <_close_r>:
    920c:	defffd04 	addi	sp,sp,-12
    9210:	dc000015 	stw	r16,0(sp)
    9214:	04000074 	movhi	r16,1
    9218:	dc400115 	stw	r17,4(sp)
    921c:	84352004 	addi	r16,r16,-11136
    9220:	2023883a 	mov	r17,r4
    9224:	2809883a 	mov	r4,r5
    9228:	dfc00215 	stw	ra,8(sp)
    922c:	80000015 	stw	zero,0(r16)
    9230:	00050900 	call	5090 <close>
    9234:	00ffffc4 	movi	r3,-1
    9238:	10c00526 	beq	r2,r3,9250 <_close_r+0x44>
    923c:	dfc00217 	ldw	ra,8(sp)
    9240:	dc400117 	ldw	r17,4(sp)
    9244:	dc000017 	ldw	r16,0(sp)
    9248:	dec00304 	addi	sp,sp,12
    924c:	f800283a 	ret
    9250:	80c00017 	ldw	r3,0(r16)
    9254:	183ff926 	beq	r3,zero,923c <__alt_mem_epcs_flash_controller_0+0xff80823c>
    9258:	88c00015 	stw	r3,0(r17)
    925c:	003ff706 	br	923c <__alt_mem_epcs_flash_controller_0+0xff80823c>

00009260 <_fclose_r>:
    9260:	28003926 	beq	r5,zero,9348 <_fclose_r+0xe8>
    9264:	defffc04 	addi	sp,sp,-16
    9268:	dc400115 	stw	r17,4(sp)
    926c:	dc000015 	stw	r16,0(sp)
    9270:	dfc00315 	stw	ra,12(sp)
    9274:	dc800215 	stw	r18,8(sp)
    9278:	2023883a 	mov	r17,r4
    927c:	2821883a 	mov	r16,r5
    9280:	20000226 	beq	r4,zero,928c <_fclose_r+0x2c>
    9284:	20800e17 	ldw	r2,56(r4)
    9288:	10002726 	beq	r2,zero,9328 <_fclose_r+0xc8>
    928c:	8080030f 	ldh	r2,12(r16)
    9290:	1000071e 	bne	r2,zero,92b0 <_fclose_r+0x50>
    9294:	0005883a 	mov	r2,zero
    9298:	dfc00317 	ldw	ra,12(sp)
    929c:	dc800217 	ldw	r18,8(sp)
    92a0:	dc400117 	ldw	r17,4(sp)
    92a4:	dc000017 	ldw	r16,0(sp)
    92a8:	dec00404 	addi	sp,sp,16
    92ac:	f800283a 	ret
    92b0:	800b883a 	mov	r5,r16
    92b4:	8809883a 	mov	r4,r17
    92b8:	0007f880 	call	7f88 <__sflush_r>
    92bc:	1025883a 	mov	r18,r2
    92c0:	80800b17 	ldw	r2,44(r16)
    92c4:	10000426 	beq	r2,zero,92d8 <_fclose_r+0x78>
    92c8:	81400717 	ldw	r5,28(r16)
    92cc:	8809883a 	mov	r4,r17
    92d0:	103ee83a 	callr	r2
    92d4:	10001616 	blt	r2,zero,9330 <_fclose_r+0xd0>
    92d8:	8080030b 	ldhu	r2,12(r16)
    92dc:	1080200c 	andi	r2,r2,128
    92e0:	1000151e 	bne	r2,zero,9338 <_fclose_r+0xd8>
    92e4:	81400c17 	ldw	r5,48(r16)
    92e8:	28000526 	beq	r5,zero,9300 <_fclose_r+0xa0>
    92ec:	80801004 	addi	r2,r16,64
    92f0:	28800226 	beq	r5,r2,92fc <_fclose_r+0x9c>
    92f4:	8809883a 	mov	r4,r17
    92f8:	00087040 	call	8704 <_free_r>
    92fc:	80000c15 	stw	zero,48(r16)
    9300:	81401117 	ldw	r5,68(r16)
    9304:	28000326 	beq	r5,zero,9314 <_fclose_r+0xb4>
    9308:	8809883a 	mov	r4,r17
    930c:	00087040 	call	8704 <_free_r>
    9310:	80001115 	stw	zero,68(r16)
    9314:	00085a00 	call	85a0 <__sfp_lock_acquire>
    9318:	8000030d 	sth	zero,12(r16)
    931c:	00085a40 	call	85a4 <__sfp_lock_release>
    9320:	9005883a 	mov	r2,r18
    9324:	003fdc06 	br	9298 <__alt_mem_epcs_flash_controller_0+0xff808298>
    9328:	00085900 	call	8590 <__sinit>
    932c:	003fd706 	br	928c <__alt_mem_epcs_flash_controller_0+0xff80828c>
    9330:	04bfffc4 	movi	r18,-1
    9334:	003fe806 	br	92d8 <__alt_mem_epcs_flash_controller_0+0xff8082d8>
    9338:	81400417 	ldw	r5,16(r16)
    933c:	8809883a 	mov	r4,r17
    9340:	00087040 	call	8704 <_free_r>
    9344:	003fe706 	br	92e4 <__alt_mem_epcs_flash_controller_0+0xff8082e4>
    9348:	0005883a 	mov	r2,zero
    934c:	f800283a 	ret

00009350 <fclose>:
    9350:	00800074 	movhi	r2,1
    9354:	10ae3d04 	addi	r2,r2,-18188
    9358:	200b883a 	mov	r5,r4
    935c:	11000017 	ldw	r4,0(r2)
    9360:	00092601 	jmpi	9260 <_fclose_r>

00009364 <_fstat_r>:
    9364:	defffd04 	addi	sp,sp,-12
    9368:	2805883a 	mov	r2,r5
    936c:	dc000015 	stw	r16,0(sp)
    9370:	04000074 	movhi	r16,1
    9374:	dc400115 	stw	r17,4(sp)
    9378:	84352004 	addi	r16,r16,-11136
    937c:	2023883a 	mov	r17,r4
    9380:	300b883a 	mov	r5,r6
    9384:	1009883a 	mov	r4,r2
    9388:	dfc00215 	stw	ra,8(sp)
    938c:	80000015 	stw	zero,0(r16)
    9390:	00095440 	call	9544 <fstat>
    9394:	00ffffc4 	movi	r3,-1
    9398:	10c00526 	beq	r2,r3,93b0 <_fstat_r+0x4c>
    939c:	dfc00217 	ldw	ra,8(sp)
    93a0:	dc400117 	ldw	r17,4(sp)
    93a4:	dc000017 	ldw	r16,0(sp)
    93a8:	dec00304 	addi	sp,sp,12
    93ac:	f800283a 	ret
    93b0:	80c00017 	ldw	r3,0(r16)
    93b4:	183ff926 	beq	r3,zero,939c <__alt_mem_epcs_flash_controller_0+0xff80839c>
    93b8:	88c00015 	stw	r3,0(r17)
    93bc:	003ff706 	br	939c <__alt_mem_epcs_flash_controller_0+0xff80839c>

000093c0 <_isatty_r>:
    93c0:	defffd04 	addi	sp,sp,-12
    93c4:	dc000015 	stw	r16,0(sp)
    93c8:	04000074 	movhi	r16,1
    93cc:	dc400115 	stw	r17,4(sp)
    93d0:	84352004 	addi	r16,r16,-11136
    93d4:	2023883a 	mov	r17,r4
    93d8:	2809883a 	mov	r4,r5
    93dc:	dfc00215 	stw	ra,8(sp)
    93e0:	80000015 	stw	zero,0(r16)
    93e4:	00096380 	call	9638 <isatty>
    93e8:	00ffffc4 	movi	r3,-1
    93ec:	10c00526 	beq	r2,r3,9404 <_isatty_r+0x44>
    93f0:	dfc00217 	ldw	ra,8(sp)
    93f4:	dc400117 	ldw	r17,4(sp)
    93f8:	dc000017 	ldw	r16,0(sp)
    93fc:	dec00304 	addi	sp,sp,12
    9400:	f800283a 	ret
    9404:	80c00017 	ldw	r3,0(r16)
    9408:	183ff926 	beq	r3,zero,93f0 <__alt_mem_epcs_flash_controller_0+0xff8083f0>
    940c:	88c00015 	stw	r3,0(r17)
    9410:	003ff706 	br	93f0 <__alt_mem_epcs_flash_controller_0+0xff8083f0>

00009414 <_lseek_r>:
    9414:	defffd04 	addi	sp,sp,-12
    9418:	2805883a 	mov	r2,r5
    941c:	dc000015 	stw	r16,0(sp)
    9420:	04000074 	movhi	r16,1
    9424:	dc400115 	stw	r17,4(sp)
    9428:	300b883a 	mov	r5,r6
    942c:	84352004 	addi	r16,r16,-11136
    9430:	2023883a 	mov	r17,r4
    9434:	380d883a 	mov	r6,r7
    9438:	1009883a 	mov	r4,r2
    943c:	dfc00215 	stw	ra,8(sp)
    9440:	80000015 	stw	zero,0(r16)
    9444:	00097200 	call	9720 <lseek>
    9448:	00ffffc4 	movi	r3,-1
    944c:	10c00526 	beq	r2,r3,9464 <_lseek_r+0x50>
    9450:	dfc00217 	ldw	ra,8(sp)
    9454:	dc400117 	ldw	r17,4(sp)
    9458:	dc000017 	ldw	r16,0(sp)
    945c:	dec00304 	addi	sp,sp,12
    9460:	f800283a 	ret
    9464:	80c00017 	ldw	r3,0(r16)
    9468:	183ff926 	beq	r3,zero,9450 <__alt_mem_epcs_flash_controller_0+0xff808450>
    946c:	88c00015 	stw	r3,0(r17)
    9470:	003ff706 	br	9450 <__alt_mem_epcs_flash_controller_0+0xff808450>

00009474 <_read_r>:
    9474:	defffd04 	addi	sp,sp,-12
    9478:	2805883a 	mov	r2,r5
    947c:	dc000015 	stw	r16,0(sp)
    9480:	04000074 	movhi	r16,1
    9484:	dc400115 	stw	r17,4(sp)
    9488:	300b883a 	mov	r5,r6
    948c:	84352004 	addi	r16,r16,-11136
    9490:	2023883a 	mov	r17,r4
    9494:	380d883a 	mov	r6,r7
    9498:	1009883a 	mov	r4,r2
    949c:	dfc00215 	stw	ra,8(sp)
    94a0:	80000015 	stw	zero,0(r16)
    94a4:	00098800 	call	9880 <read>
    94a8:	00ffffc4 	movi	r3,-1
    94ac:	10c00526 	beq	r2,r3,94c4 <_read_r+0x50>
    94b0:	dfc00217 	ldw	ra,8(sp)
    94b4:	dc400117 	ldw	r17,4(sp)
    94b8:	dc000017 	ldw	r16,0(sp)
    94bc:	dec00304 	addi	sp,sp,12
    94c0:	f800283a 	ret
    94c4:	80c00017 	ldw	r3,0(r16)
    94c8:	183ff926 	beq	r3,zero,94b0 <__alt_mem_epcs_flash_controller_0+0xff8084b0>
    94cc:	88c00015 	stw	r3,0(r17)
    94d0:	003ff706 	br	94b0 <__alt_mem_epcs_flash_controller_0+0xff8084b0>

000094d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    94d4:	defffd04 	addi	sp,sp,-12
    94d8:	df000215 	stw	fp,8(sp)
    94dc:	df000204 	addi	fp,sp,8
    94e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    94e4:	0001883a 	nop
    94e8:	e0bfff17 	ldw	r2,-4(fp)
    94ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    94f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    94f4:	10000226 	beq	r2,zero,9500 <_exit+0x2c>
    ALT_SIM_FAIL();
    94f8:	002af070 	cmpltui	zero,zero,43969
    94fc:	00000106 	br	9504 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    9500:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9504:	003fff06 	br	9504 <__alt_mem_epcs_flash_controller_0+0xff808504>

00009508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9508:	defffe04 	addi	sp,sp,-8
    950c:	dfc00115 	stw	ra,4(sp)
    9510:	df000015 	stw	fp,0(sp)
    9514:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9518:	d0a00517 	ldw	r2,-32748(gp)
    951c:	10000326 	beq	r2,zero,952c <alt_get_errno+0x24>
    9520:	d0a00517 	ldw	r2,-32748(gp)
    9524:	103ee83a 	callr	r2
    9528:	00000106 	br	9530 <alt_get_errno+0x28>
    952c:	d0a6ef04 	addi	r2,gp,-25668
}
    9530:	e037883a 	mov	sp,fp
    9534:	dfc00117 	ldw	ra,4(sp)
    9538:	df000017 	ldw	fp,0(sp)
    953c:	dec00204 	addi	sp,sp,8
    9540:	f800283a 	ret

00009544 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9544:	defffb04 	addi	sp,sp,-20
    9548:	dfc00415 	stw	ra,16(sp)
    954c:	df000315 	stw	fp,12(sp)
    9550:	df000304 	addi	fp,sp,12
    9554:	e13ffe15 	stw	r4,-8(fp)
    9558:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    955c:	e0bffe17 	ldw	r2,-8(fp)
    9560:	10000816 	blt	r2,zero,9584 <fstat+0x40>
    9564:	01400304 	movi	r5,12
    9568:	e13ffe17 	ldw	r4,-8(fp)
    956c:	00030c80 	call	30c8 <__mulsi3>
    9570:	1007883a 	mov	r3,r2
    9574:	00800074 	movhi	r2,1
    9578:	10abc604 	addi	r2,r2,-20712
    957c:	1885883a 	add	r2,r3,r2
    9580:	00000106 	br	9588 <fstat+0x44>
    9584:	0005883a 	mov	r2,zero
    9588:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    958c:	e0bffd17 	ldw	r2,-12(fp)
    9590:	10001026 	beq	r2,zero,95d4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9594:	e0bffd17 	ldw	r2,-12(fp)
    9598:	10800017 	ldw	r2,0(r2)
    959c:	10800817 	ldw	r2,32(r2)
    95a0:	10000726 	beq	r2,zero,95c0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    95a4:	e0bffd17 	ldw	r2,-12(fp)
    95a8:	10800017 	ldw	r2,0(r2)
    95ac:	10800817 	ldw	r2,32(r2)
    95b0:	e17fff17 	ldw	r5,-4(fp)
    95b4:	e13ffd17 	ldw	r4,-12(fp)
    95b8:	103ee83a 	callr	r2
    95bc:	00000a06 	br	95e8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    95c0:	e0bfff17 	ldw	r2,-4(fp)
    95c4:	00c80004 	movi	r3,8192
    95c8:	10c00115 	stw	r3,4(r2)
      return 0;
    95cc:	0005883a 	mov	r2,zero
    95d0:	00000506 	br	95e8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    95d4:	00095080 	call	9508 <alt_get_errno>
    95d8:	1007883a 	mov	r3,r2
    95dc:	00801444 	movi	r2,81
    95e0:	18800015 	stw	r2,0(r3)
    return -1;
    95e4:	00bfffc4 	movi	r2,-1
  }
}
    95e8:	e037883a 	mov	sp,fp
    95ec:	dfc00117 	ldw	ra,4(sp)
    95f0:	df000017 	ldw	fp,0(sp)
    95f4:	dec00204 	addi	sp,sp,8
    95f8:	f800283a 	ret

000095fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    95fc:	defffe04 	addi	sp,sp,-8
    9600:	dfc00115 	stw	ra,4(sp)
    9604:	df000015 	stw	fp,0(sp)
    9608:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    960c:	d0a00517 	ldw	r2,-32748(gp)
    9610:	10000326 	beq	r2,zero,9620 <alt_get_errno+0x24>
    9614:	d0a00517 	ldw	r2,-32748(gp)
    9618:	103ee83a 	callr	r2
    961c:	00000106 	br	9624 <alt_get_errno+0x28>
    9620:	d0a6ef04 	addi	r2,gp,-25668
}
    9624:	e037883a 	mov	sp,fp
    9628:	dfc00117 	ldw	ra,4(sp)
    962c:	df000017 	ldw	fp,0(sp)
    9630:	dec00204 	addi	sp,sp,8
    9634:	f800283a 	ret

00009638 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    9638:	deffed04 	addi	sp,sp,-76
    963c:	dfc01215 	stw	ra,72(sp)
    9640:	df001115 	stw	fp,68(sp)
    9644:	df001104 	addi	fp,sp,68
    9648:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    964c:	e0bfff17 	ldw	r2,-4(fp)
    9650:	10000816 	blt	r2,zero,9674 <isatty+0x3c>
    9654:	01400304 	movi	r5,12
    9658:	e13fff17 	ldw	r4,-4(fp)
    965c:	00030c80 	call	30c8 <__mulsi3>
    9660:	1007883a 	mov	r3,r2
    9664:	00800074 	movhi	r2,1
    9668:	10abc604 	addi	r2,r2,-20712
    966c:	1885883a 	add	r2,r3,r2
    9670:	00000106 	br	9678 <isatty+0x40>
    9674:	0005883a 	mov	r2,zero
    9678:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    967c:	e0bfef17 	ldw	r2,-68(fp)
    9680:	10000e26 	beq	r2,zero,96bc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    9684:	e0bfef17 	ldw	r2,-68(fp)
    9688:	10800017 	ldw	r2,0(r2)
    968c:	10800817 	ldw	r2,32(r2)
    9690:	1000021e 	bne	r2,zero,969c <isatty+0x64>
    {
      return 1;
    9694:	00800044 	movi	r2,1
    9698:	00000d06 	br	96d0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    969c:	e0bff004 	addi	r2,fp,-64
    96a0:	100b883a 	mov	r5,r2
    96a4:	e13fff17 	ldw	r4,-4(fp)
    96a8:	00095440 	call	9544 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    96ac:	e0bff117 	ldw	r2,-60(fp)
    96b0:	10880020 	cmpeqi	r2,r2,8192
    96b4:	10803fcc 	andi	r2,r2,255
    96b8:	00000506 	br	96d0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    96bc:	00095fc0 	call	95fc <alt_get_errno>
    96c0:	1007883a 	mov	r3,r2
    96c4:	00801444 	movi	r2,81
    96c8:	18800015 	stw	r2,0(r3)
    return 0;
    96cc:	0005883a 	mov	r2,zero
  }
}
    96d0:	e037883a 	mov	sp,fp
    96d4:	dfc00117 	ldw	ra,4(sp)
    96d8:	df000017 	ldw	fp,0(sp)
    96dc:	dec00204 	addi	sp,sp,8
    96e0:	f800283a 	ret

000096e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    96e4:	defffe04 	addi	sp,sp,-8
    96e8:	dfc00115 	stw	ra,4(sp)
    96ec:	df000015 	stw	fp,0(sp)
    96f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    96f4:	d0a00517 	ldw	r2,-32748(gp)
    96f8:	10000326 	beq	r2,zero,9708 <alt_get_errno+0x24>
    96fc:	d0a00517 	ldw	r2,-32748(gp)
    9700:	103ee83a 	callr	r2
    9704:	00000106 	br	970c <alt_get_errno+0x28>
    9708:	d0a6ef04 	addi	r2,gp,-25668
}
    970c:	e037883a 	mov	sp,fp
    9710:	dfc00117 	ldw	ra,4(sp)
    9714:	df000017 	ldw	fp,0(sp)
    9718:	dec00204 	addi	sp,sp,8
    971c:	f800283a 	ret

00009720 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    9720:	defff904 	addi	sp,sp,-28
    9724:	dfc00615 	stw	ra,24(sp)
    9728:	df000515 	stw	fp,20(sp)
    972c:	df000504 	addi	fp,sp,20
    9730:	e13ffd15 	stw	r4,-12(fp)
    9734:	e17ffe15 	stw	r5,-8(fp)
    9738:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    973c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9740:	e0bffd17 	ldw	r2,-12(fp)
    9744:	10000816 	blt	r2,zero,9768 <lseek+0x48>
    9748:	01400304 	movi	r5,12
    974c:	e13ffd17 	ldw	r4,-12(fp)
    9750:	00030c80 	call	30c8 <__mulsi3>
    9754:	1007883a 	mov	r3,r2
    9758:	00800074 	movhi	r2,1
    975c:	10abc604 	addi	r2,r2,-20712
    9760:	1885883a 	add	r2,r3,r2
    9764:	00000106 	br	976c <lseek+0x4c>
    9768:	0005883a 	mov	r2,zero
    976c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    9770:	e0bffc17 	ldw	r2,-16(fp)
    9774:	10001026 	beq	r2,zero,97b8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    9778:	e0bffc17 	ldw	r2,-16(fp)
    977c:	10800017 	ldw	r2,0(r2)
    9780:	10800717 	ldw	r2,28(r2)
    9784:	10000926 	beq	r2,zero,97ac <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    9788:	e0bffc17 	ldw	r2,-16(fp)
    978c:	10800017 	ldw	r2,0(r2)
    9790:	10800717 	ldw	r2,28(r2)
    9794:	e1bfff17 	ldw	r6,-4(fp)
    9798:	e17ffe17 	ldw	r5,-8(fp)
    979c:	e13ffc17 	ldw	r4,-16(fp)
    97a0:	103ee83a 	callr	r2
    97a4:	e0bffb15 	stw	r2,-20(fp)
    97a8:	00000506 	br	97c0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    97ac:	00bfde84 	movi	r2,-134
    97b0:	e0bffb15 	stw	r2,-20(fp)
    97b4:	00000206 	br	97c0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    97b8:	00bfebc4 	movi	r2,-81
    97bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    97c0:	e0bffb17 	ldw	r2,-20(fp)
    97c4:	1000070e 	bge	r2,zero,97e4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    97c8:	00096e40 	call	96e4 <alt_get_errno>
    97cc:	1007883a 	mov	r3,r2
    97d0:	e0bffb17 	ldw	r2,-20(fp)
    97d4:	0085c83a 	sub	r2,zero,r2
    97d8:	18800015 	stw	r2,0(r3)
    rc = -1;
    97dc:	00bfffc4 	movi	r2,-1
    97e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    97e4:	e0bffb17 	ldw	r2,-20(fp)
}
    97e8:	e037883a 	mov	sp,fp
    97ec:	dfc00117 	ldw	ra,4(sp)
    97f0:	df000017 	ldw	fp,0(sp)
    97f4:	dec00204 	addi	sp,sp,8
    97f8:	f800283a 	ret

000097fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    97fc:	defffe04 	addi	sp,sp,-8
    9800:	df000115 	stw	fp,4(sp)
    9804:	df000104 	addi	fp,sp,4
    9808:	e13fff15 	stw	r4,-4(fp)
}
    980c:	0001883a 	nop
    9810:	e037883a 	mov	sp,fp
    9814:	df000017 	ldw	fp,0(sp)
    9818:	dec00104 	addi	sp,sp,4
    981c:	f800283a 	ret

00009820 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    9820:	defffe04 	addi	sp,sp,-8
    9824:	df000115 	stw	fp,4(sp)
    9828:	df000104 	addi	fp,sp,4
    982c:	e13fff15 	stw	r4,-4(fp)
}
    9830:	0001883a 	nop
    9834:	e037883a 	mov	sp,fp
    9838:	df000017 	ldw	fp,0(sp)
    983c:	dec00104 	addi	sp,sp,4
    9840:	f800283a 	ret

00009844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9844:	defffe04 	addi	sp,sp,-8
    9848:	dfc00115 	stw	ra,4(sp)
    984c:	df000015 	stw	fp,0(sp)
    9850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9854:	d0a00517 	ldw	r2,-32748(gp)
    9858:	10000326 	beq	r2,zero,9868 <alt_get_errno+0x24>
    985c:	d0a00517 	ldw	r2,-32748(gp)
    9860:	103ee83a 	callr	r2
    9864:	00000106 	br	986c <alt_get_errno+0x28>
    9868:	d0a6ef04 	addi	r2,gp,-25668
}
    986c:	e037883a 	mov	sp,fp
    9870:	dfc00117 	ldw	ra,4(sp)
    9874:	df000017 	ldw	fp,0(sp)
    9878:	dec00204 	addi	sp,sp,8
    987c:	f800283a 	ret

00009880 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    9880:	defff904 	addi	sp,sp,-28
    9884:	dfc00615 	stw	ra,24(sp)
    9888:	df000515 	stw	fp,20(sp)
    988c:	df000504 	addi	fp,sp,20
    9890:	e13ffd15 	stw	r4,-12(fp)
    9894:	e17ffe15 	stw	r5,-8(fp)
    9898:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    989c:	e0bffd17 	ldw	r2,-12(fp)
    98a0:	10000816 	blt	r2,zero,98c4 <read+0x44>
    98a4:	01400304 	movi	r5,12
    98a8:	e13ffd17 	ldw	r4,-12(fp)
    98ac:	00030c80 	call	30c8 <__mulsi3>
    98b0:	1007883a 	mov	r3,r2
    98b4:	00800074 	movhi	r2,1
    98b8:	10abc604 	addi	r2,r2,-20712
    98bc:	1885883a 	add	r2,r3,r2
    98c0:	00000106 	br	98c8 <read+0x48>
    98c4:	0005883a 	mov	r2,zero
    98c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    98cc:	e0bffb17 	ldw	r2,-20(fp)
    98d0:	10002226 	beq	r2,zero,995c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    98d4:	e0bffb17 	ldw	r2,-20(fp)
    98d8:	10800217 	ldw	r2,8(r2)
    98dc:	108000cc 	andi	r2,r2,3
    98e0:	10800060 	cmpeqi	r2,r2,1
    98e4:	1000181e 	bne	r2,zero,9948 <read+0xc8>
        (fd->dev->read))
    98e8:	e0bffb17 	ldw	r2,-20(fp)
    98ec:	10800017 	ldw	r2,0(r2)
    98f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    98f4:	10001426 	beq	r2,zero,9948 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    98f8:	e0bffb17 	ldw	r2,-20(fp)
    98fc:	10800017 	ldw	r2,0(r2)
    9900:	10800517 	ldw	r2,20(r2)
    9904:	e0ffff17 	ldw	r3,-4(fp)
    9908:	180d883a 	mov	r6,r3
    990c:	e17ffe17 	ldw	r5,-8(fp)
    9910:	e13ffb17 	ldw	r4,-20(fp)
    9914:	103ee83a 	callr	r2
    9918:	e0bffc15 	stw	r2,-16(fp)
    991c:	e0bffc17 	ldw	r2,-16(fp)
    9920:	1000070e 	bge	r2,zero,9940 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    9924:	00098440 	call	9844 <alt_get_errno>
    9928:	1007883a 	mov	r3,r2
    992c:	e0bffc17 	ldw	r2,-16(fp)
    9930:	0085c83a 	sub	r2,zero,r2
    9934:	18800015 	stw	r2,0(r3)
          return -1;
    9938:	00bfffc4 	movi	r2,-1
    993c:	00000c06 	br	9970 <read+0xf0>
        }
        return rval;
    9940:	e0bffc17 	ldw	r2,-16(fp)
    9944:	00000a06 	br	9970 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    9948:	00098440 	call	9844 <alt_get_errno>
    994c:	1007883a 	mov	r3,r2
    9950:	00800344 	movi	r2,13
    9954:	18800015 	stw	r2,0(r3)
    9958:	00000406 	br	996c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    995c:	00098440 	call	9844 <alt_get_errno>
    9960:	1007883a 	mov	r3,r2
    9964:	00801444 	movi	r2,81
    9968:	18800015 	stw	r2,0(r3)
  }
  return -1;
    996c:	00bfffc4 	movi	r2,-1
}
    9970:	e037883a 	mov	sp,fp
    9974:	dfc00117 	ldw	ra,4(sp)
    9978:	df000017 	ldw	fp,0(sp)
    997c:	dec00204 	addi	sp,sp,8
    9980:	f800283a 	ret

00009984 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    9984:	defff904 	addi	sp,sp,-28
    9988:	df000615 	stw	fp,24(sp)
    998c:	df000604 	addi	fp,sp,24
    9990:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9994:	0005303a 	rdctl	r2,status
    9998:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    999c:	e0fffe17 	ldw	r3,-8(fp)
    99a0:	00bfff84 	movi	r2,-2
    99a4:	1884703a 	and	r2,r3,r2
    99a8:	1001703a 	wrctl	status,r2
  
  return context;
    99ac:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    99b0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    99b4:	d0a00f17 	ldw	r2,-32708(gp)
    99b8:	10c000c4 	addi	r3,r2,3
    99bc:	00bfff04 	movi	r2,-4
    99c0:	1884703a 	and	r2,r3,r2
    99c4:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    99c8:	d0e00f17 	ldw	r3,-32708(gp)
    99cc:	e0bfff17 	ldw	r2,-4(fp)
    99d0:	1887883a 	add	r3,r3,r2
    99d4:	00802034 	movhi	r2,128
    99d8:	10800004 	addi	r2,r2,0
    99dc:	10c0062e 	bgeu	r2,r3,99f8 <sbrk+0x74>
    99e0:	e0bffb17 	ldw	r2,-20(fp)
    99e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    99e8:	e0bffa17 	ldw	r2,-24(fp)
    99ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    99f0:	00bfffc4 	movi	r2,-1
    99f4:	00000b06 	br	9a24 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    99f8:	d0a00f17 	ldw	r2,-32708(gp)
    99fc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    9a00:	d0e00f17 	ldw	r3,-32708(gp)
    9a04:	e0bfff17 	ldw	r2,-4(fp)
    9a08:	1885883a 	add	r2,r3,r2
    9a0c:	d0a00f15 	stw	r2,-32708(gp)
    9a10:	e0bffb17 	ldw	r2,-20(fp)
    9a14:	e0bffc15 	stw	r2,-16(fp)
    9a18:	e0bffc17 	ldw	r2,-16(fp)
    9a1c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    9a20:	e0bffd17 	ldw	r2,-12(fp)
} 
    9a24:	e037883a 	mov	sp,fp
    9a28:	df000017 	ldw	fp,0(sp)
    9a2c:	dec00104 	addi	sp,sp,4
    9a30:	f800283a 	ret

00009a34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9a34:	defffe04 	addi	sp,sp,-8
    9a38:	dfc00115 	stw	ra,4(sp)
    9a3c:	df000015 	stw	fp,0(sp)
    9a40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9a44:	d0a00517 	ldw	r2,-32748(gp)
    9a48:	10000326 	beq	r2,zero,9a58 <alt_get_errno+0x24>
    9a4c:	d0a00517 	ldw	r2,-32748(gp)
    9a50:	103ee83a 	callr	r2
    9a54:	00000106 	br	9a5c <alt_get_errno+0x28>
    9a58:	d0a6ef04 	addi	r2,gp,-25668
}
    9a5c:	e037883a 	mov	sp,fp
    9a60:	dfc00117 	ldw	ra,4(sp)
    9a64:	df000017 	ldw	fp,0(sp)
    9a68:	dec00204 	addi	sp,sp,8
    9a6c:	f800283a 	ret

00009a70 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9a70:	defff904 	addi	sp,sp,-28
    9a74:	dfc00615 	stw	ra,24(sp)
    9a78:	df000515 	stw	fp,20(sp)
    9a7c:	df000504 	addi	fp,sp,20
    9a80:	e13ffd15 	stw	r4,-12(fp)
    9a84:	e17ffe15 	stw	r5,-8(fp)
    9a88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9a8c:	e0bffd17 	ldw	r2,-12(fp)
    9a90:	10000816 	blt	r2,zero,9ab4 <write+0x44>
    9a94:	01400304 	movi	r5,12
    9a98:	e13ffd17 	ldw	r4,-12(fp)
    9a9c:	00030c80 	call	30c8 <__mulsi3>
    9aa0:	1007883a 	mov	r3,r2
    9aa4:	00800074 	movhi	r2,1
    9aa8:	10abc604 	addi	r2,r2,-20712
    9aac:	1885883a 	add	r2,r3,r2
    9ab0:	00000106 	br	9ab8 <write+0x48>
    9ab4:	0005883a 	mov	r2,zero
    9ab8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9abc:	e0bffb17 	ldw	r2,-20(fp)
    9ac0:	10002126 	beq	r2,zero,9b48 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9ac4:	e0bffb17 	ldw	r2,-20(fp)
    9ac8:	10800217 	ldw	r2,8(r2)
    9acc:	108000cc 	andi	r2,r2,3
    9ad0:	10001826 	beq	r2,zero,9b34 <write+0xc4>
    9ad4:	e0bffb17 	ldw	r2,-20(fp)
    9ad8:	10800017 	ldw	r2,0(r2)
    9adc:	10800617 	ldw	r2,24(r2)
    9ae0:	10001426 	beq	r2,zero,9b34 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9ae4:	e0bffb17 	ldw	r2,-20(fp)
    9ae8:	10800017 	ldw	r2,0(r2)
    9aec:	10800617 	ldw	r2,24(r2)
    9af0:	e0ffff17 	ldw	r3,-4(fp)
    9af4:	180d883a 	mov	r6,r3
    9af8:	e17ffe17 	ldw	r5,-8(fp)
    9afc:	e13ffb17 	ldw	r4,-20(fp)
    9b00:	103ee83a 	callr	r2
    9b04:	e0bffc15 	stw	r2,-16(fp)
    9b08:	e0bffc17 	ldw	r2,-16(fp)
    9b0c:	1000070e 	bge	r2,zero,9b2c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    9b10:	0009a340 	call	9a34 <alt_get_errno>
    9b14:	1007883a 	mov	r3,r2
    9b18:	e0bffc17 	ldw	r2,-16(fp)
    9b1c:	0085c83a 	sub	r2,zero,r2
    9b20:	18800015 	stw	r2,0(r3)
        return -1;
    9b24:	00bfffc4 	movi	r2,-1
    9b28:	00000c06 	br	9b5c <write+0xec>
      }
      return rval;
    9b2c:	e0bffc17 	ldw	r2,-16(fp)
    9b30:	00000a06 	br	9b5c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9b34:	0009a340 	call	9a34 <alt_get_errno>
    9b38:	1007883a 	mov	r3,r2
    9b3c:	00800344 	movi	r2,13
    9b40:	18800015 	stw	r2,0(r3)
    9b44:	00000406 	br	9b58 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9b48:	0009a340 	call	9a34 <alt_get_errno>
    9b4c:	1007883a 	mov	r3,r2
    9b50:	00801444 	movi	r2,81
    9b54:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9b58:	00bfffc4 	movi	r2,-1
}
    9b5c:	e037883a 	mov	sp,fp
    9b60:	dfc00117 	ldw	ra,4(sp)
    9b64:	df000017 	ldw	fp,0(sp)
    9b68:	dec00204 	addi	sp,sp,8
    9b6c:	f800283a 	ret
