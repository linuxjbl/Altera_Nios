
app00.elf:     file format elf32-littlenios2
app00.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000214 memsz 0x00000220 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001234  2**0
                  CONTENTS
  2 .text         00000214  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00010234  00010234  00001234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000000  00010234  00010234  00001234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000000c  00010234  00010234  00001234  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00010240  00010240  00001234  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000108  00000000  00000000  00001258  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000006df  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003dc  00000000  00000000  00001a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000042a  00000000  00000000  00001e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000118  00000000  00000000  00002248  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000380  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000021  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00002704  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000078  00000000  00000000  00002718  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00003422  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00003425  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00003431  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00003432  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00003433  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00003437  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000343b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0000343f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000012  00000000  00000000  00003445  2**0
                  CONTENTS, READONLY
 26 .jdi          00003b4d  00000000  00000000  00003457  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006368a  00000000  00000000  00006fa4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010234 l    d  .rodata	00000000 .rodata
00010234 l    d  .rwdata	00000000 .rwdata
00010234 l    d  .bss	00000000 .bss
00010240 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../app00_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000101d4 g     F .text	0000002c alt_main
00010234 g       *ABS*	00000000 __flash_rwdata_start
0001022c g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010238 g     O .bss	00000004 alt_argv
00018234 g       *ABS*	00000000 _gp
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010240 g       *ABS*	00000000 __bss_end
00010224 g     F .text	00000004 alt_dcache_flush_all
00010234 g       *ABS*	00000000 __ram_rwdata_end
00010234 g       *ABS*	00000000 __ram_rodata_end
00010240 g       *ABS*	00000000 end
00014000 g       *ABS*	00000000 __alt_stack_pointer
00010020 g     F .text	0000003c _start
00010220 g     F .text	00000004 alt_sys_init
00010234 g       *ABS*	00000000 __ram_rwdata_start
00010234 g       *ABS*	00000000 __ram_rodata_start
00010240 g       *ABS*	00000000 __alt_stack_base
00010234 g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000098 main
00010234 g     O .bss	00000004 alt_envp
00010234 g       *ABS*	00000000 __flash_rodata_start
00010200 g     F .text	00000020 alt_irq_init
0001023c g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010234 g       *ABS*	00000000 _edata
00010240 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00014000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010228 g     F .text	00000004 alt_icache_flush_all
000100f4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a08d14 	ori	gp,gp,33332
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10808d14 	ori	r2,r2,564

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c09014 	ori	r3,r3,576

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_gp+0xffff7e10>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00100f40 	call	100f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00101d40 	call	101d4 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <_gp+0xffff7e24>

0001005c <main>:
#include "sys/alt_stdio.h"
#include "system.h"

int main()
{
	*(volatile unsigned long *)HEX0_BASE = 0xc0;
   1005c:	00c03004 	movi	r3,192
   10060:	00800134 	movhi	r2,4
   10064:	10c00015 	stw	r3,0(r2)

	*(volatile unsigned long *)PERIOD1_BASE = 50000000;
   10068:	00c000f4 	movhi	r3,3
   1006c:	0080bef4 	movhi	r2,763
   10070:	10bc2004 	addi	r2,r2,-3968
   10074:	18c40004 	addi	r3,r3,4096
   10078:	18800015 	stw	r2,0(r3)
	*(volatile unsigned long *)DECODE1_BASE = 25000000;
   1007c:	01005f74 	movhi	r4,381
   10080:	00c000f4 	movhi	r3,3
   10084:	211e1004 	addi	r4,r4,30784
   10088:	18d40004 	addi	r3,r3,20480
   1008c:	19000015 	stw	r4,0(r3)
	*(volatile unsigned long *)PERIOD2_BASE = 20000000;
   10090:	00c000f4 	movhi	r3,3
   10094:	01004c74 	movhi	r4,305
   10098:	210b4004 	addi	r4,r4,11520
   1009c:	18c80004 	addi	r3,r3,8192
   100a0:	19000015 	stw	r4,0(r3)
	*(volatile unsigned long *)DECODE2_BASE = 10000000;
   100a4:	010000f4 	movhi	r4,3
   100a8:	00c02674 	movhi	r3,153
   100ac:	18e5a004 	addi	r3,r3,-27008
   100b0:	21180004 	addi	r4,r4,24576
   100b4:	20c00015 	stw	r3,0(r4)
	*(volatile unsigned long *)PERIOD3_BASE = 100000000;
   100b8:	01417db4 	movhi	r5,1526
   100bc:	010000f4 	movhi	r4,3
   100c0:	210c0004 	addi	r4,r4,12288
   100c4:	29784004 	addi	r5,r5,-7936
   100c8:	21400015 	stw	r5,0(r4)
	*(volatile unsigned long *)DECODE3_BASE = 50000000;
   100cc:	010000f4 	movhi	r4,3
   100d0:	211c0004 	addi	r4,r4,28672
   100d4:	20800015 	stw	r2,0(r4)
	*(volatile unsigned long *)PERIOD4_BASE = 50000000;
   100d8:	010000f4 	movhi	r4,3
   100dc:	21100004 	addi	r4,r4,16384
   100e0:	20800015 	stw	r2,0(r4)
	*(volatile unsigned long *)DECODE4_BASE = 10000000;
   100e4:	00800134 	movhi	r2,4
   100e8:	10a00004 	addi	r2,r2,-32768
   100ec:	10c00015 	stw	r3,0(r2)
   100f0:	003fff06 	br	100f0 <_gp+0xffff7ebc>

000100f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   100f4:	deffff04 	addi	sp,sp,-4
   100f8:	01000074 	movhi	r4,1
   100fc:	01400074 	movhi	r5,1
   10100:	dfc00015 	stw	ra,0(sp)
   10104:	21008d04 	addi	r4,r4,564
   10108:	29408d04 	addi	r5,r5,564

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1010c:	2140061e 	bne	r4,r5,10128 <alt_load+0x34>
   10110:	01000074 	movhi	r4,1
   10114:	01400074 	movhi	r5,1
   10118:	21000804 	addi	r4,r4,32
   1011c:	29400804 	addi	r5,r5,32
   10120:	2140121e 	bne	r4,r5,1016c <alt_load+0x78>
   10124:	00000b06 	br	10154 <alt_load+0x60>
   10128:	00c00074 	movhi	r3,1
   1012c:	18c08d04 	addi	r3,r3,564
   10130:	1907c83a 	sub	r3,r3,r4
   10134:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10138:	10fff526 	beq	r2,r3,10110 <_gp+0xffff7edc>
    {
      *to++ = *from++;
   1013c:	114f883a 	add	r7,r2,r5
   10140:	39c00017 	ldw	r7,0(r7)
   10144:	110d883a 	add	r6,r2,r4
   10148:	10800104 	addi	r2,r2,4
   1014c:	31c00015 	stw	r7,0(r6)
   10150:	003ff906 	br	10138 <_gp+0xffff7f04>
   10154:	01000074 	movhi	r4,1
   10158:	01400074 	movhi	r5,1
   1015c:	21008d04 	addi	r4,r4,564
   10160:	29408d04 	addi	r5,r5,564

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10164:	2140101e 	bne	r4,r5,101a8 <alt_load+0xb4>
   10168:	00000b06 	br	10198 <alt_load+0xa4>
   1016c:	00c00074 	movhi	r3,1
   10170:	18c00804 	addi	r3,r3,32
   10174:	1907c83a 	sub	r3,r3,r4
   10178:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1017c:	10fff526 	beq	r2,r3,10154 <_gp+0xffff7f20>
    {
      *to++ = *from++;
   10180:	114f883a 	add	r7,r2,r5
   10184:	39c00017 	ldw	r7,0(r7)
   10188:	110d883a 	add	r6,r2,r4
   1018c:	10800104 	addi	r2,r2,4
   10190:	31c00015 	stw	r7,0(r6)
   10194:	003ff906 	br	1017c <_gp+0xffff7f48>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10198:	00102240 	call	10224 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1019c:	dfc00017 	ldw	ra,0(sp)
   101a0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   101a4:	00102281 	jmpi	10228 <alt_icache_flush_all>
   101a8:	00c00074 	movhi	r3,1
   101ac:	18c08d04 	addi	r3,r3,564
   101b0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   101b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   101b8:	18bff726 	beq	r3,r2,10198 <_gp+0xffff7f64>
    {
      *to++ = *from++;
   101bc:	114f883a 	add	r7,r2,r5
   101c0:	39c00017 	ldw	r7,0(r7)
   101c4:	110d883a 	add	r6,r2,r4
   101c8:	10800104 	addi	r2,r2,4
   101cc:	31c00015 	stw	r7,0(r6)
   101d0:	003ff906 	br	101b8 <_gp+0xffff7f84>

000101d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   101d4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   101d8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   101dc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   101e0:	00102000 	call	10200 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   101e4:	00102200 	call	10220 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   101e8:	d1a00017 	ldw	r6,-32768(gp)
   101ec:	d1600117 	ldw	r5,-32764(gp)
   101f0:	d1200217 	ldw	r4,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   101f4:	dfc00017 	ldw	ra,0(sp)
   101f8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   101fc:	001005c1 	jmpi	1005c <main>

00010200 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10200:	deffff04 	addi	sp,sp,-4
   10204:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   10208:	001022c0 	call	1022c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1020c:	00800044 	movi	r2,1
   10210:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10214:	dfc00017 	ldw	ra,0(sp)
   10218:	dec00104 	addi	sp,sp,4
   1021c:	f800283a 	ret

00010220 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10220:	f800283a 	ret

00010224 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10224:	f800283a 	ret

00010228 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10228:	f800283a 	ret

0001022c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1022c:	000170fa 	wrctl	ienable,zero
   10230:	f800283a 	ret
